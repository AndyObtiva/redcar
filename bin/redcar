#!/usr/bin/env ruby

HERE = File.dirname(__FILE__)

# See if a code base was passed as an argument. If not
# default the codebase to the path of the freeride.rb script
codebase = File.expand_path(File.dirname(__FILE__))
project = nil

$FR_CODEBASE = codebase
$FR_PROJECT = project
$FREEBASE_APPLICATION = "Redcar"

$:.unshift(File.join(codebase, "..", "lib"))

require HERE + '/../freebase2/lib/freebase/freebase'

require 'gems'
Dir[HERE + "/../lib/*.rb"].each {|f| require f unless f =~ /gems\.rb/ }
require HERE + "/../vendor/glitter"

module Redcar
  VERSION = '0.0.1'
  VERSION_MAJOR = 0
  VERSION_MINOR = 0
  VERSION_RELEASE = 1
  ROOT = File.expand_path(File.dirname(__FILE__) + "/../")
  
  module App
    def self.ARGV=(v)
      @argv = v
    end
    def self.ARGV
      @argv
    end
  end
  
  ##
  # Start up FreeRIDE and block until shut down event is received
  #
  # dir:: [String] The directory which holds the FreeRIDE codebase
  # 
  #
  def Redcar.startup(dir)
    
    # verify the existence of the config directory (relative to codebase 
    # if relative path given)
    if File.absolute_path?(dir)
      configDir = dir
    else
      configDir = File.join($FR_CODEBASE,dir)
    end
      
    begin
      files = Dir.entries(configDir)
    rescue
      raise "Could not locate directory #{configDir}"
    end
    #make sure that either properties.yaml exists or default.yaml
    unless files.include?("properties.yaml") or files.include?("default.yaml")
      raise "Could not locate default.yaml in #{configDir}"
    end
    
    #This method will not return until Redcar is closed (shut down)
    $core = FreeBASE::Core.startup("properties.yaml","#{dir}/default.yaml")
  end

  def self.PLUGINS_PATH
    bus("/system/properties/config/codebase").data + "/" + 
      bus("/system/properties/config/plugin_path").data
  end
end

def usage
  puts "Redcar, version #{Redcar::VERSION_MAJOR}.#{Redcar::VERSION_MINOR}.#{Redcar::VERSION_RELEASE}\n"
  puts "usage: #{$0} [-p|--project projectfile] [-h|--help] files..." # [-p|--project projectfile]
  puts "   -o --open       open the file at startup (not yet implemented)"
  puts "   -p --project    open the project at startup (not yet implemented)"
  puts "   -l --line       go to line in file (not yet implemented)"
  puts "   -c --column     go to column in file (not yet implemented)"
  puts "   -h --help       print this help message"
  puts "   files:          open the files at startup (not yet implemented)"
end

Redcar::App.ARGV = Marshal.load(Marshal.dump(ARGV))

# opts = GetoptLong.new(['--codebase', '-b', GetoptLong::REQUIRED_ARGUMENT ],
#                       ['--project', '-p', GetoptLong::REQUIRED_ARGUMENT ],
#                       ['--help', '-h', GetoptLong::NO_ARGUMENT ]
#                      )

# begin
#   opts.each do |opt, arg|
#     case opt
#     when /(-p|--project)/
#       project = arg
#     when /(-h|--help)/
#       usage
#       exit
#     end
#   end
# rescue GetoptLong::InvalidOption
# #   usage
# #   exit 1
# end

config_dir = File.join(codebase, "..", "config")
Redcar.startup(config_dir)

