#!/usr/bin/env ruby

puts "starting redcar"

if ARGV.include?("-h") or ARGV.include?("--help")
  puts s=<<USAGE
Redcar (c) Daniel Lucraft 2007-#{Time.now.year}

Usage: redcar [OPTIONS] [FILE|DIRECTORY]* 

Files given are opened in tabs, directories are opened as projects.

               --help, -h   This information
             --detach, -d   Detach Redcar if there is standard input
                   --test   Test Redcar

Testing Options
            --spec PLUGIN   Run specs for plugin PLUGIN (e.g. project)
        
USAGE
  exit
end

if STDIN.isatty == false and ARGV.include?("-d")
  $stdin_contents = ""
  until STDIN.eof?
    $stdin_contents << STDIN.read
  end
  STDIN.close
  STDOUT.close
  STDERR.close
  $stdout = File.open("/dev/null", "w")
  $stderr = $stdout
  if pid = fork
    Process.detach(pid)
    exit(0)
  end
end

HERE = File.dirname(__FILE__)

# See if a code base was passed as an argument. If not
# default the codebase to the path of the freeride.rb script
codebase = File.expand_path(File.dirname(__FILE__))
project = nil

$FR_CODEBASE = codebase
$FR_PROJECT = project
$FREEBASE_APPLICATION = "Redcar"

$:.unshift(File.join(codebase, "..", "lib"))

require HERE + '/../freebase2/lib/freebase/freebase'

require 'gems'
Dir[HERE + "/../lib/*.rb"].each {|f| require f unless f =~ /gems\.rb/ }
require HERE + "/../vendor/glitter"

module Redcar
  VERSION = '0.0.1'
  VERSION_MAJOR = 0
  VERSION_MINOR = 0
  VERSION_RELEASE = 1
  ROOT = File.expand_path(File.dirname(__FILE__) + "/../")
  
  module App
    class << self
      attr_accessor :ARGV
    end
  end
  
  def self.verify_configurations(dir)
    # verify the existence of the config directory (relative to codebase 
    # if relative path given)
    if File.absolute_path?(dir)
      configDir = dir
    else
      configDir = File.join($FR_CODEBASE,dir)
    end
    
    begin
      files = Dir.entries(configDir)
    rescue
      raise "Could not locate directory #{configDir}"
    end
    # make sure that either properties.yaml exists or default.yaml
    unless files.include?("properties.yaml") or files.include?("default.yaml")
      raise "Could not locate default.yaml in #{configDir}"
    end
  end
  
  # Requires the same 'dir' as Redcar.startup. If plugin is
  # nil then runs all the specs, otherwise runs the specs for
  # that plugin.
  def self.spec(dir, plugin=nil)
    verify_configurations(dir)
    
    FreeBASE::Core.load_plugins("properties.yaml","#{dir}/default.yaml")
  end

  # Start up Redcar and block until shut down event is received
  #
  # dir:: [String] The directory which holds the FreeRIDE codebase
  def self.startup(dir)
    verify_configurations(dir)
    
    # This method will not return until Redcar is closed (shut down)
    FreeBASE::Core.startup("properties.yaml","#{dir}/default.yaml")
  end

  def self.PLUGINS_PATH
    bus("/system/properties/config/codebase").data + "/" + 
      bus("/system/properties/config/plugin_path").data
  end
end

Redcar::App.ARGV ||= Marshal.load(Marshal.dump(ARGV))

config_dir = File.join(codebase, "..", "config")

if ix = Redcar::App.ARGV.index("--spec")
  Redcar.spec(config_dir, Redcar::App.ARGV[ix+1])
elsif Redcar::App.ARGV.index("--test")
  Redcar.spec(config_dir)
end

Redcar.startup(config_dir)

