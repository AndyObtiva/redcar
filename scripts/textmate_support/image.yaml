--- 
9982EC7A-7577-11D9-A32D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open for Editing
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 9982EC7A-7577-11D9-A32D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_P4:=p4}" edit "$TM_FILEPATH"

      :input: none
B5AD55C2-887E-4649-BCD0-C50273612E86: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Reload Firefox
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: B5AD55C2-887E-4649-BCD0-C50273612E86
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.reload_firefox
      :input: none
0F1EF848-5333-4610-96FE-97C180B2653C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Balance Jr Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0F1EF848-5333-4610-96FE-97C180B2653C
      :disable_output_auto_indent: 
      :bundle_uuid: D99E8C0C-792F-11D9-A212-000D93B3A10E
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Balance Jr Help"
        Markdown.pl "$TM_BUNDLE_SUPPORT/Balance Jr Help.markdown"
        html_footer

      :input: none
2197A196-78E3-11D9-8177-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: "3"
      :before_running_command: saveModifiedFiles
      :name: Build in Flash
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 2197A196-78E3-11D9-8177-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "2"
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # In order to use this command, you need this to install flashcommand:
        # http://www.markme.com/mesh/archives/004419.cfm
        #
        #
        # You can optionally set these shell variables in the project information:
        #
        # FLASH_FLA_PATH     	/path/to/the/fla/file
        # FLASH_TEST_URL     	http://localhost/my_page_displaying_the_swf.php
        # FLASH_SWF_SAVE_PATH 	/path/where/copy/the/compiled/swf/file if successful
        #
        # If FLASH_FLA_PATH is not set, the selected .fla file in the project drawer will be used.
        # If FLASH_TEST_URL is not set, the resulting .swf is used directly
        #
        
        require_cmd flashcommand
        
        SWF="/tmp/temp.swf"
        FLASHCOMMAND=flashcommand
        
        # if a .fla file is selected, build it
        # if not, try to build $FLASH_FLA_PATH
        
        if [ "${TM_SELECTED_FILE##*.}" == "fla" ]
        then
        	FLA="$TM_SELECTED_FILE"
        elif [ $FLASH_FLA_PATH ]
        then
        	FLA="$FLASH_FLA_PATH"
        fi
        
        result=`"$FLASHCOMMAND" -e -s "$FLA" -o "$SWF"`
        
        #flashcommand output is very dirty and windoze like. Let's format it!
        "${TM_RUBY:-ruby}" "${TM_BUNDLE_SUPPORT}/formatBuildInFlashOutput.rb" "$result"
        
        if [ "$?" == 0 ]
        then
        	if [ $FLASH_SWF_SAVE_PATH ]
        	then
        		cp "$SWF" "$FLASH_SWF_SAVE_PATH"
        	fi
        
        	if [ $FLASH_TEST_URL ]
        	then
        		open "$FLASH_TEST_URL"
        	else
        		if [ $FLASH_SWF_SAVE_PATH ]
        		then
        			open "$FLASH_SWF_SAVE_PATH"
        		else
        			open "$SWF"
        		fi
        	fi
        fi
      :input: none
99F1A4C2-2156-4F24-902C-0F651B293ECE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: end tell
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: .
        modifiers: 
        - :alt
        - :super
      :uuid: 99F1A4C2-2156-4F24-902C-0F651B293ECE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: echo 'end tell'
      :input: none
9FEC1836-6E52-11D9-AA12-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Increase Quote Level for Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "'"
        modifiers: 
        - :super
      :uuid: 9FEC1836-6E52-11D9-AA12-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/(.*)/> $1/'
      :input: selection
883C87A4-C370-4C92-9307-3C46380EE12F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 883C87A4-C370-4C92-9307-3C46380EE12F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        # Turn the selected text into a function with positional
        # arguments.
        
        cat <<SNIPPET
        on ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}(\${2:arguments})
        	\${4:--function actions}
        end ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}
        SNIPPET
      :input: selection
B44403DA-5B16-407D-9750-8F2805B84FD6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Syntax Cheat Sheet
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: B44403DA-5B16-407D-9750-8F2805B84FD6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: open http://txt2tags.sourceforge.net/markup.html
      :input: none
25A113EB-AA3B-40F0-B30E-ED2C2F9866C0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: outgoing
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 25A113EB-AA3B-40F0-B30E-ED2C2F9866C0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_DIRECTORY"
        fi
              
        : ${TM_RUBY:=ruby}
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log.rb"
        HG_STYLE="${TM_BUNDLE_SUPPORT}/map-cmdline.changelog"
        
        
        "$TM_HG" outgoing -v --style "$HG_STYLE" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG" "--out"

      :input: none
6065BB2D-242A-4C3D-B523-6F560D65AC11: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle camelCase / underscore_delimited
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: _
        modifiers: 
        - :control
      :uuid: 6065BB2D-242A-4C3D-B523-6F560D65AC11
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # [hH]otFlamingCats -> hot_flaming_cats
        def camelcase_to_underscore(word)
        	word.gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').gsub(/([a-z\d])([A-Z])/,'\1_\2').downcase
        end
        
        # hot_flaming_cats -> hotFlamingCats
        def underscore_to_camelcase(word)
        	word.gsub(/\_(.)/) {|c| c[1].chr.upcase}
        end
        
        word = $stdin.gets
        is_camel = word.match(/[A-Z]/) ? true : false
        
        if is_camel then
        	print camelcase_to_underscore(word) 
        else
        	print underscore_to_camelcase(word)
        end

      :input: selection
7FBD47E6-F919-45C0-956C-3996106E0C49: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt meta.action
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Set Date
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "#"
        modifiers: []

      :uuid: 7FBD47E6-F919-45C0-956C-3996106E0C49
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        dialog = ENV['TM_SUPPORT_PATH'] + '/bin/tm_dialog'
        require ENV['TM_SUPPORT_PATH'] + '/lib/osx/plist'
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape'
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'
        require 'date'
        line = STDIN.read
        if line =~ / (at|due|from):\[(\d{4})-(\d{2})-(\d{2})\]$/
        absoluteYear, absoluteMonth, absoluteDay = $2.to_i, $3.to_i, $4.to_i
        weekdayDay = 0
        date = Date.new(absoluteYear,absoluteMonth,absoluteDay)
        else
          date = Date.today
          absoluteYear, absoluteMonth, absoluteDay = date.year, date.month, date.day
          weekdayDay = date.wday
        end
          tod = Date.today
        def to_cocoa_date(date)
          ((date - Date.new(2001, 1, 1)+1)* 3600 * 24).to_i
        end
        def from_cocoa_date(number)
          Date.new(2001,1,1)+number.to_i/(3600 * 24) - 1
        end
        def format(date)
          date.strftime("%A, %m/%d/%Y")
        end
        plist = { 
          'currentDeadline' => "Current value: " + format(date),
          'daysFromToday' => "Current value: " + (date - tod).to_s,
          'newDeadlineDate' => to_cocoa_date(date),
          'newDaysFromToday' => (date - tod).to_i,
          'today' => "Today is " + format(tod)
        }.to_plist
        str = `#{e_sh dialog} datePicker -mp #{e_sh plist}`
        res=OSX::PropertyList.load(str)
        if res['returnButton'].to_s != "OK" then
          newDate = nil
        else
          newDate = res['newDeadlineDate'].to_s
          if newDate =~ /^[\d\+\-*]+$/
            newDate = (tod + eval(res['newDaysFromToday'].to_s).to_i)
          else
            newDate =~ /^\w{3} (\w{3}) (\d{2}) \d{2}:\d{2}:\d{2} \w{3} (\d{4})/
            newDate = Date.new($3.to_i,Date::ABBR_MONTHNAMES.index($1),$2.to_i)-1
          end
        end
        #puts res['newDeadlineDate']/(3600*24)
        #pp from_cocoa_date(res['newDeadlineDate']).to_s
        if newDate.nil?
          TextMate.exit_discard
        else
          print e_sn(line).gsub(/ (at|due|from):\[\d{4}-\d{2}-\d{2}\]$/,"") + " #{if $1 && $1 != "" then $1 else "\$0due" end}:[#{newDate}]"
        end

      :input: selection
4351CBE0-CE02-472E-A0A9-F9F895B2946C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: GTD List View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
        - :super
      :uuid: 4351CBE0-CE02-472E-A0A9-F9F895B2946C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby  
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
        require "erb"
        require "pp"
        include ERB::Util
        
        $myPath = ENV['TM_DIRECTORY'] 
        $tags = [] #user defined contexts
        
        def readContexts(a)
          # processes contexts.gtd into script  
          context, tabCommand, tabString, regex, color = a.split(/\|/)
          $tags.push({:label => context[3..-1], :regexp => regex, :color => color, :matches => []})  
        end
        
        
        def TextMate.file_link (file, line = 0)
          return "txmt://open/?url=file://" + $myPath + "/" +
            file.gsub(/[^a-zA-Z0-9.-\/]/) { |m| sprintf("%%%02X", m[0]) } +
            ".gtd&amp;line=" + line.to_s
        end 
        
        # the contexts.gtd file is read, and converted into $contexts
        file = File.open($myPath+"/contexts.gtd", "r")
        file.each do |line|
          readContexts(line)
        end 
        
        # new feature - exclusion of selected files
        # this allows you to select which lists are included
        # in list views
        class ExList
          def initialize
            @values = []
          end
          def contains(test)
            found = true
            @values.each do |item|
              if test == item.chomp
                found = false
              end
            end
            return found
          end
          def add(item)
            @values.push item
          end
          def print
            puts @values
          end
        end
        
        xFile = File.open($myPath+"/excluded.gtd", "r")
        
        myList = ExList.new
        
        xFile.each do |line|
          myList.add(line)
        end
        
        # sorting happens
        $tags.each do |tag| 
          context = tag[:regexp]
          #puts context
          myFiles = Dir.entries($myPath)
          myFiles.each do |fileName|
            if ((fileName[-3,3] == "gtd") and myList.contains(fileName))
              lineno = 0
              mFile = File.open(fileName) 
              mFile.each do |line|
                lineno = lineno + 1
                tLine = line[3..-1]
                if tLine != nil
                  re = /\s/
                  if (line[0..1] == "- " or line[0..1] == "! ")
                    ctask = re.match(tLine)
                  else 
                    ctask = re.match(line)
                  end
                  if (ctask.pre_match == context)
                    results = {
                      :file => fileName[0..-5],
                      :line => lineno,
                      :content => ctask.post_match    
                    }
                    #results[:match] = html_escape($1)
                    tag[:matches] << results
                  end
        	   end
                #puts results.to_s       
              end
            end
          end
        end
        
        
        tmpl_file = "#{ENV['TM_BUNDLE_SUPPORT']}/template.rhtml"
        puts ERB.new(File.open(tmpl_file), 0, '<>').result
      :input: none
1A8EC6F7-D254-4888-9095-75C9DBA519F7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Line Output as Tool Tip
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 1A8EC6F7-D254-4888-9095-75C9DBA519F7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        echo
        test=`tail -c+2`
        osascript <<-APPLESCRIPT | tail -n +2 | perl -pe 'BEGIN {$/=undef} s/\n\z//'
        tell application "System Events"
            -- Get a reference to the text field
            set text_area to (process "R")'s (window "R Console")'s (scroll area 1)'s text area 1
            
            -- Get text before and after our command
            set oldtext to text_area's value
            tell application "R" to cmd "${test//\"/\"}" 
            set newtext to text_area's value
        
            -- Find the difference between old and new
            text from (oldtext's length + 1) to -1 of newtext
        end tell
        APPLESCRIPT
      :input: selection
4C31BAAA-2182-47D7-8B10-2B17A6078FCA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Wait
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4C31BAAA-2182-47D7-8B10-2B17A6078FCA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: w
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        if (oldtask[0] != "+") and (oldtask[0] != "^"):
        	sys.stdout.write("<- " + oldtask[3:])
        else:
            sys.stdout.write(oldtask)
      :input: selection
10CFDE4C-E433-48F8-AB94-17E1FBEFC074: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog, text.blog text.html.markdown, text.blog text.plain, text.blog text.html.textile, text.blog text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 10CFDE4C-E433-48F8-AB94-17E1FBEFC074
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging.rb"
        Blogging.new.preview
      :input: document
EC48C79A-82AA-11D9-8753-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: EC48C79A-82AA-11D9-8753-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 4679B572-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Perl Runner" "Perl"
        
        cat "$TM_BUNDLE_SUPPORT/Help.txt"|pre
        
        html_footer
      :input: none
2B282247-5930-462F-8D6E-54ADF228EC49: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt meta.action
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Change Context
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "@"
        modifiers: 
        - :super
      :uuid: 2B282247-5930-462F-8D6E-54ADF228EC49
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTDUtils.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
        line = STDIN.read
        contextList = GTDContexts.contexts
        choice = TextMate::UI.menu(contextList)
        if choice then
          print line.sub(/@(\S+)($|\s+)/) {|text,space| "@" + e_sn(contextList[choice]) + ((space.nil? or space == "") ? " " : space)+"$0"}
        else
          print e_sn(line)
        end

      :input: selection
38C6DE3A-7664-11D9-B58C-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Base
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 38C6DE3A-7664-11D9-B58C-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -w\n\n\
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT'] + \"/lib\"\n\
        require 'p4_diff'\n\n\
        Perforce::diff_active_file(\"\", \"Perforce\xE2\x80\x94Diff With Base\")\n"
      :input: none
B2908B89-B064-447E-B3A7-C03D4BEE6D1C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scilab
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: B2908B89-B064-447E-B3A7-C03D4BEE6D1C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Scilab Bundle Help" "Scilab"
        
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" <<'EOF'
        
        # Help for Scilab Bundle (v0.11)
        
        This Scilab bundle was created to help make editing Scilab scripts in TextMate a little easier. The two main benefits are:
        
        1. **Syntax Highlighting**
        
          Most conventional Scilab scripts should be interpreted correctly using the language grammar provided with this bundle. You'll get all the benefits of syntax highlighting, function pop-ups, and code folding.
        
        2. **Run Script Command**
        
          If you have `Scilab-4.1.app` installed, you'll be able to run the current script in a new instance of Scilab by simply pressing &#x2318;R. You can also load all functions defined in the working directory first (using getd) by pressing &#x21E7;&#x2318;R.
        
          You can obtain `Scilab-4.1.app` at <a href="javascript:TextMate.system('open http://www.lmac.utc.fr/~mottelet/Darwin/', null);">http://www.lmac.utc.fr/~mottelet/Darwin/</a>.
        
        If you have any suggestions or bug reports, feel free to send them to <a href="mailto:jc483@cornell.edu?subject=Scilab Bundle">jc483@cornell.edu</a> with the subject "Scilab Bundle".
        
        # Version History
        
        - v0.11 (March 5th, 2007)
        	- Thanks to Allan Odgaard for reviewing this bundle
        		- Help now uses `markdown_to_help.rb` instead of `Markdown.pl`
        		- `Scilab-4.1.app` is now located using `find_app`
        - v0.1 (March 3rd, 2007)
        	- Initial release
        
        # About This Bundle
        
        ## Disclaimer
        
        I'm just an amateur programmer, so it's very likely that there are better ways to automate some of the things that this bundle attempts to do. Feel free to correct any errors you may find, and if you want, you can publish your changes for everyone's benefit.
        
        ## Credits
        
        Created by Jiun Wei Chia. Various code stolen from the default TextMate bundles.
        
        EOF
        
        html_footer
      :input: none
F758BFD1-00CA-4742-BE71-032580080F5C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Load Fixtures (Test DB)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: F758BFD1-00CA-4742-BE71-032580080F5C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:fixtures:load -v RAILS_ENV -a test

      :input: none
EBD6D4CF-9F5E-4616-9880-5D3FF21EF408: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: EBD6D4CF-9F5E-4616-9880-5D3FF21EF408
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header PHPDoc\n\n\
        Markdown.pl <<'EOF'\n\n\
        # Snippets\n\n\
        This bundle contains snippets for use with [PHPDoc](http://phpdoc.org/).\n\n * `doc_c ` \xE2\x80\x94 Class\n * `doc_cp` \xE2\x80\x94 Class (post documentation)\n * `doc_d ` \xE2\x80\x94 Define inline constant\n * `doc_dp` \xE2\x80\x94 Define inline constant (post documentation)\n * `doc_f ` \xE2\x80\x94 Function\n * `doc_fp` \xE2\x80\x94 Function (post documentation)\n * `doc_h ` \xE2\x80\x94 Document header\n * `doc_i ` \xE2\x80\x94 Interface class\n * `doc_s ` \xE2\x80\x94 Abstract function signature\n * `doc_v ` \xE2\x80\x94 Class variable\n * `doc_vp` \xE2\x80\x94 Class variable (post documentation)\n * `doc` \xE2\x80\x94 Generates a docblock for the item following the caret. Currently supports a class/interface, function, define or variable\n\n\
        _Commands marked as \xE2\x80\x9Cpost documentation\xE2\x80\x9D are designed for undocumented code \xE2\x80\x94 in other words, a comment block is added at the caret position._\n\n\
        # Shell Variables\n\n\
        The snippets make use of two environment variables (_set these under Preferences &#x2192; Advanced &#x2192; Shell Variables_).\n\n * `TM_ORGANIZATION_NAME` \xE2\x80\x94 default value of @copyright [+ date]\n * `PHPDOC_AUTHOR` \xE2\x80\x94 default value of @author (realname will be used if not set)\n\n\
        If you want docblocks to automatically wrap after 80 columns, you need to set it up:\n\n\
        1. Open the Bundle Editor (&#x2303;&#x2325;&#x2318;B)\n\
        2. Find and select the \xE2\x80\x9CWrap Docblock at 80 Characters\xE2\x80\x9D command\n\
        3. Click in the white box next to \xE2\x80\x9CKey Equivalent\xE2\x80\x9D and press space\n\
        4. Close the Bundle Editor\n\
        EOF"
      :input: none
95C6ECD1-69B9-4EB9-840B-C7753C226306: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.setext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Subheading
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 95C6ECD1-69B9-4EB9-840B-C7753C226306
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: "-"
      :capture_pattern: 
      :command: head -n$((TM_LINE_NUMBER-1))|tail -n1|sed 's/./-/g'|tail -c +$((TM_LINE_INDEX+1))
      :input: document
881818AE-F2D4-4E5C-9245-5FF8B61B417D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Update Metadata
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: d
        modifiers: 
        - :super
      :uuid: 881818AE-F2D4-4E5C-9245-5FF8B61B417D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.update_metadata
      :input: document
87617D0E-E9E1-42EB-BBD6-CCB890C7DF8C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Create LaTeX Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 87617D0E-E9E1-42EB-BBD6-CCB890C7DF8C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2LATEX:=rst2newlatex.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2LATEX</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        $TRST "$TM_FILEPATH"
      :input: selection
B9091553-4317-415E-B381-4609BD453E01: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.diff
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Statistics (Lines Added/Removed)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: N
        modifiers: 
        - :control
      :uuid: B9091553-4317-415E-B381-4609BD453E01
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        egrep -v '^(\+\+\+|---) '|\
          tee >(add=$(grep ^+|wc -l);  echo 1>&2 "Lines Added   $add") \
             |{ rem=$(grep ^-|wc -l); wait; echo "Lines Removed $rem"; }

      :input: document
E8D80809-0CDE-4E57-AC2A-8C22DFF353EE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.double.include.c, string.quoted.other.lt-gt.include.c
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle System/Local Include
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "\""
        modifiers: 
        - :control
      :uuid: E8D80809-0CDE-4E57-AC2A-8C22DFF353EE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        print case str = STDIN.read
          when /\A"(.*)"\z/m then "<" + $1 + ">"
          when /\A<(.*)>\z/m then '"' + $1 + '"'
          else str
        end

      :input: selection
563CDF89-C286-4CDB-94AB-30819104470F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: variable.other.exclamation.matlab
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: = after !
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "="
        modifiers: []

      :uuid: 563CDF89-C286-4CDB-94AB-30819104470F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        # Replace != with ~= for the novice user
        line = ENV['TM_LINE_NUMBER'].to_i
        columns = ENV['TM_LINE_INDEX'].to_i-1
        textArray = STDIN.readlines
        print textArray.last. to_s.sub(/\!/,'~=')

      :input: selection
8957C99F-88F5-42CC-B355-AAC6BF3FDF8D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.bracketed.objc
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Method Call
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 8957C99F-88F5-42CC-B355-AAC6BF3FDF8D
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        line = STDIN.read
        offset = ENV['TM_INPUT_START_COLUMN'].to_i - 1
        caret_placement = 0
        tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
        if tmp > 0
        class String
          def index_of_nth_occurrence_of(n, ch)
            self.unpack("U*").each_with_index do |e, i|
              return i if e == ch && (n -= 1) == 0
            end
            return -1
          end
        end
          caret_placement += line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
        else
          caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
        end
        
        def match_iter(rgxp,str)
          offset = 0
          while m = str.match(rgxp)
            yield [m[0], m.begin(0) + offset, m[0].length]
            str = m.post_match
            offset += m.end(0)
          end
        end
        
        pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
        up = 0
        list = []
        
        up = 0
        pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
        start = [0]
        match_iter(pat , line[0..caret_placement]) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            start << beg
          elsif t == "]"
            start.pop
          end
        end
        
        
        up = 0
        last = line.length
        match_iter(pat , line[caret_placement+1..line.length]) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            up +=1
          elsif t == "]"
            if up == 0
              last = beg + caret_placement + 1
              break
            end
            up -=1
          end
        end
        
        list = []
        prefix = ""
        prefix = line[0..start[-1]-1] unless start[-1] == 0
        suffix = line[last+1..-1]
        l = line[start[-1]..last]
        up = -1
        
        match_iter(pat , l) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            up +=1
          elsif t == "]"
            up -=1
          elsif t !='"' and t !='@' and up == 0
            list << [beg,len]
          end
        end
        
        list << [l.length,0]
        offset += start[-1]
        if list.length > 2
          print e_sn(prefix+ l[0...list[1][0]].strip)
          #check to if the first "selector:" is not in the first line
          if k = line[0...start[-1]+list[0][0]].rindex("\n")
            firstIndex = list[0][0]+list[0][1]- k -1
            offset = start[-1]
          else
            firstIndex = list[0][0] + list[0][1] 
          end
          (1..(list.length() -2)).each do |ind|
            list[ind][1]+list[ind][0]
            b = (b = firstIndex-list[ind][1]+offset) > 0 ? b : 0
            print e_sn("\n" + " "*b + l[(list[ind][0])...(list[ind+1][0])].strip)
          end
          print e_sn(suffix) unless suffix.nil?
        else
          print e_sn(line)
        end

      :input: selection
2CE460A3-ADAE-47B6-8A89-EE142C714CC2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Previous History Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gA==

        modifiers: 
        - :alt
      :uuid: 2CE460A3-ADAE-47B6-8A89-EE142C714CC2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        require ENV['TM_BUNDLE_SUPPORT'] + "/lib/historyList.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        doc = STDIN.read
        new_doc = HistoryList.move_up(doc)
        TextMate.exit_discard if new_doc == doc
        print e_sn(new_doc)
      :input: selection
0122D7D0-A9D5-4FDC-95BA-BD61E52C2BAF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 0122D7D0-A9D5-4FDC-95BA-BD61E52C2BAF
      :disable_output_auto_indent: 
      :bundle_uuid: 005ECD5C-8762-4E90-8D8F-C778C91FFB66
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Movable Type Help\" \"Movable Type\"\n\
        Markdown.pl <<'EOF'\n\
        Help for Movable Type Bundle\n\
        ============================\n\n\
        Template Preview commands\n\
        -------------------------\n\n\
        In order to properly execute previews, you will need to configure TextMate or your project with the following shell variables:\n\n\
        * `$MT_HOME` \xE2\x80\x94 The working directory of your local MT installation.\n\
        * `$MT_BLOG` \xE2\x80\x94 The blog id of a weblog you wish to run your previews against.\n\n\
        Customizing your MT syntax highlighting\n\
        ---------------------------------------\n\n\
        You can customize the colors used to highlight MT container and variable tags. To do this, you can use these custom scopes for new color settings:\n\n\
        * meta.tag.mt.variable.html: Scope that covers the entire variable tag block (from `<$` to `$>`).\n\
        * meta.tag.mt.container.html: Scope that covers the entire container tag block (from `<` to `>`).\n\
        * entity.name.tag.mt: Scope for the inner portion of a MT container tag.\n\
        * variable.other.mt: Scope for the inner portion of a MT variable tag.\n\n\
        A note about the syntax highlighting of variable tags. Variable tags are written as `<$MTEntryTitle$>` to be recognized properly. Movable Type allows you to omit the `$` characters, but this language bundle requires them so they are distinguishable from the container tags.\n\n\
        Help\n\
        ----\n\n\
        A context-sensitive help command (`\xE2\x8C\x83H`) is available when the cursor is on a standard MT tag. It will display the online help for that tag from the Six Apart web site.\n\n\
        And More!\n\
        ---------\n\n\
        Several templates and snippets are also included with this bundle. The tab-triggered snippets are grouped by keyword (\xE2\x80\x9Centry\xE2\x80\x9D, \xE2\x80\x9Cblog\xE2\x80\x9D, \xE2\x80\x9Ccategory\xE2\x80\x9D, \xE2\x80\x9Carchive\xE2\x80\x9D, etc.).\n\n\
        Author\n\
        ------\n\n\
        This bundle is maintained by [Brad Choate][1]. Brad works at [Six Apart][2], the company that publishes [Movable Type][3]. This bundle is not officially supported by Six Apart, but you're welcome to [contact Brad][4] if you have questions or feedback regarding it.\n\n\
        [1]: http://bradchoate.com/\n\
        [2]: http://www.sixapart.com/\n\
        [3]: http://www.sixapart.com/movabletype/\n\
        [4]: mailto:brad@bradchoate.com?subject=Movable%20Type%20TextMate%20Bundle\n\n\
        EOF\n\
        html_footer"
      :input: none
C6BD2114-7620-4C35-A9B5-F44CA3291004: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Fuzzy Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :alt
        - :control
      :uuid: C6BD2114-7620-4C35-A9B5-F44CA3291004
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Similiar to entering query in the Qt Assistant's
        # "Look For:" field, then collecting topics for
        # each displayed method, and then displaying an
        # option to pick one of them using text box.
        
        ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/search.rb" fuzzy
      :input: selection
D2F3BE59-1349-4762-9B17-A6F79A7F81B9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Lookup Word / Selection on Google and Link
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: L
        modifiers: 
        - :control
        - :super
      :uuid: D2F3BE59-1349-4762-9B17-A6F79A7F81B9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -wKU\n\
        # an evolution of the code from skiadas.dcostanet.net/afterthought\n\
        # retrieves link from Google automatically and creates XHTML link\n\
        # improved call to progress bar, added ability to retrieve title\n\
        # of page and create title attribute in link using idea\n\
        # borrowed from iamrice.org.  Improved regex to handle title tags \n\
        # newlines, spaces and capitalization differences\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/progress.rb'\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'\n\
        require 'net/http' \n\
        require 'open-uri'\n\
        require 'erb'\n\n\
        def getLinkWithTitle(phrase)\n  TextMate.call_with_progress(:title => \"Contacting Google\", :message => \"Retrieving Link for \xE2\x80\x9C#{phrase}\xE2\x80\x9D\xE2\x80\xA6\") do\n    response = Net::HTTP.get_response(URI.parse(URI.escape(\"http://www.google.com/search?q=#{phrase}&btnI=I'm+Feeling+Lucky\")))\n    url = response.to_hash['location'].to_a.first\n    fp = open(url)\n    title = fp.read.match(/<title>([^<>]*)<\\/title>/i).to_a[1]\n    title = title.strip\n    return url, title, phrase\n  end\n\
        end\n\n\
        url, title, input = getLinkWithTitle(STDIN.read)\n\
        print ERB.new(ENV['TM_LINK_FORMAT']).result"
      :input: selection
964A0E53-3896-4EC6-AC15-038DC8FCEEE2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Load File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: 964A0E53-3896-4EC6-AC15-038DC8FCEEE2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        $LOAD_PATH << \"#{ENV['TM_BUNDLE_SUPPORT']}/lib\"\n\
        require \"terminal_mate\"\n\n\
        file_ext = ENV[\"TERMINAL_MATE_FILE_EXTENSION\"].to_s\n\
        tm_filepath = ENV[\"TM_FILEPATH\"]\n\
        if tm_filepath.nil?\n  tmpfile = `mktemp -t TerminalMate`.chomp # Couldn't get Tempfile to work\xE2\x80\xA6\n  tmpfile += file_ext\n  File.open(tmpfile, \"w\") do |f| f.write(STDIN.read) end\n  file = tmpfile\n  File.chmod(0755, file) if file_ext == \".sh\"\n\
        else\n  file = tm_filepath\n\
        end\n\
        TerminalMate::Client.new.send(\"load_file\", ENV[\"TM_SCOPE\"], ENV[\"TERMINAL_MATE_LOAD\"] % file)\n"
      :input: document
44AE6B57-2AD5-4D06-972B-EEFA6FC3F266: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Working Copy as HTML (BASE)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 44AE6B57-2AD5-4D06-972B-EEFA6FC3F266
      :disable_output_auto_indent: 
      :bundle_uuid: AEAF4DD4-74CD-11D9-BAD4-000A95A89C98
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Basic Subversion Diff"
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/svn_diff_html.rb"
        html_footer

      :input: none
9EA691A5-A166-4D8F-955F-270490F02827: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Log
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 9EA691A5-A166-4D8F-955F-270490F02827
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        cd "$TM_DIRECTORY" &&
        "$TM_CVS" log "$TM_FILENAME"
      :input: none
0E94ACC5-07FC-48BA-8FE0-9557224856F8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: PageMaker
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 0E94ACC5-07FC-48BA-8FE0-9557224856F8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t pm6 "$TM_FILEPATH"
      :input: none
516D608C-4BA6-4B1D-A46B-CC6C367E2A61: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: markup.underline.link
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Fix MoinMoin Link
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: L
        modifiers: 
        - :control
      :uuid: 516D608C-4BA6-4B1D-A46B-CC6C367E2A61
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's|_2f|/|g'
      :input: selection
97FDD49E-0E1B-4B68-9614-E57A5804C247: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt, source.qmake
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 97FDD49E-0E1B-4B68-9614-E57A5804C247
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_BUNDLE_SUPPORT}/bin/run_qt_project.rb\""
      :input: none
D9118E94-4E23-4B75-88D7-6BFEBAA70D1B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to RTF
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: D9118E94-4E23-4B75-88D7-6BFEBAA70D1B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # first figure out a name for the result
        NAME="${TM_FILENAME:-untitled}"
        BASENAME="${NAME%.*}"
        DST="/tmp/$BASENAME"
        
        MultiMarkdown.pl|SmartyPants.pl >"$DST.html"
        
        # textutil is included with Tiger
        require_cmd textutil
        textutil -convert rtf -extension rtf -font Times -fontsize 11 "$DST.html"
        
        open -a TextEdit.app "$DST.rtf"

      :input: selection
DCE997E1-D107-4873-A297-6CF808401DA3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Delegate
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DCE997E1-D107-4873-A297-6CF808401DA3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: f
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        if (oldtask[0] != "+") and (oldtask[0] != "^"):
        	sys.stdout.write("-> " + oldtask[3:])
        else:
            sys.stdout.write(oldtask)
      :input: selection
4F91DE78-EA89-48A0-98E4-7A1CB64C7D87: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Italic
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :super
      :uuid: 4F91DE78-EA89-48A0-98E4-7A1CB64C7D87
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: toggle_style.rb -style=emph
      :input: selection
C03C7374-C371-11D9-AAA6-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Commit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: C03C7374-C371-11D9-AAA6-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVK:=svk}" "If you have installed svk, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVK</tt> shell variable (e.g. in Preferences / Advanced)"
        
        CommitWindow="$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        export CommitWindow
        
        TM_SVK="${TM_SVK:=svk}"
        export TM_SVK
        
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/svk_commit.rb"

      :input: none
4BAAE940-7F72-4184-B165-F028FB6E99FF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Priority
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4BAAE940-7F72-4184-B165-F028FB6E99FF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: p
      :capture_pattern: 
      :command: |
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        sys.stdout.write("!  " + oldtask[3:])

      :input: selection
D39DC176-BC8D-11D9-8946-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: "AES Encrypt Document / Selection With Password\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
        - :super
      :uuid: D39DC176-BC8D-11D9-8946-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        get_pw () {
          res=$(CocoaDialog 2>/dev/null secure-inputbox --float --no-newline \
            --title 'Encrypt Text With AES 128' \
            --informative-text "$1" \
            --button1 "$2" --button2 Cancel)
          [[ ${res:0:1} == 1 ]] && echo -n "${res:2}"
        }
        
        pw1=$(get_pw 'What password should be used?'   Continue)
        [[ -z "$pw1" ]] && exit_discard
        pw2=$(get_pw 'Enter password again to verify.' Encrypt)
        
        if [[ "$pw1" == "$pw2" ]];
          then openssl enc -e -aes128 -base64 -pass "pass:$pw1"
          else exit_show_tool_tip 'Password mismatch! Please play again.'
        fi

      :input: selection
D26BEEE3-7439-4B7E-AD9D-9A144CDC5873: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Speak Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: D26BEEE3-7439-4B7E-AD9D-9A144CDC5873
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: say `echo "$TM_SELECTED_TEXT"` &
      :input: selection
D5D90653-B908-45AF-9BD1-D2ACAC494256: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Install and Edit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: D5D90653-B908-45AF-9BD1-D2ACAC494256
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.install_and_edit
      :input: document
BD115447-20FA-43E3-8694-E8B4280C296B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Replace Hex Colors
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BD115447-20FA-43E3-8694-E8B4280C296B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Replace Colors"
        echo '<p>WARNING: Changes you make here are instantly saved to disk. The only way to undo is if you keep the document open in textmate, undo and resave.</p>'
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/show_hex_colors_and_replace.rb"
        html_footer
        
      :input: selection
76FCF165-54CB-4213-BC55-BD60B9C6A3EC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.ruby, text.html source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax (ERB)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: 76FCF165-54CB-4213-BC55-BD60B9C6A3EC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + '/lib/textmate'
        puts "using ruby-" + RUBY_VERSION.to_s + ' / erb'
        result = `"${TM_ERB:=erb}" -T - -x | "${TM_RUBY:=ruby}" -c 2>&1`
        puts result
        TextMate.go_to :line => $1 if result =~ /-:(\d+):/
      :input: document
6519CB08-8326-4B77-A251-54722FFBFC1F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby string.quoted.double, source.ruby string.quoted.single, source.ruby string
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle Quote Style
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "\""
        modifiers: 
        - :control
      :uuid: 6519CB08-8326-4B77-A251-54722FFBFC1F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        class String
          def escape(char)
            gsub(/\\.|#{Regexp.quote(char)}/) { |match| match == char ? "\\#{char}" : match }
          end
        
          def unescape(char)
            gsub(/\\./) { |match| match == "\\#{char}" ? char : match }
          end
        end
        
        print case str = STDIN.read
          # Handle standard quotes
          when /\A"(.*)"\z/m; "%{" + $1.unescape('"').escape("}") + "}"
          when /\A%Q?\{(.*)\}\z/m; "'" + $1.unescape("}").escape("'") + "'"
          when /\A'(.*)'\z/m; "%q{" + $1.unescape("'").escape("}") + "}"
          when /\A%q\{(.*)\}\z/m; '"' + $1.unescape("}").escape('"') + '"'
        
          # Handle the more esoteric quote styles
          when /\A%Q?\[(.*)(\])\z/m, /\A%Q?\((.*)(\))\z/m, /\A%Q?<(.*)(>)\z/m; "'" + $1.unescape($2).escape("'") + "'"
          when /\A%Q?(.)(.*)\1\z/m; "'" + $2.unescape($1).escape("'") + "'"
          when /\A%q\[(.*)(\])\z/m, /\A%q\((.*)(\))\z/m, /\A%q<(.*)(>)\z/m; '"' + $1.unescape($2).escape('"') + '"'
          when /\A%q(.)(.*)\1\z/m; '"' + $2.unescape($1).escape('"') + '"'
        
          # Handle shell escapes
          when /\A`(.*)`\z/m; "%x{" + $1.unescape("`").escape("}") + "}"
          when /\A%x\{(.*)\}\z/m; "`" + $1.unescape("}").escape("`") + "`"
        
          # Default case
          else str
        end

      :input: selection
CBFEB6F9-D38C-4726-BD16-325E3FCC0C6B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scheme
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: CBFEB6F9-D38C-4726-BD16-325E3FCC0C6B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Run the current document in our Scheme interpreter.
        #
        # The interpreter you use should be set in the environment
        # variable TM_SCHEME_INTERPRETER.
        #
        
        # Save file, use tmp-file if there's no filepath.
        [[ -z "$TM_FILEPATH" ]] && TM_TMPFILE=$(mktemp -t pythonmate)
        : "${TM_FILEPATH:=$TM_TMPFILE}"; cat >"$TM_FILEPATH"
        
        # set up variables
        INTERPRET=${TM_SCHEME_INTERPRETER:=csi}
        CMD=$(basename "$INTERPRET")
        SHOWOUTPUT="$TM_BUNDLE_SUPPORT/showoutput.rb"
        TM_ERRORTEMP=$(mktemp -t scheme)
        
        # Run depending on the system are we on?
        if [ $CMD == "mzscheme" ] ; then
        	"$INTERPRET" -M errortrace -r "$TM_FILEPATH" 2>"$TM_ERRORTEMP" | "$SHOWOUTPUT" "$INTERPRET" "$TM_ERRORTEMP"
        elif [ $CMD == "csi" ] ; then
        	"$INTERPRET" -s "$TM_FILEPATH" 2>"$TM_ERRORTEMP" | "$SHOWOUTPUT" "$INTERPRET" "$TM_ERRORTEMP"
        elif [ $CMD = "guile" ] ; then
          "$INTERPRET" -s "$TM_FILEPATH" 2>"$TM_ERRORTEMP" | "$SHOWOUTPUT" "$INTERPRET" "$TM_ERRORTEMP"
        fi
        
        # Delete tempfiles
        rm -f "$TM_TMPFILE"
        rm -f "$TM_ERRORTEMP"
      :input: document
7E096535-0E9E-4866-956A-CCE8694F85A8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build Ocamldoc
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: d
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 7E096535-0E9E-4866-956A-CCE8694F85A8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        ocamldoc -html -d /tmp "$TM_FILENAME"
        open /tmp/index.html
      :input: none
CDD74FE0-32E1-4604-BFC9-96173A557550: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Database Browser
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: CDD74FE0-32E1-4604-BFC9-96173A557550
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: db_browser.rb
      :input: none
276FCB93-FB0E-49A9-A5E8-3714D4A0D0C6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 276FCB93-FB0E-49A9-A5E8-3714D4A0D0C6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Slightly modified version of the command for the JavaScript bundle by Thomas Aylott(?)
        
        # index created using: curl -s 'http://devguru.com/technologies/javascript/index.asp'|grep -o '<a href="[0-9]*.asp">[a-z][a-zA-Z]*</a>'|perl -pe 's/<a href="([^"]*)">([^<]*)<\/a>/$2\t$1/'|sort|uniq|gzip >data/dev_guru_index.gz
        
        # First try GM docs
        
        ref=$(ruby -e '
        	GM_ENTRIES = %w{GM_addStyle GM_getValue GM_setValue GM_log GM_openInTab GM_registerMenuCommand GM_xmlhttpRequest unsafeWindow}
        	look_up = ENV["TM_SELECTED_TEXT"] || ENV["TM_CURRENT_WORD"]
        	puts look_up if GM_ENTRIES.include?(look_up)
        ')
        
        [[ -n "$ref" ]] && exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://wiki.greasespot.net/$ref'>"
        
        # Then try JS docs
        
        ref=$(zgrep -w "^${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}" "$TM_BUNDLE_SUPPORT/data/dev_guru_index.gz"|cut -f2)
        
        [[ -n "$ref" ]] && exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://devguru.com/technologies/javascript/$ref'>"
        
        echo "No documentation found for \"${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\"."
      :input: selection
E802FA1A-1E2E-4F8A-957F-C1533CE57400: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.bracketed.objc
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Delete Outer Method Call
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          fw==

        modifiers: 
        - :control
        - :super
      :uuid: E802FA1A-1E2E-4F8A-957F-C1533CE57400
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        print STDIN.read.sub(/\A\[(.*\])[^\]]*\]\z/, '\\1')

      :input: selection
E6FB4209-818E-40F5-9AFF-96E204F52A11: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css -meta.property-list
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: CodeCompletion CSS
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: E6FB4209-818E-40F5-9AFF-96E204F52A11
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        preference = 'Completions'
        choices = []
        
        parsed_choices = TextmateCompletionsParser.new(nil, :scope => :css).to_ary
        choices += parsed_choices if parsed_choices
        
        choices += ['--']
        
        plist_choices = TextmateCompletionsPlist.new( "#{ENV['TM_BUNDLE_PATH']}/Preferences/#{preference}.tmPreferences" ).to_ary
        choices += plist_choices if plist_choices
        
        print TextmateCodeCompletion.new(choices,STDIN.read, :scope => :css).to_snippet

      :input: selection
8C299FDF-E050-4AFE-A306-491DC4C4A11A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Resolved
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 8C299FDF-E050-4AFE-A306-491DC4C4A11A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "$TM_SVN" resolved "$TM_FILEPATH"
        
        # force TM to refresh the project to get rid of the conflict files..
        rescan_project

      :input: none
B0F37DAC-6E52-11D9-AA12-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Decrease Quote Level for Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "'"
        modifiers: 
        - :alt
        - :super
      :uuid: B0F37DAC-6E52-11D9-AA12-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/^> (.*)/$1/'
      :input: selection
C744043F-79AE-47D7-9E7A-F476F44437AC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: AppleScript Language Guide
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: C744043F-79AE-47D7-9E7A-F476F44437AC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/bin/bash
        
        # If there is a local copy of the Applescript
        # documentation, open it.  Otherwise, use the
        # online copy.
        
        if [ -d "/Developer/ADC Reference Library/documentation/AppleScript/Conceptual/AppleScriptLangGuide/" ]; then
        	open "file:///Developer/ADC%20Reference%20Library/documentation/AppleScript/Conceptual/AppleScriptLangGuide/index.html"
        else
        	open "http://developer.apple.com/documentation/AppleScript/Conceptual/AppleScriptLangGuide/"
        fi

      :input: none
3EA8AD43-5ED3-4FB3-9296-D37A409AABF8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Done
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 3EA8AD43-5ED3-4FB3-9296-D37A409AABF8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: d
      :capture_pattern: 
      :command: |
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        sys.stdout.write("+  " + oldtask[3:])

      :input: selection
71838529-2441-4B3C-B9BD-B0CD115DD06C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.prototype
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Basic Prototype Javascript Test
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 71838529-2441-4B3C-B9BD-B0CD115DD06C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        js = STDIN.read
        puts <<-HTML
        <!-- howdy -->
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
            "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        
        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Basic Javascript Test</title>
          <script src="file://#{ENV['TM_SUPPORT_PATH']}/script/prototype.js" type="text/javascript"></script>
        </head>
        <body>
        <script type="text/javascript" charset="utf-8">
        try{
        //YOUR STUFF//
        //YOUR STUFF//
        //YOUR STUFF//
        
        #{js}
        
        //YOUR STUFF//
        //YOUR STUFF//
        //YOUR STUFF//
        }catch(e){ document.write(e); throw(e) };
        </script>
        </body>
        </html>
        HTML

      :input: selection
0674F266-C30F-4089-95A4-DDB68E89439E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle Logs in Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0674F266-C30F-4089-95A4-DDB68E89439E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.toggle_log_comments
      :input: selection
BF7C70D8-A0D9-44A3-9CB4-8D99372E68B6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Project Statistics
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: BF7C70D8-A0D9-44A3-9CB4-8D99372E68B6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $:<< ENV['TM_BUNDLE_SUPPORT'] << ENV['TM_SUPPORT_PATH']
        require "lib/GTD.rb"
        require "lib/ui"
        include GTD
        GTD.process_directory
        projects = GTD.projects.find_all{|proj| !proj.completed?}
        pr = Printer.new
        b = <<HTML
        <html>
          <head>
            <link rel="stylesheet" href="tm-file://#{ENV['TM_SUPPORT_PATH']}/css/default.css" type="text/css" media="screen" title="no title" charset="utf-8" />
          </head>
          <body>
        HTML
        e = <<HTML
          </body>
        </html>
        HTML
        pr.raw b
        pr.table do
          pr.title "List of all incomplete Projects"
          pr.headers([ "Project", "Items", "Next Action"])
          projects.each do |project|
            pr.row([project.link,
                    project.flatten.reject{|i| i.completed? }.length-1,
                    project.next_action.link])
          end
        end
        pr.raw e
        puts pr.to_html
      :input: none
2E994C2A-2589-4198-8627-F0B82A8B594E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.slate
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Script
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 2E994C2A-2589-4198-8627-F0B82A8B594E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cd $TM_DIRECTORY ; $TM_FILEPATH
      :input: selection
22FC4CAB-4664-4CFC-BC8E-C2294616E464: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Newest (HEAD)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 22FC4CAB-4664-4CFC-BC8E-C2294616E464
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'cvs_diff'
        
        CVS::diff_active_file(:head, "Diff With Newest")
        END

      :input: none
E70BB4A8-2654-4ED3-A187-9BFD024870E7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex  meta.data.environment.tabular.latex
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Add Column
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gw==

        modifiers: 
        - :alt
        - :control
      :uuid: E70BB4A8-2654-4ED3-A187-9BFD024870E7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require 'pp'
        require ENV["TM_SUPPORT_PATH"] + "/lib/escape.rb"
        data=STDIN.readlines
        l,c = ENV['TM_LINE_NUMBER'].to_i-ENV['TM_INPUT_START_LINE'].to_i, ENV['TM_LINE_INDEX'].to_i
        # pp [l,c]
        col_no = data[l].slice(/^.{#{c}}/).scan("&").length
        if col_no == 0 then
          data.each do |line|
            if line =~ /&/ then
              print " & " + line
            else
              print line
            end
          end
        else
          data.each do |line|
            if line =~ /^(?:[^&]*&){#{col_no}}/ then
              print $& + " &" + $'
            else
              print line
            end
          end
        end
      :input: selection
44B4C1CE-DD85-485A-B860-E4DFCDD0A4FE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Rot 13 Line / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 44B4C1CE-DD85-485A-B860-E4DFCDD0A4FE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: tr 'A-Za-z' 'N-ZA-Mn-za-m'
      :input: selection
F0FC25A6-CC65-404E-AC7E-098ABC3682A2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Save
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: F0FC25A6-CC65-404E-AC7E-098ABC3682A2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd moinedit
        moinedit -s
      :input: document
60853977-B0D2-4776-A3D9-4B6C09E18596: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Post to Blog
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: 60853977-B0D2-4776-A3D9-4B6C09E18596
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging.rb"
        Blogging.new.post_or_update
      :input: document
9453F0B3-B946-445F-BDB0-B01DE70732FC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.ruby, source.ruby.rails.embedded.html, meta.rails.helper, meta.rails.functional_test, source.js, source.css
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Controller
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: 9453F0B3-B946-445F-BDB0-B01DE70732FC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" controller
      :input: none
AAAD64D1-8C69-4645-853E-B6DD3D04AC67: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt, source.qmake
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: AAAD64D1-8C69-4645-853E-B6DD3D04AC67
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_BUNDLE_SUPPORT}/bin/build_qt_project.rb\""
      :input: none
41D61EE6-B8A9-4C21-9ECE-E336588423DB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Yahoo News Search
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Y
        modifiers: 
        - :control
      :uuid: 41D61EE6-B8A9-4C21-9ECE-E336588423DB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = ENV['DIALOG']
        require SUPPORT + '/lib/escape'
        require SUPPORT + '/lib/osx/plist'
        require SUPPORT + '/lib/exit_codes'
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/yahoo"
        require 'erb'
        
        input = STDIN.read
        query = e_url(input)
        yahoo = NewsSearch.new('TM_YAHOO', query, 'all', 10, 1, nil, 1)
        ysuggest = []
            yahoo.parse_results.each {|result| 
                ysuggest << { 
                  'title' => result['Title'].gsub('"','&raquo;'),
                  'url' => result['Url']}
            }
            plist = { 'menuItems' => ysuggest }.to_plist
        
            res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
            TextMate.exit_show_tool_tip "No matches found" unless res.has_key? 'selectedMenuItem'
            url = res['selectedMenuItem']['url']
            title = res['selectedMenuItem']['title']
        
            print ERB.new(ENV['TM_LINK_FORMAT']).result
      :input: selection
6374BC72-221E-4517-95DA-5D63B50E77BC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.sql
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Configure
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 6374BC72-221E-4517-95DA-5D63B50E77BC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: configure.sh
      :input: none
94D8B40B-9F49-4B6D-90B5-DBFF5FB36590: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Post-doc
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 94D8B40B-9F49-4B6D-90B5-DBFF5FB36590
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: doc
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        
        next_line = STDIN.read.to_a[ENV['TM_LINE_NUMBER'].to_i..-1].join("\n").strip[/.+$/]
        
        puts '/**'
        
        @tags = []
        type = ''
        author = true
        
        def tag(tag, default, trailing = nil)
          @tags << {:tag => tag, :default => default, :trailing => trailing}
        end
        
        case next_line
        when /(class|interface)/
          type = $&
          tag 'package', 'default'
        when /function\s*\w+\((.*)\)/
          type = 'function'
          $1.split(/,/).each do |arg|
            tag 'param', 'string', '\\$' + arg[/[A-z0-9]+/].strip
          end
          tag 'return', 'void'
        when /const|define/
          type = 'constant'
          author = false
        when /var|p(ublic|rivate|rotected)\s*\$/
          type = 'variable'
          tag 'var', 'string'
          author = false
        end
        
        puts " * ${1:undocumented #{type}}"
        puts ' *' if @tags.size > 0 or author
        
        placeholder = 1
        @tags.each do |tag|
          placeholder += 1
          if tag[:trailing]
            puts " * @#{tag[:tag]} ${#{placeholder}:#{tag[:default]}} #{tag[:trailing] } \$#{placeholder += 1}"
          else
            puts " * @#{tag[:tag]} ${#{placeholder}:#{tag[:default]}}"
          end
        end
        
        puts ' * @author ${PHPDOC_AUTHOR:`niutil -readprop / "/users/$USER" realname`}$' + (placeholder + 1).to_s if author
        puts ' */$0'
      :input: document
BC36A3C7-F9B2-47D4-83FB-2BEB93F14889: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Master File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: l
        modifiers: 
        - :control
        - :super
      :uuid: BC36A3C7-F9B2-47D4-83FB-2BEB93F14889
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        ${TM_RUBY:-ruby} <<"RUBY"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape.rb"
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/options"
        
        master = LaTeX.master(ENV['TM_LATEX_MASTER'] || ENV['TM_FILEPATH'])
        
        if master
          `open -a TextMate #{e_sh master}`
        else
          echo 'No master file was defined.'
        end
        RUBY

      :input: selection
E0105691-3033-43C1-A4A2-4C2785446748: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Build With MTASC
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: E0105691-3033-43C1-A4A2-4C2785446748
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ruby "$TM_BUNDLE_SUPPORT/Tools/build_with_mtasc.rb"
      :input: none
A06706CA-0E97-449E-8B45-142594657325: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: A06706CA-0E97-449E-8B45-142594657325
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd moinedit
        moinedit -p
      :input: document
50D814AE-D850-4C97-AF3E-1FDE4366C6A3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.haskell
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Lookup on Hoogle
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 50D814AE-D850-4C97-AF3E-1FDE4366C6A3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        echo "TODO!"
      :input: selection
43F50126-B6DE-4B92-84DC-8600C0772CDB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document to HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 43F50126-B6DE-4B92-84DC-8600C0772CDB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2HTML:=rst2html.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2HTML</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        # Send the current file through rst2html.py
        $TRST "$TM_FILEPATH"
      :input: document
C17472A0-C36B-11D9-954B-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Status
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: C17472A0-C36B-11D9-954B-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export WorkPath="$TM_DIRECTORY"
        
        # show it..
        "${TM_SVK:=svk}" status "$WorkPath" 2>&1| "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/format_status.rb"

      :input: none
22F431D0-0CB5-4CAB-951F-8C0E7396891F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt, source.qmake
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build & Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 22F431D0-0CB5-4CAB-951F-8C0E7396891F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/sh
        "${TM_BUNDLE_SUPPORT}/bin/build_qt_project.rb" && "${TM_BUNDLE_SUPPORT}/bin/run_qt_project.rb"
      :input: none
8E083C6C-9C1A-4AD9-AA39-3BCABF925B73: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8E083C6C-9C1A-4AD9-AA39-3BCABF925B73
      :disable_output_auto_indent: 
      :bundle_uuid: 30FA6EB3-2180-46F8-B2DD-EDA6B443CBB6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "GTDalt Help" "Getting Things Done (alternative)"
        Markdown.pl "$TM_BUNDLE_SUPPORT/README.txt"
        html_footer
      :input: none
EE6760B3-1869-44F9-A050-CB407CCDB94B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.remind
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Upcoming Events
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: EE6760B3-1869-44F9-A050-CB407CCDB94B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # show current reminders in a tooltip
        require_cmd rem
        
        rem ${REMIND_FLAGS:--mb1} -g

      :input: none
C8F5F526-4ED5-4E75-A0D1-D9B5143B20EE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: incoming
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: C8F5F526-4ED5-4E75-A0D1-D9B5143B20EE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_DIRECTORY"
        fi
              
        : ${TM_RUBY:=ruby}
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log.rb"
        HG_STYLE="${TM_BUNDLE_SUPPORT}/map-incoming.changelog"
        
        
        "$TM_HG" incoming -v --style "$HG_STYLE" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG" "--in"

      :input: none
D696FA2C-785A-4B73-A2F6-F750904DD7C2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml, text.html.ruby
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Quick Migration
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: D696FA2C-785A-4B73-A2F6-F750904DD7C2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/generate_quick_migration.rb"
      :input: none
B078346F-61D8-4E75-9427-80720FBC67F7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.ruby, source.ruby.rails.embedded.html, meta.rails.controller, meta.rails.helper
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Javascript
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: B078346F-61D8-4E75-9427-80720FBC67F7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" javascript
      :input: none
E11461A2-B186-4278-9CB9-95AAC8D9D7C0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove AutoUpdater
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: E11461A2-B186-4278-9CB9-95AAC8D9D7C0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        JOB=com.macromates.textmate.bundleupdate
        TASK=~/Library/LaunchAgents/$JOB.plist
        
        if [[ -f "$TASK" ]]; then
          launchctl stop "$JOB"
          launchctl unload "$TASK"
          rm "$TASK"
          echo "Auto updater uninstalled."
        else
          echo "Nothing to uninstall."
        fi
      :input: none
A42DC78E-6588-476F-8A00-40B8CCC6D2E0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Word / Selection as Link
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: L
        modifiers: 
        - :control
      :uuid: A42DC78E-6588-476F-8A00-40B8CCC6D2E0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        require 'erb'
        require 'open-uri'
        require 'net/http' 
        
        def entity_escape(text)
          text.gsub(/&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;')
        end
        
        def make_link(text)
          case text
          when %r{\A(mailto:)?(.*?@.*\..*)\z}:
            "mailto:#{$2.gsub(/./) {sprintf("&#x%02X;", $&.unpack("U")[0])}}"
          when %r{http://www.(amazon.(?:com|co.uk|co.jp|ca|fr|de))/.+?/([A-Z0-9]{10})/[-a-zA-Z0-9_./%?=&]+}:
            "http://#{$1}/dp/#{$2}"
          when %r{\A[a-zA-Z][a-zA-Z0-9.+-]*://.*\z}:
            entity_escape(text)
          when %r{\A(www\..*|.*\.(com|uk|net|org|info))\z}:
            "http://#{entity_escape text}"
          when %r{\A.*\.(com|uk|net|org|info)\z}:
            "http://#{entity_escape text}"
          when %r{\A\S+\z}:
            entity_escape(text)
          else
            "http://some-site.com/"
          end
        end
        
        url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
        
        if url =~ /^http:\/\// and url != 'http://some-site.com/'
          eval 'title = fp.read.match(/<title>([^<>]*)<\/title>/i).to_a[1].strip rescue nil' if fp = open(url) rescue nil
        end
        
        input = STDIN.read
        print ERB.new(ENV['TM_LINK_FORMAT']).result

      :input: selection
70E9A4C5-9F6F-4139-BE41-3685017D6169: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Numbered List
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 70E9A4C5-9F6F-4139-BE41-3685017D6169
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: +
      :capture_pattern: 
      :command: |-
        if test -z "$TM_SELECTED_TEXT"; then
        	echo
        	echo "+ Item 1"
        	echo "+ Item 2"
        	echo "+"
        else
        	echo "$TM_SELECTED_TEXT" | sed 's/^/+ /'
        fi
      :input: selection
9AFDEB2C-D9F0-423E-8211-EBB089F51F0C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Help: Persistent Includes"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 9AFDEB2C-D9F0-423E-8211-EBB089F51F0C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "About Persistent Includes" "HTML"
        Markdown.pl <<'EOF'|SmartyPants.pl
        The "Add Persistent Include" command allows you to embed an external file inside your HTML document. This inclusion is handled by TextMate itself. Once you've added the include statement, use the "Update Document" command to refresh any included files.
        
        Including Files
        ---------------
        
        An inclusion is done using a special HTML comment:
        
            <!-- #tminclude "footer.html" -->
            <!-- end tminclude -->
        
        Once you've updated the document, the contents are pulled inside the inclusion markup:
        
            <!-- #tminclude "footer.html" -->
            <div class="footer">Copyright (c) 2006, WebDesignCorp.</div>
            <!-- end tminclude -->
        
        Note: Included documents are also processed for additional inclusions and placeholders.
        
        Include Parameters
        ------------------
        
        You can optionally specify parameters for the included file. Parameters are provided following the filename.
        
            <!-- #tminclude "header.html" #title#="Home Page" -->
            <!-- end tminclude -->
        
        With a header.html file that looks like this:
        
        	<h1 class="header">#title#</h1>
        
        Producing:
        
            <!-- #tminclude "header.html" #title#="Home Page" -->
        	<h1 class="header">Home Page</h1>
            <!-- end tminclude -->
        
        Placeholders
        ------------
        
        The update command also processes document "placeholders". Placeholders are written in this format:
        
        	#variable#
        
        The following placeholders are available:
        
        <table class="pro_table" border="0" width="100%" cellpadding="5" cellspacing="0">
        <tr><th>Placeholder</th><th>Example Result</th></tr>
        <tr><td><tt>#abbrevdate#    </tt></td><td>Abbreviated date: Sun, Aug 15, 2006</td></tr>
        <tr><td><tt>#basename#      </tt></td><td>Filename without extension.</td></tr>
        <tr><td><tt>#compdate#      </tt></td><td>Compact date: 15-Aug-06</td></tr>
        <tr><td><tt>#creationdate#  </tt></td><td>Creation date: 15-Aug-06</td></tr>
        <tr><td><tt>#creationtime#  </tt></td><td>Creation time:  1:20 PM</td></tr>
        <tr><td><tt>#docsize#       </tt></td><td>Resulting document length in bytes</td></tr>
        <tr><td><tt>#dont_update#   </tt></td><td>Special: presence will prevent document updating</td></tr>
        <tr><td><tt>#filename#      </tt></td><td>Document filename</td></tr>
        <tr><td><tt>#file_extension#</tt></td><td>Document file extension</td></tr>
        <tr><td><tt>#generator#     </tt></td><td>TextMate</td></tr>
        <tr><td><tt>#gmtime#        </tt></td><td>GMT time</td></tr>
        <tr><td><tt>#localpath#     </tt></td><td>Full path to current file</td></tr>
        <tr><td><tt>#localtime#     </tt></td><td>Local computer time</td></tr>
        <tr><td><tt>#longdate#      </tt></td><td>Long Date: Tuesday, August 15, 2006</td></tr>
        <tr><td><tt>#modifieddate#  </tt></td><td>Modified date: 15-Aug-06</td></tr>
        <tr><td><tt>#modifiedtime#  </tt></td><td>Modified time:  1:20 PM</td></tr>
        <tr><td><tt>#monthdaynum#   </tt></td><td>Day of Month: 15</td></tr>
        <tr><td><tt>#monthnum#      </tt></td><td>Month Number: 08</td></tr>
        <tr><td><tt>#shortdate#     </tt></td><td>Short Date: 08/15/06</td></tr>
        <tr><td><tt>#shortusername# </tt></td><td>Login name of current user</td></tr>
        <tr><td><tt>#username#      </tt></td><td>Name of current user</td></tr>
        <tr><td><tt>#yearnum#       </tt></td><td>Current Year: 2006</td></tr>
        </table>
        
        In addition to these, all of the TextMate environment variables (those starting with a "TM_" prefix) are available as placeholders. For example:
        
            #organization_name#
        
        Will populate using the `TM_ORGANIZATION_NAME` environment variable.
        
        Formatting Time
        ---------------
        
        The date-based placeholders may also specify a format that can be used to customize the date output. For example:
        
            #gmtime %b %e, %Y# (Aug 15, 2006)
        
        Placeholder Example
        -------------------
        
        If you want to make that footer.html include more useful, you can use placeholders. For example:
        
            <div class="footer">Copyright (c) #yearnum#, #oragnization_name#.</div>
        
        This would then produce the following, when included and processed:
        
            <!-- #tminclude "footer.html" -->
            <div class="footer">Copyright (c) 2006, WebDesignCorp.</div>
            <!-- end tminclude -->
        
        Scripted Includes
        -----------------
        
        It is also possible to produce included content using scripts. If the included file is a script, it is run and the output is placed inside the include block.
        
        	<!-- #tminclude "scripts/header.pl" #class#="huge" -->
        	<!-- end tminclude -->
        
        .pl (Perl), .py (Python) and .rb (Ruby) scripts are currently recognized. For the above example, the "header.pl" script is run with the following parameters:
        
        	header.pl (source_filename) class huge
        
        The Perl script in this case can process the parameters like this.
        
        	#!/usr/bin/perl
        	my ($filename, %args) = @ARGV;
        	print "<h1 class='$args{class}'>Header for $filename</h1>"
        
        That would end up producing this:
        
        	<!-- #tminclude "scripts/header.pl" #class#="huge" -->
        	<h1 class='huge'>Header for /path/to/example.html</h1>
        	<!-- end tminclude -->
        
        EOF
        html_footer
      :input: none
AFAA4B88-20AB-44B3-8BF3-4D3E66FEB3A0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Sgml
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: AFAA4B88-20AB-44B3-8BF3-4D3E66FEB3A0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t sgml "$TM_FILEPATH"
      :input: none
FF0E22D6-7D78-11D9-B4DE-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c, source.objc, source.c++, source.objc++
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Quick Open
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: FF0E22D6-7D78-11D9-B4DE-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -wKU\n\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/textmate.rb'\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'\n\n\
        USR_HEAD  = Regexp.escape \"#include \\\"...\\\" search starts here:\\n\"\n\
        SYS_HEAD  = Regexp.escape \"#include <...> search starts here:\\n\"\n\
        FOOTER    = Regexp.escape 'End of search list.'\n\n\
        COMPILER  = {\n  'source.c'      => 'gcc 2>&1 >/dev/null -E -v -x c /dev/null',\n  'source.c++'    => 'g++ 2>&1 >/dev/null -E -v -x c++ /dev/null',\n  'source.objc'   => 'gcc 2>&1 >/dev/null -E -v -x objective-c /dev/null',\n  'source.objc++' => 'g++ 2>&1 >/dev/null -E -v -x objective-c++ /dev/null',\n\
        }\n\n\
        def compiler_search_path(domain = :system)\n  scope        = 'source.c'\n  scope        = $& if ENV['TM_SCOPE'] =~ /source.(obj)?c(\\+\\+)?/\n\n  res = IO.popen(COMPILER[scope]) { |io| io.read }\n  if res =~ /#{USR_HEAD}(.*)#{SYS_HEAD}(.*)#{FOOTER}/m\n    case domain\n      when :system  then $2\n      when :user    then $1 + \" .\\n\"\n      when :all     then $1 + \" .\\n\" + $2\n    end.scan(/ (.*)/).flatten\n  else\n    abort \"Failed to parse compiler output.\\nCommand: \" + COMPILER[scope]\n  end\n\
        end\n\n\
        def user_search_path(domain = :system)\n  usr = ENV['TM_USR_HEADER_PATH'].to_s\n  sys = ENV['TM_SYS_HEADER_PATH'].to_s\n\n  res = case domain\n    when :system  then sys\n    when :user    then usr\n    when :all     then \"#{usr}:#{sys}\"\n  end.split(':')\n  res.delete('')\n\n  res.empty? ? nil : res\n\
        end\n\n\
        def header\n  if ENV.has_key? 'TM_SELECTED_TEXT'\n    [:all, ENV['TM_SELECTED_TEXT']]\n  elsif ENV['TM_CURRENT_LINE'] =~ /#\\s*(?:include|import)\\s*([<\"])(.*?)[\">]/;\n    [$1 == '<' ? :system : :user, $2]\n  else\n    header = TextMate::UI.request_string :title => \"Quick Open\", :prompt => \"Which header file do you wish to open?\"\n    [:all, header]\n  end\n\
        end\n\n\
        def find_in_dirs(file, dirs)\n  framework = file.sub(/(.*)\\/(.*\\.h)/, '\\1.framework/Headers/\\2')\n  base = ENV['TM_DIRECTORY'] || Dir.getwd\n  dirs.each do |dir|\n    dir = \"#{base}/#{dir}\" unless dir[0..0] == \"/\"\n    return \"#{dir}/#{file}\"       if File.exists? \"#{dir}/#{file}\"\n    return \"#{dir}/#{framework}\"  if File.exists? \"#{dir}/#{framework}\"\n  end\n  nil\n\
        end\n\n\
        def find_recursively(header)\n  hdr_match = /\\b#{Regexp.escape(header.sub(/(\\.h)?$/, '.h'))}$/i\n  matches   = Dir[\"/System/Library/Frameworks/*.framework/{Frameworks/*.framework/,}Headers/*.h\"].find_all { |e| e =~ hdr_match }\n\n  if matches.size > 1\n    menu = matches.map do |e|\n      header_name = $& if e =~ /[^\\/]+$/\n      framework_suffix = e.scan(/\\/([^\\/]+?).framework/).flatten.join(' \xE2\x86\x92 ')\n      { 'path' => e, 'title' => \"#{header_name} \xE2\x80\x94 #{framework_suffix}\" }\n    end\n    if res = TextMate::UI.menu(menu)\n      res['path']\n    else\n      nil\n    end\n  else\n    matches.first\n  end\n\
        end\n\n\
        domain, file = header()\n\
        abort if file.nil?\n\n\
        dirs = user_search_path(domain) || compiler_search_path(domain)\n\
        if path = find_in_dirs(file, dirs)\n  TextMate.go_to :file => path\n\
        elsif domain == :all && path = find_recursively(file)\n  TextMate.go_to :file => path\n\
        else\n  abort \"Unable to find \xE2\x80\x98#{file}\xE2\x80\x99\\nLocations searched:\\n\" + dirs.map { |dir| \"   #{dir}\" }.join(\"\\n\")\n\
        end\n"
      :input: none
02131A74-BB30-4A92-B8D0-BDD96FF9CD88: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Call to Super
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 02131A74-BB30-4A92-B8D0-BDD96FF9CD88
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: super
      :capture_pattern: 
      :command: |-
        # Inserts a call to the same metod of superclass.
        # Since figuring a superclass is a bit tricky, it 
        # only works when class declaration exists in the 
        # same file, and prior to the current line. If 
        # it's unable to find superclass, QWidget is used.
        
        ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/insert_super.rb"
      :input: document
EB4A8FA5-DFBD-43E9-B091-B1825E49DF33: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.smarty
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help (Installation Notes)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: EB4A8FA5-DFBD-43E9-B091-B1825E49DF33
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "# this is rather lazy, but let\xE2\x80\x99s just direct to Mike Zornek excellent blog entry about how to make this bundle work\n\n\
        cat <<\"HTML\"\n\
        <html>\n\
        \t<head>\n\
        \t\t<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n\
        \t\t<title>Smarty Install Instructions</title>\n\
        \t\t<meta http-equiv='Refresh' content='5;URL=http://clickablebliss.com/blog/2006/01/04/teach_textmate_about_smarty/'>\n\
        \t</head>\n\
        \t\n\
        \t<body>\n\
        \t\t<h1>Smarty Install Instructions</h1>\n\
        \t\t<p>For install instructions please see <a href=\"http://clickablebliss.com/blog/2006/01/04/teach_textmate_about_smarty/\">Mike Zornek excellent blog entry about the procedure</a>. You will be taken there in 5 seconds.</p>\n\
        \t</body>\n\
        </html>\n\
        HTML\n"
      :input: none
BBD358C1-4FB6-11DB-ADD3-00112474B8F0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.nemerle
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Compile Macro
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: BBD358C1-4FB6-11DB-ADD3-00112474B8F0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Compile Macro" "Nemerle"
        require_cmd ncc
        
        ncc -r:Nemerle.Compiler -t:library "$TM_FILEPATH" -o "$TM_FILEPATH".dll
      :input: document
EE5F1FB2-6C02-11D9-92BA-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Line / Selection as Ruby
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
      :uuid: EE5F1FB2-6C02-11D9-92BA-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # be smart, dont print something if we already have..
        $write_count = 0
        def STDOUT.write(what)
           $write_count += 1
           super(what)
        end
        
        # execure the code
        begin
          # insert a space if input was a selection, if it was a line insert \n
          print(ENV['TM_SELECTED_TEXT'] ? " " : "\n")
          r = eval(STDIN.read)
        rescue Object
          r = $!.class.to_s
        end
        
        # try to_s, if it doesnt work use inspect
        # Array and Hash are shown via inspect because they look better with formating
        # do this just if the script did not print anything itself
        if $write_count == 1
          print( (r.class != Hash and r.class != Array and not r.nil? and r.respond_to? :to_s) ? r.to_s : r.inspect )
          print( "\n" ) unless ENV.has_key?('TM_SELECTED_TEXT')
        end

      :input: selection
AA202E76-8A0A-11D9-B85D-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Statistics for Document / Selection (Word Count)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: N
        modifiers: 
        - :control
      :uuid: AA202E76-8A0A-11D9-B85D-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        wc -lwc|tr \  \\n|grep '..*'|rev|perl -pe 's/\d{3}(?=.)/$&,/g'|rev|{
          for unit in lines words bytes; do
            read cnt
            printf "%11.11s %s\n" $cnt $unit
          done
        }

      :input: selection
65E2109C-4309-4079-BD25-17D8B31F03CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex, meta.citation.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Citation Based on Current Word / Selection\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 65E2109C-4309-4079-BD25-17D8B31F03CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/LaTeXUtils.rb"
        phrase = STDIN.read.chomp
        include LaTeX
        begin
        	items = LaTeX.get_citations.map{|i| i.citekey + "   % "+i.description}
          items = items.grep(/#{phrase}/) if phrase != ""
          TextMate.exit_discard if items.empty?
          if items.length > 1
          	choice = TextMate::UI.menu(items)
          	TextMate.exit_discard if choice.nil?
          	choice = items[choice]
          else
            choice = items[0]
          end
          selection = choice.slice(/^[^%]+/).strip
          if ENV['TM_SCOPE'].match(/citation/) then
            print selection
          else
            TextMate.exit_insert_snippet("\\\\${1:cite}\{#{selection}\}")
          end
        rescue RuntimeError => e
          TextMate.exit_insert_text(e.message)
        end

      :input: selection
A7D549C1-055E-4181-84F2-BA713EB66341: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex, text.bibtex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: LaTeX Symbol Based on Current Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: \
        modifiers: 
        - :super
      :uuid: A7D549C1-055E-4181-84F2-BA713EB66341
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes"
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/config_helper.rb"
        @plist = Config.load
        shortcutHash = @plist['symbols']
        currentWord = STDIN.read
        if (shortcutHash.has_key?(currentWord)) then
          print shortcutHash[currentWord]
        else
          TextMate.exit_discard
        end
      :input: selection
2ED44A32-C353-447F-BAE4-E3522DB6944D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Open/Close Tag (With Current Word)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: <
        modifiers: 
        - :control
      :uuid: 2ED44A32-C353-447F-BAE4-E3522DB6944D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\
        #\n\
        # This script will expand the current word into: <word></word>\n\
        # It will recognize HTML 4.0 tags that need no close tag.\n\
        #\n\
        # With no current word, it will insert: <p></p> and allows you\n\
        # to overwrite the tag name and add potential arguments.\n\
        #\n\
        # The result is inserted as a snippet, so it's\n\
        # possible to tab through the place holders.\n\n\
        # single tags\n\
        single_no_arg = /^(?:br|hr)$/i\n\
        single        = /^(?:img|meta|link|input|base|area|col|frame|param)$/i\n\n\
        # we are not in HTML mode, so let\xE2\x80\x99s scrap the above hardcoded tag lists\n\
        unless ENV.has_key? 'TM_HTML_EMPTY_TAGS' then\n  single_no_arg = /(?=not)possible/\n  single        = /(?=not)possible/\n\
        end\n\n\
        # handle the case where caret is in the middle of a word, assume only the left part is the tag\n\
        index = ENV['TM_LINE_INDEX'].to_i - ENV['TM_INPUT_START_LINE_INDEX'].to_i\n\
        tag, suffix = STDIN.read, ''\n\
        if index < tag.length && !ENV['TM_SELECTED_TEXT']\n  tag, suffix = tag[0...index], tag[index..-1]\n\
        end\n\n\
        xhtml = ENV['TM_XHTML'].to_s\n\n\
        print case tag\n  when single_no_arg then \"<#{tag}#{xhtml}>\"\n  when single then        \"<#{tag} $1#{xhtml}>\"\n  when '' then            \"<${1:#{ENV['TM_DEFAULT_TAG'] || 'p'}}>$2</${1/\\\\s.*//}>\"\n  else                    \"<#{tag}>$1</#{tag.strip[/^\\S+/]}>\"\n\
        end\n\n\
        print suffix\n"
      :input: selection
423F0F96-A0B8-4643-B8E1-A55157FC53E4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Document Outline
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 423F0F96-A0B8-4643-B8E1-A55157FC53E4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        test -z $TM_FILENAME && title="Txt2tags" || title="${TM_FILENAME%.*}"
        
        html_header "$title - Document Outline"
        
        cd "$TM_DIRECTORY" # needed to expand possible includes
        txt2tags -t txt --toc-level 5 --toc-only -i- -o- | pre
        
        html_footer
      :input: document
68EA4D87-31FA-4492-9645-925128AB6C43: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt comment.block.c
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Block Comment
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 68EA4D87-31FA-4492-9645-925128AB6C43
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # By Allan Odgaard: 
        # http://macromates.com/blog/archives/2006/04/12/customization-screencast/
        
        txt = STDIN.read.gsub(%r{\A/|\*/\z}, '')
        txt = txt.gsub(/^[ \t]*\*[ \t]*/, '')
        txt = %x{ fmt <<< '#{txt.gsub(/'/, "'\\\\''")}' }.chomp
        txt = txt.gsub(/[$`\\]/, '\\\\\0')
        txt = txt.sub(/(\n(?=\n))?(\n*)\z/, '\1$0\2')
        print "/* " + txt.to_a.join(' * ') + " */"
      :input: selection
BEC25DC3-6E4B-11D9-91AF-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove Unprintable Characters in Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BEC25DC3-6E4B-11D9-91AF-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/[^\t\n\x20-\xFF]|\x7F|\xC2[\x80-\x9F]//g'
      :input: selection
A54CF0C9-ECBF-4A20-B345-3EA167ABD6A0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Go to Project
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: G
        modifiers: 
        - :control
      :uuid: A54CF0C9-ECBF-4A20-B345-3EA167ABD6A0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTD.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
        include GTD
        files = GTD.process_directory
        projects = files.map{|i| i.projects}.flatten
        projectNames = projects.map{|i| i.name+" : "+i.root.name}
        require 'pp'
        choice = TextMate::UI.menu(projectNames)
        if choice then
        	projectName = projectNames[choice]
          project = projects.find{|i| i.name+" : "+i.root.name == projectName}
        puts project.txmt
          `open "#{project.txmt}"`
        end
      :input: none
5F2BCB27-7A5B-11D9-A61B-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: "Commit\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 5F2BCB27-7A5B-11D9-A61B-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd "${TM_RUBY:=ruby}" "We need Ruby to proceed."
        
        export TM_RUBY
        export TM_SVN
        export CommitWindow="$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/svn_commit.rb" &> /dev/console &

      :input: none
B52DEA16-8480-11D9-BE59-000D93B3A10E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: B52DEA16-8480-11D9-BE59-000D93B3A10E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Markdown Preview" "${TM_FILENAME:-}"
        
        if [[ -f "$TM_FILEPATH" ]]; then
          echo "<base href='tm-file://${TM_FILEPATH// /%20}'>"
        fi
        
        # Convert to html then make one of the html tags above caret 
        # into a link that we scroll down to
        Markdown.pl|SmartyPants.pl|${TM_RUBY:-ruby} -e '
        lines = STDIN.read.split("\n")
        n = [ENV["TM_LINE_NUMBER"].to_i, lines.length].min - 7
        
        while n > 0 && !lines[n].match(/<(h\d|p|ul|li|blockquote|pre|div|img|code|table|tr)>/i)
          n -= 1
        end
        
        if n > 0 && m = lines[n].match(/<(h\d|p|ul|li|blockquote|pre|div|img|code|table|tr)>(.*)$/i)
          lines[n] = "<#{m[1]} id=\"scroll_to_here\" >#{m[2]}"
        end
        
        puts lines.join("\n")
        puts "\n<script>window.location.hash = \"scroll_to_here\";</script>"
        '
        html_footer
      :input: document
F34F4BC0-C09C-4DAC-9B0C-EE7173964090: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Display Fuzzy Documentation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: F34F4BC0-C09C-4DAC-9B0C-EE7173964090
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/search.rb" fuzzy input
      :input: selection
70D8CA43-2F62-416C-90DF-D1F83EB358CE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 70D8CA43-2F62-416C-90DF-D1F83EB358CE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Greasemonkey bundle help" "Greasemonkey"
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer
      :input: none
56B05535-1ACD-4E55-B9FC-3BC1FAA3DBE1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Mark Snippet
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 56B05535-1ACD-4E55-B9FC-3BC1FAA3DBE1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby \n\
        print \"\xE2\x80\xB9#{ENV['TM_SELECTED_TEXT']}\xE2\x80\xBA\""
      :input: selection
9F73CBC1-E9C0-41A4-891F-B2879A1852F7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 9F73CBC1-E9C0-41A4-891F-B2879A1852F7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: MultiMarkdown.pl|SmartyPants.pl
      :input: selection
7207ACC2-A64B-11D9-B384-000D93382786: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.shell
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Script
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 7207ACC2-A64B-11D9-B384-000D93382786
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Run \xE2\x80\x98${TM_FILENAME}\xE2\x80\x99\"\n\n\
        if [ ! -x \"$TM_FILEPATH\" ]; then\n\n  res=$(iconv <<APPLESCRIPT -f utf-8 -t mac|osascript 2>/dev/null\n  tell app \"TextMate\" to return button returned of \xC2\xAC\n    (display dialog \"To run \xE2\x80\x9C${TM_FILENAME}\xE2\x80\x9D as a shell script it needs to be executable.\\n\\nWould you like to make it executable?\" \xC2\xAC\n      buttons {\"Cancel\", \"Make Executable\"} \xC2\xAC\n      with icon 1 default button 2)\n\
        APPLESCRIPT)\n\n  if [[ \"$res\" != \"Make Executable\" ]]; then echo '<script>window.close()</script>'; abort; exit; fi\n  chmod a+x \"$TM_FILEPATH\"\n\
        fi\n\n\
        \"$TM_FILEPATH\"|pre\n\
        echo \"Program exited with status $?.\"\n\
        html_footer\n"
      :input: none
991E7EBD-F3F5-469A-BA01-DC30E04AD472: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Each Selected Line in Open/Close Tag
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
        - :super
      :uuid: 991E7EBD-F3F5-469A-BA01-DC30E04AD472
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/[\$`\\]/\\$&/g; s/([ \t]*)(.+)/$1<\${1:li}>$2<\/\${1\/\\s.*\/\/}>/'
      :input: selection
19B3B518-4B71-4AD6-BC0B-7B5477ABD2D9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: 
      :name: Install Bundle
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 19B3B518-4B71-4AD6-BC0B-7B5477ABD2D9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        APP_PATH=$(ps -xwwp $PPID -o command|grep -o '.*.app')
        PTRN=$(ruby -rtextmate -e 'print Dir.entries(TextMate.app_path + "/Contents/SharedSupport/Bundles").grep(/.tmbundle$/).join("|")')
        INST=$(ruby -rtextmate -e 'print Dir.entries( File.expand_path("~/Library/Application Support/TextMate/Pristine Copy/Bundles")).grep(/.tmbundle$/).join("|")')
        
        SVN="${TM_BUNDLE_SUPPORT}/bin/svn"
        
        REV=$(< "$TM_SUPPORT_PATH/version")
        SVN_OPTS="-r$REV --no-auth-cache --non-interactive"
        
        BASE_URL=http://macromates.com/svn/Bundles/trunk/
        
        bundlelist (){ 
          eval '"$SVN"' list "$SVN_OPTS" '"${BASE_URL}/Bundles/"' \
            | egrep -v "^($PTRN|$INST)/\$" \
            | egrep -v "^GetBundle\.tmbundle" \
            | sed -ne 's/.tmbundle\/$//p' \
            | sort -f \
          3> >(CocoaDialog progressbar --indeterminate --title 'Getting Bundle List' --text 'This could take a while...')
        }
        IFS=$'\n' 
        bundle=$(CocoaDialog dropdown \
            --title 'Choose a Bundle' \
            --text 'Select from list:' \
            --button1 Install --button2 Cancel \
            --string-output --no-newline \
            --items $(bundlelist))
        
        if [[ "${bundle:0:7}" == "Install" ]];
          then bu=${bundle:8}
          else exit_discard
        fi
        
        mkdir -p ~/Library/Application\ Support/TextMate/Pristine\ Copy/Bundles
        cd ~/Library/Application\ Support/TextMate/Pristine\ Copy/Bundles
        
        eval '"$SVN"' co "$SVN_OPTS" '"${BASE_URL}/Bundles/${bu}.tmbundle"' \
           2> >(CocoaDialog progressbar --indeterminate --title "Installing Bundle: ${bu}" --text 'This could take a while...')
        
        if [[ $? == 0 ]]; then
          osascript -e 'tell app "TextMate" to reload bundles'
          CocoaDialog bubble --title "Installed Bundle: ${bu}" --text 'You now can use the new Bundle' --icon-file "${APP_PATH}/Contents/Resources/Textmate.icns"
        fi

      :input: none
7C9736B2-B851-11D9-B05D-00039369B986: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: character
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Character / Selection to Hex
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: X
        modifiers: 
        - :control
      :uuid: 7C9736B2-B851-11D9-B05D-00039369B986
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: iconv -f utf-8 -t ucs-2|hexdump -ve '"\\\x" 1/2 "%02x"'
      :input: selection
19A164B7-4A3C-421B-9866-85FB9077A983: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Function Call (tool tip)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hA==

        modifiers: 
        - :alt
      :uuid: 19A164B7-4A3C-421B-9866-85FB9077A983
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -wKU
        
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = SUPPORT + '/bin/tm_dialog'
        
        require SUPPORT + '/lib/escape'
        require SUPPORT + '/lib/osx/plist'
        
        def show_function_and_exit(function)
          return unless function =~ /^[A-Za-z_][A-Za-z0-9_]*$/
          functions = `grep -i '^#{function}%' "$TM_BUNDLE_SUPPORT"/functions.txt`.split("\n")
          if functions.size == 1
            function, prototype, description = functions.pop.split('%')
        
            puts prototype
            puts description
            exit
          end
        end
        
        function = nil
        
        show_function_and_exit(function = ENV['TM_CURRENT_WORD'].to_s)
        
        show_function_and_exit(function = $1) if ENV['TM_CURRENT_LINE'][0..ENV['TM_LINE_INDEX'].to_i] =~ /(\w+)\(/
        
        puts "Function not found: " + function.to_s
      :input: none
AFB40870-6F83-4211-9362-0538287B52A9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc, source.objc++
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: AFB40870-6F83-4211-9362-0538287B52A9
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Objective-C Bundle Help\" \"Objective-C\"\n\
        \"$TM_SUPPORT_PATH/lib/markdown_to_help.rb\" <<'MARKDOWN'\n\n\
        # Introduction\n\n\
        This document describes the commands of the Objective-C bundle and is a recommended read, since not all features are easy to discover.\n\n\
        In addition to this help file there are also 3 screencasts dedicated to showing Objective-C features (the links below are to more info about the screencast):\n\n 1. The [most recent][SC1] is by Joachim M\xC3\xA5rtensson and shows completion, bracket matching, reformatting methods, and documentation lookup.\n 2. [Objective-C Part 2][SC2] by Allan Odgaard.\n 3. [Graceful Objective-C Snippets][SC3] by Allan Objective.\n\n\
        You can see [all screencasts here][AllCasts].\n\n\
        [SC1]: http://home.mac.se/joachimm/Post.html\n\
        [SC2]: http://macromates.com/blog/archives/2006/04/29/objective-c-part-2-screencast/\n\
        [SC3]: http://macromates.com/blog/archives/2006/03/17/graceful-objective-c-snippets/\n\
        [AllCasts]: http://macromates.com/screencasts\n\n\
        # Code Completion\n\n\
        Code Completion is activated using the \xE2\x8C\xA5\xE2\x8E\x8B key equivalent. Code completion is available in several places which will be the topic of the next few sections.\n\n\
        ## Within Brackets\n\n\
        A method call in Objective-C consists of three different types (though not all method calls take arguments):\n\n\
        \t[\xC2\xABreceiver\xC2\xBB \xC2\xABselector\xC2\xBB:\xC2\xABargument\xC2\xBB]\n\n\
        The completion support can help you with all three parts, which will be explained in the following three sections.\n\n\
        ### Receiver\n\n\
        A partially typed receiver can be completed, here candidates are all Cocoa classes (class objects). For example if we have:\n\n\
        \t[NSObje\xE2\x80\xB8 ]\n\n\
        Then the list of possible completions will contain `NSObject` and `NSObjectController`.\n\n\
        ### Selector\n\n\
        When the receiver is a class object, like in the following example:\n\n\
        \t[NSString \xE2\x80\xB8]\n\n\
        Then the candidates are all methods implemented by that class, in the above example, that would be all `NSString` class methods.\n\n\
        If the selector is partially typed, and the receiver is not a known class object, as is the case below:\n\n\
        \t[object setV\xE2\x80\xB8]\n\n\
        Then a list is shown with all Cocoa methods starting with `setV`.\n\n\
        Currently the list of completion candidates is not filtered to those implemented by `object`, since the type of `object` is unknown.\n\n\
        One exception is when the receiver is itself a method call, for example in the following case:\n\n\
        \t[[object string] \xE2\x80\xB8]\n\n\
        Here only methods implemented by `NSString` are suggested, since we know that the result of the `string` selector is an `NSString` object.\n\n\
        For selectors with multiple arguments, it is possible to activate completion when entering the name of a later argument, for example:\n\n\
        \t[object setObject:name forK\xE2\x80\xB8]\n\n\
        Will list all methods starting with `setObject:forK`.\n\n\
        ### Argument\n\n\
        When at the argument position, like here:\n\n    [NSString stringWithCString:\"foo\" encoding:\xE2\x80\xB8]\n\n\
        Then it will check the argument type and find all constants which match that type. In the above example that would be all string encoding constants.\n\n\
        ## Outside of Brackets\n\n\
        The completion command will give different suggestions based on the caret\xE2\x80\x99s scope. To see the current scope you can press \xE2\x8C\x83\xE2\x87\xA7P. The 6 different scopes are marked below:\n\n\
        \t@interface MyClass : NSO\xE2\x80\xB8\xE2\x82\x81 <NSObj\xE2\x80\xB8\xE2\x82\x82>\n\
        \t{\n\
        \t\tNSSt\xE2\x80\xB8\xE2\x82\x83\n\
        \t}\n\
        \t@end\n\
        \t\n\
        \t@implementation MyClass\n\
        \t- (id)init\n\
        \t{\n\
        \t\tif(self = [super init])\n\
        \t\t{\n\
        \t\t\tNSArr\xE2\x80\xB8\xE2\x82\x84\n\
        \t\t}\n\
        \t\treturn self;\n\
        \t}\n\
        \t- windowW\xE2\x80\xB8\xE2\x82\x85\n\
        \t- (NSStr\xE2\x80\xB8\xE2\x82\x86)stringFromString(NSSt\xE2\x80\xB8\xE2\x82\x86<NSCod\xE2\x80\xB8\xE2\x82\x82>)\n\
        \t@end\n\n\
        The candidates suggested for the 6 different scopes are:\n\n 1. Known Cocoa classes.\n 2. Known Cocoa protocols.\n 3. Same as 1, but a variable name will also be inserted. For example the above will suggest `NSString` and `NSStream`. If we pick the former, it will insert `NSString *aString`.\n 4. Same as 3, but completion of known (C, C++, and Cocoa) functions is also suggested.\n 5. Here completion candidates are known Cocoa methods, but inserted as when implementing the method. For example in the above, one of the suggestions is `windowWillClose`, which when selected, will have the line changed to: `- (void)windowWillClose:(NSNotification *)aNotification`.\n 6. Same as 1, but an asterisk (`*`) is inserted.\n\n\
        ## Completing User Methods\n\n\
        By default compleiton candidates comes from the various Apple frameworks (mostly under the Cocoa umbrella).\n\n\
        If you wish to have your own methods shown as completion candidates, you can invoke the *Index Headers for Completion* command.\n\n\
        This scans all headers in the current project folder and saves the result as `.methods.TM_Completions.txt.gz` in your project folder.\n\n\
        You can later re-run the command to update the index.\n\n\
        # Bracket Matching\n\n\
        ## Wrapping Selectors\n\n\
        When you want to send a message (selector) to an object, you need to wrap both the object and message in square brackets (`[object message]`). If you did not already put the opening bracket at the start of the expression, then there is no need to go back and place it, since TextMate is smart enough to figure out where to place the start bracket, when typing the close bracket.\n\n\
        Here are two simple examples:\n\n    obj message\xE2\x80\xB8     \xE2\x86\x92 [obj message]\n    \n    obj message:arg\xE2\x80\xB8 \xE2\x86\x92 [obj message:arg]\n\n\
        An ambiguity exists when sending multi-argument messages to the object. For example if we have:\n\n    obj message:arg otherMessage:arg2\xE2\x80\xB8\n\n\
        Then there are two candidates for the outcome:\n\n    1. [obj message:arg otherMessage:arg2]\n    2. obj message:[arg otherMessage:arg2]\n\n\
        If `message:otherMessage:` is a known Cocoa method, then the first one is picked, otherwise the second one.\n\n\
        ## Wrapping Objects\n\n\
        If you type a closing bracket after a single word, it is assumed that this word is an object to which you want to send a message, e.g.:\n\n    obj\xE2\x80\xB8 \xE2\x86\x92 [obj \xE2\x80\xB8]\n\n\
        The space is only inserted if there is not already a space after the object.\n\n\
        ## General\n\n\
        The bracket completion is aware of quite a few C and Objective-C constructs and will not wrap when it does not make (much) sense.\n\n\
        \tnil\xE2\x80\xB8         \xE2\x86\x92 nil] // no messaging nil\n\
        \treturn self\xE2\x80\xB8 \xE2\x86\x92 return [self \xE2\x80\xB8]\n\
        \tNSArray arrayWithObjects:names, urls, nil\xE2\x80\xB8\n\
        \t             \xE2\x86\x92 [NSArray arrayWithObjects:names, urls, nil]\n\n\
        Here is how the bracket matcher (basically) works:\n\n 1. If there is a word to the left of the caret, try to find an object to the left of it.\n 2. If the above failed, look for a message that takes an argument. If found, try to find even more such messages compare them with known Cocoa methods as we go, if no known Cocoa methods are found we use only the first matched message. try to find an object to the left of the message.\n 3. If neither 1 or 2, we have a single object, wrap it and insert the caret between the brackets.\n    \n\
        # Reformatting\n\n\
        ## Method Calls\n\n\
        Pressing \xE2\x8C\x83Q when the caret is inside a multi-part method call will align the method-parts around the colon (`:`). For example the following:\n\n\
        \t[NSEvent enterExitEventWithType:anEventType location:aPoint\n\
        \t\tmodifierFlags:flags timestamp:aTimeInterval\n\
        \t\twindowNumber:number context:aGraphicsContext\n\
        \t\teventNumber:x trackingNumber:tracker userData:data]\n\n\
        Will be reformatted as:\n\n\
        \t[NSEvent enterExitEventWithType:anEventType\n\
        \t                       location:aPoint\n\
        \t                  modifierFlags:flags\n\
        \t                      timestamp:aTimeInterval\n\
        \t                   windowNumber:number\n\
        \t                        context:aGraphicsContext\n\
        \t                    eventNumber:x\n\
        \t                 trackingNumber:tracker\n\
        \t                       userData:data]\n\n\
        By default the inner brackets will be reformatted if the brackets are nested, move the caret to a non nested area to get the outer methods reformatted.\n\n\
        ## Method Implementations\n\n\
        Like with method calls, we can reformat method implementations using \xE2\x8C\x83Q. If for example we implemented the method above, and our source looks like this:\n\n\
        \t+ (NSEvent *)enterExitEventWithType:(NSEventType)type\n\
        \tlocation:(NSPoint)location modifierFlags:(unsigned int)flags\n\
        \ttimestamp:(NSTimeInterval)time windowNumber:(int)windowNumber\n\
        \tcontext:(NSGraphicsContext *)context eventNumber:(int)eventNumber\n\
        \ttrackingNumber:(int)trackingNumber userData:(void *)userData\n\
        \t{\n\
        \t\n\
        \t}\n\n\
        Then we can reformat it easily using \xE2\x8C\x83Q on the first line, and we get:\n\n\
        \t+ (NSEvent *)enterExitEventWithType:(NSEventType)type\n\
        \t                           location:(NSPoint)location\n\
        \t                      modifierFlags:(unsigned int)flags\n\
        \t                          timestamp:(NSTimeInterval)time\n\
        \t                       windowNumber:(int)windowNumber\n\
        \t                            context:(NSGraphicsContext *)context\n\
        \t                        eventNumber:(int)eventNumber\n\
        \t                     trackingNumber:(int)trackingNumber\n\
        \t                           userData:(void*)userData\n\
        \t{\n\
        \t\n\
        \t}\n\n\
        # Documentation Look-up\n\n\
        Pressing \xE2\x8C\x83H when the caret is on a class name, method call, function name, constant, or similar, will (for most known Cocoa stuff) find the appropriate spot in the documentation.\n\n\
        There are actually two documentation look-up commands (for two different scopes), so generally use the \xE2\x8C\x83H key equivalent rather than the menu item.\n\n\
        # Snippets\n\n\
        The Objective-C bundle has specialized several of the snippets for different scopes.\n\n\
        An example is shown below:\n\n\
        \t@interface MyClass : NSObject\n\
        \t{\n\
        \t}\n\
        \tm\xE2\x80\xB8\n\
        \t@end\n\
        \t\n\
        \t@implementation MyClass\n\
        \tm\xE2\x80\xB8\n\
        \t\n\
        \t- (void)myMethod\n\
        \t{\n\
        \t\tlog\xE2\x80\xB8\n\
        \t}\n\
        \t@end\n\
        \t\n\
        \tvoid MyFunction ()\n\
        \t{\n\
        \t\tlog\xE2\x80\xB8\n\
        \t}\n\n\
        Here we have entered both the tab trigger `m` and `log` in two different scopes. If we press tab (\xE2\x87\xA5) to expand all four tab triggers, then the resulting code becomes:\n\n\
        \t@interface MyClass : NSObject\n\
        \t{\n\
        \t}\n\
        \t- (id\xE2\x80\xB8)method:(id)anArgument;\n\
        \t@end\n\
        \t\n\
        \t@implementation MyClass\n\
        \t- (id\xE2\x80\xB8)method:(id)anArgument\n\
        \t{\n\
        \t\treturn nil;\n\
        \t}\n\
        \t\n\
        \t- (void)myMethod\n\
        \t{\n\
        \t\tNSLog(@\"%s\xE2\x80\xB8\", _cmd);\n\
        \t}\n\
        \t@end\n\
        \t\n\
        \tvoid MyFunction ()\n\
        \t{\n\
        \t\tNSLog(@\"\xE2\x80\xB8\");\n\
        \t}\n\n\
        What\xE2\x80\x99s interesting here is that the `m` tab trigger expands to a full method implementation inside `@implementation\xE2\x80\xA6@end`, but only a prototype when inside `@interface\xE2\x80\xA6@end`. Likewise the `log` tab trigger will only output the `_cmd` variable when called from inside a method (where it is available).\n\n\
        All the accessor snippets are likewise specialized for `@implementation` and `@interface`, though only one set appears in the menu (so use the tab trigger to get the proper one).\n\n\
        In addition to specializing the snippets for different scopes, a lot of other magic has also been put into them. If for example you add `%d` to the format string of the `NSLog` snippet, then an argument placeholder is automatically inserted. The method snippet will remove the `return nil;` line if you change the return type to `void`, and it will let the argument variable\xE2\x80\x99s name match its type, for example if you change the type from `id` to `NSString*` then the variable becomes `aString`.\n\n\
        # Credits\n\n\
        The cool stuff in this bundle is done by Joachim M\xC3\xA5rtensson.\n\n\
        Additional work by Chris Thomas and Allan Odgaard. The initial bracket matcher (which served us well for a long time) was done by Rob Rix.\n\n\
        MARKDOWN\n\
        html_footer"
      :input: none
0A27EDBA-2C7C-44CF-B2B0-1B3B7BF8D7D6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Makeindex
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0A27EDBA-2C7C-44CF-B2B0-1B3B7BF8D7D6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # just to remind you of some useful environment variables
        # see Help / Shell Variables for the full list
        M=${TM_LATEX_MASTER:=$TM_FILEPATH}
        DIR=`dirname "$M"`
        FILE=`basename -s.tex "$M"`
        PDF="${FILE%.tex}.pdf"
        CWD="`pwd`/"
        
        # Switch to the right directory.
        cd "$TM_PROJECT_DIRECTORY"
        cd "$DIR"
        
        makeindex "$FILE"

      :input: none
4D425A1D-E272-4355-8041-311DD4486809: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Command Template
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 4D425A1D-E272-4355-8041-311DD4486809
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/bin/insert_command_template.rb\""
      :input: selection
3FA49AEC-79AA-4E3A-BFDA-FD7E4EF8D0FE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Previous Revision (PREV)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
        - :super
      :uuid: 3FA49AEC-79AA-4E3A-BFDA-FD7E4EF8D0FE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #
        # $Id: Previous Revision (PREV).plist 3075 2006-04-22 20:20:01Z aparajita $
        #
        
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd opendiff "You must install the Apple developer tools to run FileMerge."
        
        # See if the current file is under svn control
        FILE=`basename "$TM_FILEPATH"`
        INFO_LINES=`svn info "$FILE" 2>&1 | grep "^Path\: .*\$" | wc -l`
        
        if [ $INFO_LINES -eq 0 ]; then
        	echo "The current file is not under subversion control"
        	exit_show_tool_tip
        fi
        
        "$TM_BUNDLE_SUPPORT/bin/filemerge.sh" PREV -

      :input: none
3AFD7429-7123-4ADD-B3CC-A9F112F8643B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Symbol
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: c
        modifiers: 
        - :alt
        - :control
      :uuid: 3AFD7429-7123-4ADD-B3CC-A9F112F8643B
      :disable_output_auto_indent: 
      :bundle_uuid: E3BADC20-6B0E-11D9-9DC9-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/usr/bin/env python
        import sys
        import re
        import os
        
        re_symbol = re.compile(r"^(\s*)(?:class|def)\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*[\:\(]")
        tm_line_num = int(os.environ['TM_LINE_NUMBER'])
        line_num = 0
        
        symbols = []
        for line in sys.stdin:
            line_num += 1
            m = re_symbol.search(line)
            if m:
                ws, name = m.groups()
                ws_len = len(ws.expandtabs())
                while symbols and symbols[-1][0] >= ws_len:
                    symbols.pop()
                symbols.append((ws_len, name))
            if line_num == tm_line_num:
                break
        
        symbol = '.'.join([t[1] for t in symbols])
        p = os.popen("/usr/bin/pbcopy", "w")
        p.write(symbol)
        p.close()
        
      :input: document
70A0BC8E-98E0-4D14-B004-7ACA9162B496: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.single, string.quoted.double
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle Single / Double String Quotes
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "\""
        modifiers: 
        - :control
      :uuid: 70A0BC8E-98E0-4D14-B004-7ACA9162B496
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        print case str = STDIN.read
          when /\A"(.*)"\z/m; "'" + $1 + "'"
          when /\A'(.*)'\z/m; '"' + $1 + '"'
          else str
        end

      :input: selection
1932A8DB-9670-4CAD-8269-423AD14ADCE4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.shell, string.interpolated.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Filename Completion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          CQ==

        modifiers: 
        - :control
      :uuid: 1932A8DB-9670-4CAD-8269-423AD14ADCE4
      :disable_output_auto_indent: 
      :bundle_uuid: AEAF4DD4-74CD-11D9-BAD4-000A95A89C98
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/filename_completion.rb"

      :input: none
2C4C9673-B166-432A-8938-75A5CA622481: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: URL Unescape Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 2C4C9673-B166-432A-8938-75A5CA622481
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require 'cgi'
        print CGI.unescape(STDIN.read)

      :input: selection
437E330A-5F7B-42D2-A69E-1112F1DAAE32: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Search .cmi
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: f
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 437E330A-5F7B-42D2-A69E-1112F1DAAE32
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/ocamlcompletion"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
        
        searchstring = $stdin.read.strip
        
        plist = "{ignoreCase = 0; regularExpression = 0; searchString = \"#{searchstring}\"; restrictTo = \"all\";}"
        options = `'#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog' -p '#{plist}' -m '#{ENV['TM_BUNDLE_SUPPORT']}/nibs/SearchWindow.nib' | pl`
        
        
        options = OSX::PropertyList.load(options)
        if options['returnButton'] == 'Search'
          searchtype = options['restrictTo'].to_sym
          searchstring = options['searchString']
          if options['regularExpression'] != 1
            searchstring = Regexp.escape(searchstring)
          end
          answers = OCamlCompletion::cmigrep(searchstring, searchtype)
          if answers != ''
            puts answers
          else
            puts 'No matches found'
          end
        end
      :input: selection
BE6728A5-AFC4-4D98-9EC7-C2E951483B71: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Commit...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: BE6728A5-AFC4-4D98-9EC7-C2E951483B71
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        export TM_CVS
        export CommitWindow="$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/cvs_commit.rb"
      :input: none
1AD6A138-2E89-4D6A-AB3F-416BF9CE968D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Show for Current File / Project
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 1AD6A138-2E89-4D6A-AB3F-416BF9CE968D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        if (( ${#TM_PROJECT_DIRECTORY} != 0 )); then
            cd "$TM_PROJECT_DIRECTORY"
            output="`basename "$TM_PROJECT_DIRECTORY"`"
            input="."
        else
            cd "$TM_DIRECTORY"
            output="$TM_FILENAME"
            input="$TM_FILENAME"
        fi
        
        output_dir="/tmp/rdoc_${output}"
        
        rm -rf "${output_dir}"
        
        rdoc -S -N -q -f html --op "${output_dir}" "$input" &>/dev/null
        
        echo "<html><head><meta http-equiv=\"refresh\" content=\"0;URL=tm-file://${output_dir}/index.html\"></head></html>"

      :input: none
EB99AA83-E73B-42F6-88E1-6F8AB29F9BFD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Synchronize with iCal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: EB99AA83-E73B-42F6-88E1-6F8AB29F9BFD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH']+"/lib/progress.rb"
        TextMate.call_with_progress(:title=> "Synchronizing with iCal" , :message =>"This may take a while...") {
        #`osascript "$TM_BUNDLE_SUPPORT/bin/gtdalt_ical_synchronization.applescript"`
        
        `osascript "$TM_BUNDLE_SUPPORT/bin/gtdalt_ical_synchronization.scpt"`
        }
      :input: none
3BAE5ECF-9006-43D0-9AEB-28FAFE526840: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to LaTeX (Memoir)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 3BAE5ECF-9006-43D0-9AEB-28FAFE526840
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_BUNDLE_SUPPORT"
        MultiMarkdown.pl|SmartyPants.pl|xsltproc -novalid -nonet "$TM_BUNDLE_SUPPORT/xhtml2memoir.xslt" -
      :input: selection
9B3C2535-5CB7-43B8-9A8E-BCAB1085A245: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Small Caps
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: K
        modifiers: 
        - :super
      :uuid: 9B3C2535-5CB7-43B8-9A8E-BCAB1085A245
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: toggle_style.rb -style=textsc
      :input: selection
7164B649-E5B6-4A2C-BF01-671528D0A780: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Insert Color\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :super
      :uuid: 7164B649-E5B6-4A2C-BF01-671528D0A780
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/dialog"
        tag = STDIN.read
        color = Dialog.request_color(STDIN.read)
        print "#{tag}{color:#{color}}"
      :input: selection
D7A8ED42-49E0-4CF3-A6C8-BE8DAB76267A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.matlab
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: O
        modifiers: 
        - :super
      :uuid: D7A8ED42-49E0-4CF3-A6C8-BE8DAB76267A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        f=`find . "$HOME/matlab" /Applications/MATLAB* -name "${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}.m"|head -1`
        
        if [[ -e "$f" ]]
          then open -a TextMate "$f"
          else echo "File could not be found."
        fi

      :input: none
9FB64639-F776-499B-BA6F-BB45F86F80FD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Missing Requires
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "#"
        modifiers: 
        - :control
      :uuid: 9FB64639-F776-499B-BA6F-BB45F86F80FD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $: << "#{ENV['TM_SUPPORT_PATH']}/lib"
        
        require "escape"
        require "open3"
        
        # make exceptions in the writing Thread kill the process so we don't hang
        Thread.abort_on_exception = true
        
        CURSOR = [0xFFFC].pack("U").freeze
        line, col = ENV["TM_LINE_NUMBER"].to_i - 1, ENV["TM_LINE_INDEX"].to_i
        
        stdin, stdout, stderr = Open3.popen3("/usr/bin/env", "ruby", "#{ENV['TM_BUNDLE_SUPPORT']}/bin/insert_requires.rb")
        Thread.new do
          code = STDIN.read.to_a
          unless ENV.has_key?('TM_SELECTED_TEXT')
            if code[line].nil?  # if cursor was on the last line and it was blank
              code << CURSOR
            else
              code[line][col...col] = CURSOR
            end
          end
          stdin.write code.join
          stdin.close
        end
        
        print stdout.read.split(CURSOR).join('${0}')

      :input: selection
50C87892-73B6-4B09-B286-78A50136BC71: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Type
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: t
        modifiers: 
        - :control
      :uuid: 50C87892-73B6-4B09-B286-78A50136BC71
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        "$TM_BUNDLE_SUPPORT"/annot -type $TM_LINE_NUMBER $TM_LINE_INDEX ${TM_FILEPATH/%\.ml/\.annot}
      :input: none
F3A754C3-CE6B-11D9-9C17-000A95C0F626: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $3
      :scope: text.html.markdown
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: nop
      :name: Level 1 [setext]
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: F3A754C3-CE6B-11D9-9C17-000A95C0F626
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: "="
      :capture_pattern: ^([^:]*):([^:]*):(.*)$
      :command: |-
        #!/bin/sh
        
        if [[ $TM_LINE_INDEX == 0 && $TM_LINE_NUMBER != 1 ]]
           then head -n$((TM_LINE_NUMBER-1))|tail -n1|sed 's/./=/g'
           else echo -ne '=\t'
        fi
      :input: document
DF9F9DF7-5F85-11D9-97D0-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tidy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: DF9F9DF7-5F85-11D9-97D0-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: LaTeXTidy.pl
      :input: document
F05EE36B-139D-41A4-8957-637BE0AAD847: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.sweave
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: F05EE36B-139D-41A4-8957-637BE0AAD847
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        	html_header "Sweave Bundle Help" "Sweave"
        	Markdown.pl "$TM_BUNDLE_SUPPORT/help.markdown"|Smartypants.pl
        	html_footer

      :input: none
6177C3DA-C580-11D9-B649-000393D4B5C8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Typeset & View (PDF)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 6177C3DA-C580-11D9-B649-000393D4B5C8
      :disable_output_auto_indent: 
      :bundle_uuid: 46788DCE-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "# Source some support functions we need.\n\
        . \"${TM_SUPPORT_PATH}/lib/html.sh\"\n\
        . \"${TM_SUPPORT_PATH}/lib/webpreview.sh\"\n\
        . \"${TM_BUNDLE_SUPPORT}/lib/options.sh\"\n\n\
        # Get the viewer program. Any program (that works with open -a <name>) can be used,\n\
        # except 'html' which is reserved to mean the internal HTML window. This is also the\n\
        # default option.\n\
        V=\"${TM_LATEX_VIEWER:-html}\"\n\
        EL=\"${TM_LATEX_ERRLVL:-1}\"\n\
        M=\"${TM_LATEX_MASTER:-$TM_FILEPATH}\"\n\
        DIR=\"$(dirname \"$M\")\"\n\n\
        parse_options \"$M\"\n\
        # Now parse the options from the master file (if any)\n\
        while [[ ${#OPTIONS_root} -gt 0 && \"${OPTIONS_root}\" != \"$M\" ]]; do\n  # this way you can chain master files if you really want\n  # For example, a section file can reference its chapter, which can reference the book\n  # Yes, this means options in master files override options in the individual file\n  # this may not exactly be ideal, but it's easiest. Show me a file structure that this\n  # is a problem for, and I'll show a poorly-designed LaTeX file\n  if [[ \"$OPTIONS_root\" == /* ]]\n  then M=\"$OPTIONS_root\"\n  else M=\"$DIR/$OPTIONS_root\"\n  fi\n  unset -v OPTIONS_root\n  DIR=\"$(dirname \"$M\")\"\n  parse_options \"$M\"\n\
        done\n\n\
        # Support the legacy TEX_PSTRICKS setting\n\
        if [[ -z \"$TM_LATEX_PROGRAM\" && \"$TEX_PSTRICKS\" == 1 ]]; then\n\
        \tTM_LATEX_PROGRAM=latex\n\
        fi\n\n\
        # Allow per-file setting to over-ride global default\n\
        # (Make an exception for latexmk, for backwards compatibility.)\n\
        if [ \"$TM_LATEX_PROGRAM\" != \"latexmk.pl\" ]; then\n    TM_LATEX_PROGRAM=\"${OPTIONS_program:-${TM_LATEX_PROGRAM:-pdflatex}}\"\n\
        fi\n\n\
        # More variables\n\
        FILE=\"$(basename \"$M\")\"\n\
        PDF=\"${FILE%.*}.pdf\"\n\
        DVI=\"${FILE%.*}.dvi\"\n\
        PS=\"${FILE%.*}.ps\"\n\
        CWD=\"`pwd`/\"\n\n\
        # Set up TeX compiler, fallback to xelatex if document indicates it, \n\
        if [[ \"$TM_LATEX_PROGRAM\" == \"xelatex\" ]] || grep -Esq '^[^%]*\\\\usepackage.*(xunicode|fontspec)|program=xelatex' \"$M\"; then\n  DEF_TEX=xelatex\n\
        # or to latex+dvi2ps if document indicates it, or if pstricks is there\n\
        elif [[ \"$TM_LATEX_PROGRAM\" == \"latex\" ]] || grep -Esq '^[^%]*\\\\usepackage.*(pstricks|xyling|pst-asr|OTtablx)' \"$M\"; then\n  DEF_TEX=latex\n\
        else\n  # If we don't recognise the setting, try it anyway\n  DEF_TEX=\"$TM_LATEX_PROGRAM\"\n\
        fi\n\n\
        # Allow TM_LATEX_COMPILER to over-ride everything (e.g. for latexmk)\n\
        TEX=\"${TM_LATEX_COMPILER:-$DEF_TEX}\"\n\n\
        # Add our tex directory to the TEXINPUTS variable so e.g. pdfsync is found (even when the user hasn\xE2\x80\x99t installed it)\n\
        # preceeding colon stands for default search paths. Search them first so if user installed pdfsync it'll use that one\n\
        export TEXINPUTS=\"$(kpsewhich -progname \"$TEX\" --expand-var '$TEXINPUTS'):$TM_BUNDLE_SUPPORT/tex//\"\n\n\
        # Switch to the right directory.\n\
        cd \"$TM_PROJECT_DIRECTORY\"\n\
        cd \"$DIR\"\n\
        echo \"<!-- $DIR / $(pwd) -->\"\n\n\
        # Prepare output window.\n\
        html_header 'Typeset &amp; View' \"$FILE\"\n\
        echo '<h2>Compiling LaTeX\xE2\x80\xA6</h2>'\n\n\
        # Check if we actually have a tex compiler\n\
        require_cmd \"$TEX\" \"You can set the <tt>PATH</tt> variable to include the path of <tt>$TM_LATEX_PROGRAM</tt>.\"\n\n\
        tex_command () {\n\
        if [ \"$TEX\" != latexmk.pl ]\n  then echo \"'$TEX' ${TM_LATEX_OPTIONS:=-interaction=nonstopmode -file-line-error-style}\"\n  else\n    if [[ \"$TM_LATEX_PROGRAM\" == latex ]]\n      then\n        echo \"'$TEX' -f -ps\"\n      else\n        echo \"'$TEX' -f -r '${TM_BUNDLE_SUPPORT}/latexmkrc'\"\n    fi\n\
        fi\n\
        }\n\n\
        # Compile.\n\
        latexErrWarnHtml.py \"$(tex_command)\" \"$FILE\"\n\
        RC=$?\n\
        if [[ \"$TM_LATEX_PROGRAM\" == latex ]]; then\n  dvips \"$DVI\" -o \"$PS\" && ps2pdf \"$PS\"\n\
        fi\n\
        # If there is output and it's newer than the current document, then we go directly to preview or link to it.\n\
        if [ -s \"${PDF}\" -a ! \"$PDF\" -ot \"$FILE\" ]; then\n  if [[ \"$V\" == html ]]; then\n    WEB_LOC=\"tm-file://${DIR}/${PDF}\"\n    WEB_LOC=\"${WEB_LOC//\\\\#/%23}\"\n    if ((\"$RC\" < 3)); then\n      if ((\"$RC\" >= \"$EL\"))\n        then link \"${WEB_LOC}\" 'Click Here to Preview'\n        else redirect \"${WEB_LOC}\"\n      fi\n    fi\n  else\n    V=\"${V%.app}\" # strip potential .app extension\n    if find_app >/dev/null \"$V.app\"; then\n      open -a \"$V\" \"$PDF\"\n      if [[ \"$V\" == TeXniscope && -f \"${PDF}sync\" ]]; then\n        SCRIPT=\"$(find_app TeXniscope.app)/Contents/Resources/forward-search.sh\"\n        [[ -x \"$SCRIPT\" ]] && \"$SCRIPT\" \"$TM_LINE_NUMBER\" \"$TM_FILEPATH\" \"$PDF\"\n      fi\n      if [[ \"$V\" == PDFView && -f \"${PDF}sync\" ]]; then\n        SCRIPT=\"$(find_app PDFView.app)/Contents/MacOS/gotoline.sh\"\n        [[ -x \"$SCRIPT\" ]] && \"$SCRIPT\" \"$TM_LINE_NUMBER\" \"$DIR/$PDF\"\n      fi\n      if [[ \"$V\" == Skim && -f \"${PDF}sync\" ]]; then\n        SCRIPT=\"$(find_app Skim.app)/Contents/Resources/displayline\"\n        [[ -x \"$SCRIPT\" ]] && \"$SCRIPT\" \"$TM_LINE_NUMBER\" \"$PDF\" \"$TM_FILEPATH\"\n      fi\n      if ((\"$RC\" < \"$EL\")); then exit_discard; fi\n    else\n      strong \"Error locating external viewer: \xE2\x80\x98${V}\xE2\x80\x99\"\n    fi\n  fi\n\
        else\n  strong \"Error: PDF file not written to disk\"\n\
        fi\n\
        html_footer\n"
      :input: none
FC47B2D5-8116-11D9-B33A-00039398C572: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open httpd Config
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FC47B2D5-8116-11D9-B33A-00039398C572
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #Opens http.conf from its default location in OS X.
        open -a textmate /etc/httpd/httpd.conf
      :input: none
DA0A5F4B-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tidy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: DA0A5F4B-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd perltidy 'Perltidy is available <a href="javascript:TextMate.system(&quot;open http://perltidy.sourceforge.net/&quot;, null)">from here</a>.'
        
        perltidy -st -q

      :input: selection
5EEA0C71-B34B-4408-953B-F47AAD343CCC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Load Fixtures (Development DB)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 5EEA0C71-B34B-4408-953B-F47AAD343CCC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:fixtures:load

      :input: none
C46A9DBC-0B06-49DF-838B-491B529ECF22: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Duplicate Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
      :uuid: C46A9DBC-0B06-49DF-838B-491B529ECF22
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "# If there\xE2\x80\x99s a selection, output that twice (as a snippet)\n\
        # leaving the duplicate as the new selected text.\n\
        # Otherwise split the current line around the caret and\n\
        # output \xE2\x80\x9Cright, left\xE2\x80\x9D to duplicate the line, leaving the\n\
        # caret in the same place on the new line\n\n\
        if [[ -n \"$TM_SELECTED_TEXT\" ]]\n   then exit_insert_snippet '$TM_SELECTED_TEXT${0:$TM_SELECTED_TEXT}'\n   else exit_insert_text \"${TM_CURRENT_LINE:TM_LINE_INDEX}\n\
        ${TM_CURRENT_LINE:0:TM_LINE_INDEX}\"\n\
        fi\n"
      :input: none
065700E0-FE74-43E9-867E-019FF0D1487B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Preview in Browser
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: 065700E0-FE74-43E9-867E-019FF0D1487B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        TRST=${TM_RST2HTML:=rst2html.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2HTML</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        # Send the current file through rst2html.py
        
        if [[ -f "$TM_DIRECTORY/default.css" ]]
        	then stylesheet="$TM_DIRECTORY/default.css"
        elif [[ -f "$TM_PROJECT_DIRECTORY/default.css" ]]
        	then stylesheet="$TM_PROJECT_DIRECTORY/default.css"
        else
        	css=`mktemp -t /tmp`
        	echo 'body {	
        		background-color: #eee;
        	}
        	.document {
        		background: white;
        		font-family: Georgia, serif;
        		font-size: 13px;
        		border: 1px #888 solid;
        		padding: 0 1em;
        	}' > $css
        	stylesheet=$css
        fi
        
        if [[ -n $stylesheet ]]
        	then flags="--embed-stylesheet --stylesheet=$stylesheet"
        	else flags=""
        fi
        
        out=`mktemp -t /tmp`
        echo "Running: $TRST $flags \"$TM_FILEPATH\" \"$out.html\""
        $TRST $flags "$TM_FILEPATH" "$out.html"
        open "$out.html"
        
        #rm "$out.html"
        if [[ -n $css ]]
        	then rm $css
        fi
        
        
      :input: document
2593B8FB-279E-4BD1-8935-0D9B1699526F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Annotate
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 2593B8FB-279E-4BD1-8935-0D9B1699526F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "$TM_HG" annotate -nud "$TM_FILEPATH" 2>&1 \
        |"${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/format_annotate.rb"
      :input: none
B2E62E8B-6E70-11D9-A369-000D93B3A10E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Send Selection / Document to R
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: B2E62E8B-6E70-11D9-A369-000D93B3A10E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # input is selection or document
        rawText="`cat`"
        
        curDir=''
        if [[ ${#TM_DIRECTORY} -gt 0 ]]; then
        	curDir="$TM_DIRECTORY"
        fi
        
        osascript -e 'on run(theCode)' \
        		  -e 'tell application "R" to activate' \
        		  -e 'if (item 2 of theCode) is not "" then tell application "R" to cmd "setwd('\''" & (item 2 of theCode) & "'\'')"' \
        		  -e 'tell application "R" to cmd (item 1 of theCode)' \
        		  -e 'end run' -- "$rawText" "$curDir"

      :input: selection
3B5D493F-111A-4639-BA28-B2119770504B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Table
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 3B5D493F-111A-4639-BA28-B2119770504B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: "|"
      :capture_pattern: 
      :command: |-
        if test -z "$TM_SELECTED_TEXT"; then
        	echo	
        	echo "|| Heading1 | Heading 2 | Heading 3 |"
        	echo "| left      |   center  |     right |"
        	echo
        else
        	tab=$(echo -ne \\t)
        	echo "$TM_SELECTED_TEXT" |
        		sed "s/$tab/ | /g;s/.*/| & |/"
        fi
      :input: selection
CF2CA4F9-82A7-11D9-8753-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: View POD as HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: CF2CA4F9-82A7-11D9-8753-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: pod2html 2>/dev/null
      :input: document
DA0A5FEC-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $1 $3
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveActiveFile
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: DA0A5FEC-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: ^(.*)line (\d+)(.*)$
      :command: |-
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        cd "${TM_DIRECTORY}"
        out=`"${TM_BUNDLE_SUPPORT}/perlcheckmate.pl" "${TM_FILEPATH}"`
        if [[ $out ]]
          then htmlHeader "Perl syntax errors for ${TM_FILENAME}";
               exit_show_html "$out";
               htmlFooter
          else exit_show_tool_tip "No errors!"
        fi
      :input: document
46ECE243-0448-4A64-A223-27CC21E7704D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Install Plugin
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 46ECE243-0448-4A64-A223-27CC21E7704D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/list_plugins.rb"
      :input: none
51D8677D-0D57-41A9-8C95-DC909C9F049B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.prototype
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: CodeCompletion Javascript Prototype
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 51D8677D-0D57-41A9-8C95-DC909C9F049B
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        TextmateCodeCompletion.simple('Prototype Completions')

      :input: selection
FEFA1349-E915-4C5F-A17B-B268D15E92CB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Ruby Code Completion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: FEFA1349-E915-4C5F-A17B-B268D15E92CB
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        preference = 'CodeCompletions Ruby'
        choices = []
        
        parsed_choices = TextmateCompletionsParser.new(nil, :scope => :ruby).to_ary
        choices += parsed_choices if parsed_choices
        
        choices += ['--']
        
        plist_choices = TextmateCompletionsPlist.new( "#{ENV['TM_BUNDLE_PATH']}/Preferences/#{preference}.tmPreferences" ).to_ary
        choices += plist_choices if plist_choices
        
        print TextmateCodeCompletion.new(choices,STDIN.read).to_snippet

      :input: selection
0A8006CB-834C-4AC5-BAFE-672EB5F19417: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.s5
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "?"
        modifiers: 
        - :super
      :uuid: 0A8006CB-834C-4AC5-BAFE-672EB5F19417
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        htmlHeader "S5 Slide Show Help" "S5 Slide Show"
        Markdown.pl <<'EOF'|SmartyPants.pl
        
        S5: A Simple Standards-Based Slide Show System
        ==============================================
        
        Introduction
        ------------
        
        S5 is a slide show format based entirely on XHTML, CSS, and JavaScript. To read all about S5, visit the [S5 project web site][3].
        
        Getting Started
        ---------------
        
        The best way to start a new presentation is to use the "New from Template" option from the "File" menu, choosing "S5 Presentation" from the "S5" menu. This will give you a basic presentation file which you can then start modifying.
        
        To quickly enter a new slide, type "slide" and hit the tab key. If you just want to create the dividing marker inbetween slides, type "cut" and hit the tab key.
        
        The formatting of the slides themselves is Markdown, which is pretty ideal for entering lots of bullet lists and headings. S5 does support most any HTML you enter into the slide as well, including images. Refer to the [S5 project site][3] for further documentation on writing slides.
        
        Headers
        -------
        
        The S5 document format supports a set of "header" lines that are always placed at the top of the document. These provide extra metadata regarding the presentation itself. If you create a blank presentation using the above instructions, you will see some of these. The list of headers you may specify include:
        
        * Title - The title of the presentation.
        * Subtitle - The subtitle of the presentation (optional).
        * Presenter (or Author) - Your name or the name of the person that will be presenting the presentation.
        * Company (or Organization) - The name of the presenter's company.
        * Location - The location where the presentation will be given.
        * Date - The date the presentation will be given.
        * Controls - Specifies whether the navigation controls are always visible or not. The value for this should be either "hidden" or "visible" (the default is to be visible).
        * View - Specifies the default view of the presentation. Should be either "slideshow" or "outline" (the default is "slideshow").
        * Theme - The name of a S5 theme directory. This should be a directory name that contains a S5 compatible theme. The directory should be immediately under the "ui" directory (see Directory Layout section below). The default value for theme is "default".
        
        Header lines are written with the heading keyword followed with a colon (":") and then the value for the keyword follows.
        
            Title: Presentation title
        
        Many of these headings are optional, but some are required in the sense that omitting them will adversely affect the appearance of the presentation.
        
        Content Layout
        --------------
        
        S5 supports placing "handout" and "note" sections within individual slides. You can notate these portions of a slide using the "note" and "hand" tab-triggered snippets. For example, a slide with text, handout and notes would look like this:
        
            Slide Text
        
            __________
        
            Handout section
        
            ##########
        
            Presentation notes.
        
        The presentation notes are displayed in the popup-notes/control window that is new to S5 1.2.
        
        Handout notes are included when printing the presentation.
        
        Commands
        --------
        
        * **Present**: Formats the presentation and opens it in your web browser.
        * **Convert to HTML**: Converts the presentation into HTML, creating a new document.
        * **Copy theme files**: Places a copy of the S5 support files into the same directory where your presentation resides.
        
        Directory Layout
        ----------------
        
        The S5 bundle includes a copy of the S5 default theme. Executing the "Present" command will load the default theme files from the S5 Bundle directory. If you want to include a copy of the S5 support files with your presentation document, use the "Copy theme files" command to make a copy of the S5 support files into the directory your presentation document is in. Additional custom themes can be copied into the "ui" folder. The theme can be specified using the "Theme" header (as described above). If you have a file named "MyPresentation.s5", the S5 "ui" folder should be placed in the same folder, and the directory would look something like this:
        
        <pre>MyPresentation.s5
        ui/
        ui/s5-notes.html
        ui/default/
        ui/default/blank.gif
        ui/default/bodybg.gif
        ui/default/framing.css
        ui/default/iepngfix.htc
        ui/default/opera.css
        ui/default/notes.css
        ui/default/outline.css
        ui/default/pretty.css
        ui/default/print.css
        ui/default/s5-core.css
        ui/default/slides.css
        ui/default/slides.js
        </pre>
        
        Note that if your presentation is part of a TextMate project, the S5 Bundle will look for the "ui" directory first in the directory of your presentation file and if not found there, it will also check the top-level project directory as well.
        
        Credits
        -------
        
        This bundle is maintained by [Brad Choate][1]. The S5 CSS and HTML framework was developed by [Eric Meyer][2]. Many additional resources regarding S5, including documentation and additional themes may be found at the [S5 project site][3].
        
        [1]: http://bradchoate.com/
        [2]: http://www.meyerweb.com/eric/
        [3]: http://www.meyerweb.com/eric/tools/s5/
        
        EOF
        htmlFooter
      :input: none
42F50AE3-4F1C-43EB-9722-D80261A19625: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: comment.block.documentation.phpdoc.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Tag
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 42F50AE3-4F1C-43EB-9722-D80261A19625
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if grep <<<${TM_CURRENT_WORD:-!} -Esq '[@a-zA-Z]+'
        	then exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://manual.phpdoc.org/HTMLframesConverter/earthli/phpDocumentor/tutorial_tags.${TM_CURRENT_WORD#@}.pkg.html'>"
        	else echo "Nothing to lookup (hint: place the caret on a tag)"
        fi
      :input: none
9A3FE182-40AB-4980-AB6C-32DDA22DE41D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $3
      :scope: text.tex.latex, meta.reference.label.latex
      :fallback_input: word
      :line_capture_register: "2"
      :before_running_command: nop
      :name: "Label Based on Current Word / Selection\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 9A3FE182-40AB-4980-AB6C-32DDA22DE41D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: ^([^:]*):([^:]*):(.*)$
      :command: |
        #!/usr/bin/env ruby
        require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/LaTeXUtils.rb"
        phrase = STDIN.read.chomp
        include LaTeX
        begin
          items = LaTeX.get_labels
          items = items.grep(/#{phrase}/) if phrase != ""
          TextMate.exit_discard if items.empty?
          if items.length > 1 then
            choice = TextMate::UI.menu(items)
            TextMate.exit_discard if choice.nil?
            choice = items[choice]
          else
            choice = items[0]
          end
          selection = choice.slice(/^[^%]+/).strip
          if ENV['TM_SCOPE'].match(/label/) then
            print selection
          elsif selection.match(/^eq(n)?:/)
            TextMate.exit_insert_snippet "\\\\${1:eqref}\{#{selection}\}"
          else
            TextMate.exit_insert_snippet("\\\\${1:ref}\{#{selection}\}")
          end
        rescue RuntimeError => e
          TextMate.exit_insert_text(e.message)
        end

      :input: selection
B37F2E1A-C35F-11D9-AB2C-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Blame
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: B37F2E1A-C35F-11D9-AB2C-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVK:=svk}" "If you have installed svk, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVK</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_SVK:=svk}" blame "$TM_FILEPATH" \
        2>&1| "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/format_blame.rb"
      :input: none
CC30D708-6E49-11D9-B411-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Insert Color\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :super
      :uuid: CC30D708-6E49-11D9-B411-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        require ENV['TM_SUPPORT_PATH'] + "/lib/ui"
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        colour = STDIN.read
        
        # http://www.w3schools.com/css/css_colornames.asp
        COLOURS = {
          'aliceblue'            => 'F0F8FF',
          'antiquewhite'         => 'FAEBD7',
          'aqua'                 => '00FFFF',
          'aquamarine'           => '7FFFD4',
          'azure'                => 'F0FFFF',
          'beige'                => 'F5F5DC',
          'bisque'               => 'FFE4C4',
          'black'                => '000000',
          'blanchedalmond'       => 'FFEBCD',
          'blue'                 => '0000FF',
          'blueviolet'           => '8A2BE2',
          'brown'                => 'A52A2A',
          'burlywood'            => 'DEB887',
          'cadetblue'            => '5F9EA0',
          'chartreuse'           => '7FFF00',
          'chocolate'            => 'D2691E',
          'coral'                => 'FF7F50',
          'cornflowerblue'       => '6495ED',
          'cornsilk'             => 'FFF8DC',
          'crimson'              => 'DC143C',
          'cyan'                 => '00FFFF',
          'darkblue'             => '00008B',
          'darkcyan'             => '008B8B',
          'darkgoldenrod'        => 'B8860B',
          'darkgray'             => 'A9A9A9',
          'darkgrey'             => 'A9A9A9',
          'darkgreen'            => '006400',
          'darkkhaki'            => 'BDB76B',
          'darkmagenta'          => '8B008B',
          'darkolivegreen'       => '556B2F',
          'darkorange'           => 'FF8C00',
          'darkorchid'           => '9932CC',
          'darkred'              => '8B0000',
          'darksalmon'           => 'E9967A',
          'darkseagreen'         => '8FBC8F',
          'darkslateblue'        => '483D8B',
          'darkslategray'        => '2F4F4F',
          'darkslategrey'        => '2F4F4F',
          'darkturquoise'        => '00CED1',
          'darkviolet'           => '9400D3',
          'deeppink'             => 'FF1493',
          'deepskyblue'          => '00BFFF',
          'dimgray'              => '696969',
          'dimgrey'              => '696969',
          'dodgerblue'           => '1E90FF',
          'firebrick'            => 'B22222',
          'floralwhite'          => 'FFFAF0',
          'forestgreen'          => '228B22',
          'fuchsia'              => 'FF00FF',
          'gainsboro'            => 'DCDCDC',
          'ghostwhite'           => 'F8F8FF',
          'gold'                 => 'FFD700',
          'goldenrod'            => 'DAA520',
          'gray'                 => '808080',
          'grey'                 => '808080',
          'green'                => '008000',
          'greenyellow'          => 'ADFF2F',
          'honeydew'             => 'F0FFF0',
          'hotpink'              => 'FF69B4',
          'indianred'            => 'CD5C5C',
          'indigo'               => '4B0082',
          'ivory'                => 'FFFFF0',
          'khaki'                => 'F0E68C',
          'lavender'             => 'E6E6FA',
          'lavenderblush'        => 'FFF0F5',
          'lawngreen'            => '7CFC00',
          'lemonchiffon'         => 'FFFACD',
          'lightblue'            => 'ADD8E6',
          'lightcoral'           => 'F08080',
          'lightcyan'            => 'E0FFFF',
          'lightgoldenrodyellow' => 'FAFAD2',
          'lightgray'            => 'D3D3D3',
          'lightgrey'            => 'D3D3D3',
          'lightgreen'           => '90EE90',
          'lightpink'            => 'FFB6C1',
          'lightsalmon'          => 'FFA07A',
          'lightseagreen'        => '20B2AA',
          'lightskyblue'         => '87CEFA',
          'lightslategray'       => '778899',
          'lightslategrey'       => '778899',
          'lightsteelblue'       => 'B0C4DE',
          'lightyellow'          => 'FFFFE0',
          'lime'                 => '00FF00',
          'limegreen'            => '32CD32',
          'linen'                => 'FAF0E6',
          'magenta'              => 'FF00FF',
          'maroon'               => '800000',
          'mediumaquamarine'     => '66CDAA',
          'mediumblue'           => '0000CD',
          'mediumorchid'         => 'BA55D3',
          'mediumpurple'         => '9370D8',
          'mediumseagreen'       => '3CB371',
          'mediumslateblue'      => '7B68EE',
          'mediumspringgreen'    => '00FA9A',
          'mediumturquoise'      => '48D1CC',
          'mediumvioletred'      => 'C71585',
          'midnightblue'         => '191970',
          'mintcream'            => 'F5FFFA',
          'mistyrose'            => 'FFE4E1',
          'moccasin'             => 'FFE4B5',
          'navajowhite'          => 'FFDEAD',
          'navy'                 => '000080',
          'oldlace'              => 'FDF5E6',
          'olive'                => '808000',
          'olivedrab'            => '6B8E23',
          'orange'               => 'FFA500',
          'orangered'            => 'FF4500',
          'orchid'               => 'DA70D6',
          'palegoldenrod'        => 'EEE8AA',
          'palegreen'            => '98FB98',
          'paleturquoise'        => 'AFEEEE',
          'palevioletred'        => 'D87093',
          'papayawhip'           => 'FFEFD5',
          'peachpuff'            => 'FFDAB9',
          'peru'                 => 'CD853F',
          'pink'                 => 'FFC0CB',
          'plum'                 => 'DDA0DD',
          'powderblue'           => 'B0E0E6',
          'purple'               => '800080',
          'red'                  => 'FF0000',
          'rosybrown'            => 'BC8F8F',
          'royalblue'            => '4169E1',
          'saddlebrown'          => '8B4513',
          'salmon'               => 'FA8072',
          'sandybrown'           => 'F4A460',
          'seagreen'             => '2E8B57',
          'seashell'             => 'FFF5EE',
          'sienna'               => 'A0522D',
          'silver'               => 'C0C0C0',
          'skyblue'              => '87CEEB',
          'slateblue'            => '6A5ACD',
          'slategray'            => '708090',
          'slategrey'            => '708090',
          'snow'                 => 'FFFAFA',
          'springgreen'          => '00FF7F',
          'steelblue'            => '4682B4',
          'tan'                  => 'D2B48C',
          'teal'                 => '008080',
          'thistle'              => 'D8BFD8',
          'tomato'               => 'FF6347',
          'turquoise'            => '40E0D0',
          'violet'               => 'EE82EE',
          'wheat'                => 'F5DEB3',
          'white'                => 'FFFFFF',
          'whitesmoke'           => 'F5F5F5',
          'yellow'               => 'FFFF00',
          'yellowgreen'          => '9ACD32',
        }
        
        if colour.length > 0 and colour[0] != ?#
          colour.downcase!
          # Convert named colours to their hex values
          colour = '#' + COLOURS[colour] if COLOURS.has_key? colour
        end
        
        print TextMate::UI.request_color(colour)

      :input: selection
6B05627E-6513-4C10-A489-1A09001F8D0D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r, text.sweave
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: setwd
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 6B05627E-6513-4C10-A489-1A09001F8D0D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        M=${TM_SWEAVE_WD:=${TM_DIRECTORY}}
        osascript -e 'tell application "R" to activate' -e "tell application \"R\" to cmd \"setwd('$M')\n\""
      :input: selection
0D814247-7A00-46EE-A2A4-45FBBF4B1181: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add Persistent Include
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :control
        - :super
      :uuid: 0D814247-7A00-46EE-A2A4-45FBBF4B1181
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/tminclude.rb"
        TextMate::Includes.instance.include_command

      :input: none
97054C4D-E4A3-45B1-9C00-B82DBCB30CAD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: word_wrap()
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 97054C4D-E4A3-45B1-9C00-B82DBCB30CAD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: worw
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require "ui"
        TextMate::UI.request_string(:title => "Wrap Size",
                             :prompt => "Enter a character width:",
                            :button1 => "Build Snippet") do |col|
          col = col.to_i
          print %Q{gsub!(/(.{1,#{col}}|\\S{#{col + 1},})(?: +|$\\n?)/, "\\\\1\\n")}
        end

      :input: none
819B19AC-758D-42CB-903F-73A5EDD716BD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 819B19AC-758D-42CB-903F-73A5EDD716BD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_HG" revert "$TM_FILEPATH"
        else
           eval "$TM_HG" revert $TM_SELECTED_FILES
        fi
        
        # will cause current file to be re-loaded
        rescan_project

      :input: none
171DDC95-11B1-4044-80E3-328589A4994A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.s5
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Present
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: 171DDC95-11B1-4044-80E3-328589A4994A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/s5.rb"
        s5 = S5.new(STDIN.readlines.join)
        html = s5.to_html
        slide_anchor = ''
        if s5.current_slide_number
          slide_anchor = "#slide#{s5.current_slide_number}"
        end
        filename = ENV['TM_FILEPATH'].dup
        if (filename =~ /\.s5$/)
          filename.sub!(/\.s5$/, '.html')
        else
          filename += '.html'
        end
        File.open(filename, "w") do | fout |
          fout.print html
        end
        filename.gsub!(/ /, '%20')
        %x{open file://#{filename}#{slide_anchor}}
        exit 200
      :input: document
B0266484-FC3B-412B-8469-F0A8E3092345: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Italic
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :super
      :uuid: B0266484-FC3B-412B-8469-F0A8E3092345
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require 'escape'
        def esc(str)
          e_sn(str).gsub(/\}/, '\\}') # escaping inside a placeholder
        end
        
        s = STDIN.read
        if s.empty? then
          print "*$1*"
        elsif s =~ /^(\*+)(.*[^\*])\*+$/ then
          m, s = $1, $2
          case m.length
            when 1 then print "${1:#{esc s}}"
            when 2 then print "${1:***#{esc s}***}"
            else print "${1:**#{esc s}**}"
          end
        elsif ENV.has_key? 'TM_SELECTED_TEXT'
          print "${1:*#{esc s}*}"
        else
          print "*#{e_sn s}*"
        end
      :input: selection
865D7DE7-A07B-47C1-AEDC-4A88317A0EB1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: AddRemove
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 865D7DE7-A07B-47C1-AEDC-4A88317A0EB1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        $TM_HG add
        $TM_HG remove --after
        
      :input: none
A1DCDF0B-628B-4590-87C0-A551DC1F5F3A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Offline Send Offline Edits
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: A1DCDF0B-628B-4590-87C0-A551DC1F5F3A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        
        # if we have offline edits, send them now (assumes we're actually online again)
        if [[ -e  "$HOME/P4Cache/OfflineEdits.txt" ]]; then
        	"$TM_P4" -x "$HOME/P4Cache/OfflineEdits.txt" edit && rm "$HOME/P4Cache/OfflineEdits.txt"
        fi
        
        # if we have offline adds, send them now (assumes we're actually online again)
        if [ -e  "$HOME/P4Cache/OfflineAdds.txt" ]; then
        	"$TM_P4" -x add "$HOME/P4Cache/OfflineAdds.txt" && rm "$HOME/P4Cache/OfflineAdds.txt"
        fi

      :input: none
A3AF777B-C1D8-4989-9251-7A0D594A407F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.java
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Junit Tests
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: A3AF777B-C1D8-4989-9251-7A0D594A407F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        # Source some support functions we need.
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        . "${TM_SUPPORT_PATH}/lib/webpreview.sh"
        
        
        cd "$TM_DIRECTORY"
        
        html_header "Running Unit Tests for $TM_FILENAME"
        
        echo '<p><strong>Note:</strong> junit.jar must be in your CLASSPATH'
        echo 'See junit.org for downloads and installation</p>'
        echo '<p>This command uses the junit 4 test runner</p>'
        
        javac -encoding UTF8 "$TM_FILENAME" &> >("${TM_RUBY:-ruby}" -rtm_parser -eTextMate.parse_errors)
        if (($? >= 1)); then exit; fi
        
        echo '<pre>'
        testClass=`basename -s .java $TM_FILENAME`
        /usr/bin/java org.junit.runner.JUnitCore $testClass
        echo '</pre>'
      :input: none
7A099026-D785-48D9-ACAD-318ECF2A3BE4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 7A099026-D785-48D9-ACAD-318ECF2A3BE4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2HTML:=rst2html.py}
        require_cmd "$TRST" "You can either set the <tt>TM_RST2HTML</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        
        if [[ -f "$TM_DIRECTORY/default.css" ]]
        	then stylesheet="$TM_DIRECTORY/default.css"
        elif [[ -f "$TM_PROJECT_DIRECTORY/default.css" ]]
        	then stylesheet="$TM_PROJECT_DIRECTORY/default.css"
        else
        	css=`mktemp -t /tmp`
        	echo 'body {	
        		background-color: #eee;
        	}
        	.document {
        		background: white;
        		font-family: Georgia, serif;
        		font-size: 13px;
        		border: 1px #888 solid;
        		padding: 0 1em;
        	}' > $css
        	stylesheet=$css
        	tmpCreated="yes"
        fi
        
        if [[ -n $stylesheet ]]
        	then flags="--embed-stylesheet --stylesheet=$stylesheet"
        	else flags=""
        fi
        
        $TRST $flags "$TM_FILEPATH"
        
        if [[ -n $css ]]
        	then rm $css
        fi
      :input: document
4981F52A-F663-45FC-AE25-EE211E88BA05: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Edit in TextMate URL Associations
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4981F52A-F663-45FC-AE25-EE211E88BA05
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        FILE="$HOME/Library/Preferences/com.macromates.edit_in_textmate.plist"
        [ -e "$FILE" ] || cat <<'PLIST' >"$FILE"; mate "$FILE"
        {
        	URLAssociations = {
        		'mail.google.com/' = 'mail';
        		'macromates.com/blog/' = 'markdown';
        		'blacktree.cocoaforge.com/forums/' = 'bbcode';
        	};
        }
        /*
        	Custom associations used by the Edit in TextMate service when
        	invoked from a WebKit-based browser (e.g. Safari or OmniWeb)
        
        	Provide an URL subset and the extension to use for the temporary
        	file when this subset is found in the URL from the calling
        	applications current page.
        
        	This is to trigger proper syntax highlight.
        	
        	In case of multiple subsets matching the URL, the longest one
        	will win.
        
        */
        PLIST
      :input: none
40318F5D-111F-4451-BBB0-F282DEAC881F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog, text.blog text.html.markdown, text.blog text.plain, text.blog text.html.textile, text.blog text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Category
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 40318F5D-111F-4451-BBB0-F282DEAC881F
      :disable_output_auto_indent: 
      :bundle_uuid: 79741B2E-271D-4CBC-A61A-380C83D36863
      :output: 
      :file_capture_register: 
      :tab_trigger: cat
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -rjcode -Ku\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/progress\"\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes\"\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/escape\"\n\
        require \"#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging\"\n\
        require 'xmlrpc/client'\n\n\
        # fetches available categories (only tested with Wordpress)\n\n\
        def select_from_cats(cats)\n  # the metaWeblog API says the result is a per-category struct containing a\n  # description, but nothing about a categoryName (which e.g. WP will *also*\n  # give us). So we prefer a categoryName, then falls back on description,\n  # though Typo just returns strings instead of structs, so we handle that as\n  # well\n  names = cats.map do |p|\n    if Hash === p && p.has_key?('categoryName')\n      p['categoryName']\n    elsif Hash === p && p.has_key?('description')\n      p['description']\n    else\n      p.to_s\n    end\n  end\n\n  names.sort! { |a, b| a <=> b }\n  names.map! { |p| '\"' + e_as(p) + '\"' }\n\n  res = %x{ iconv <<'APPLESCRIPT' -f utf-8 -t mac|osascript 2>/dev/null\n    tell app \"TextMate\" to \xC2\xAC\n      return choose from list { #{names.join ','} } \xC2\xAC\n        with title \"Categories\" \xC2\xAC\n        with prompt \"Choose categories to insert:\" \xC2\xAC\n        OK button name \"Insert\" \xC2\xAC\n        with multiple selections allowed\n  }.chomp\n\n  TextMate.exit_discard if res == 'false'\n  puts res.gsub(/([^,]+),?\\s*/, \"Category: \\\\1\\n\")\n\
        end # select_cats\n\n\
        cred = Blogging.new\n\
        endpoint = cred.endpoint\n\
        username = cred.username\n\
        password = cred.password\n\
        res = TextMate.call_with_progress(:title => \"Fetch Categories\", :message => \"Contacting Server \xE2\x80\x9C#{cred.host}\xE2\x80\x9D\xE2\x80\xA6\") do\n    cred.client.call(\"metaWeblog.getCategories\", endpoint, username, password)\n\
        end\n\n\
        TextMate.exit_show_tool_tip \"No categories are available!\" if res.nil? || res.empty?\n\
        select_from_cats(res)\n"
      :input: document
D84F2D85-BE10-416A-BD9D-076AE6FDB436: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.prototype
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Scriptaculous Documentation for Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: D84F2D85-BE10-416A-BD9D-076AE6FDB436
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        read sel
        if grep <<<${sel:-!} -Esq '[a-zA-Z0-9_\.]+'
        	then exit_show_html "<meta http-equiv='Refresh' content='0;URLhttp://wiki.script.aculo.us/scriptaculous/search/?page%5Bname%5D=$sel'>"
        	else echo "Nothing to lookup (hint: place the caret on a function name)"
        fi
      :input: selection
6F7E7868-F5A2-4B7D-ACFB-2A8DE2CD04E2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: comment.block.documentation.phpdoc.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Docblock at 80 Characters
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 6F7E7868-F5A2-4B7D-ACFB-2A8DE2CD04E2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        col = ENV['TM_COLUMN_NUMBER'].to_i
        start_col = ENV['TM_CURRENT_LINE'].index('*')
        if col - start_col >= 80
          puts
          print " " * start_col + "*"
        end
        print " "
      :input: none
613CDD87-1F8B-484E-B741-74B95F3C878B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Show History List
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :alt
        - :control
      :uuid: 613CDD87-1F8B-484E-B741-74B95F3C878B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        require ENV['TM_BUNDLE_SUPPORT'] + "/lib/historyList.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/ui.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        doc = STDIN.read
        list = HistoryList.new(doc)
        choice = TextMate::UI.menu(list.list)
        TextMate.exit_discard if choice.nil?
        print e_sn(list.add_line(list.list[choice]))
      :input: selection
F599ACE4-6B59-4235-A2BF-7BABA5C911B7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex.sweave, text.tex.latex.sweave source.r
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Sweave, Typeset & View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: F599ACE4-6B59-4235-A2BF-7BABA5C911B7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "# Source some support functions we need.\n\
        . \"${TM_SUPPORT_PATH}/lib/html.sh\"\n\
        . \"${TM_SUPPORT_PATH}/lib/webpreview.sh\"\n\n\
        # Get the viewer program. Any program (that works with open -a <name>) can be used,\n\
        # except 'html' which is reserved to mean the internal HTML window. This is also the\n\
        # default option.\n\
        V=${TM_LATEX_VIEWER:-html}\n\
        EL=${TM_LATEX_ERRLVL:-1}\n\
        M=${TM_LATEX_MASTER:-$TM_FILEPATH}\n\
        DIR=`dirname \"$M\"`\n\
        FILE=`basename \"${M%.*}\".tex`\n\
        PDF=\"${FILE%.*}.pdf\"\n\
        CWD=\"`pwd`/\"\n\n\
        # Set up TeX compiler, fallback to xelatex if document indicates it\n\
        if grep -Esq '\\\\usepackage{.*(xunicode|fontspec)|program=xelatex' \"$M\"\n\
        \tthen DEF_TEX=xelatex\n\
        \telse DEF_TEX=pdflatex\n\
        fi\n\
        TEX=${TM_LATEX_COMPILER:-$DEF_TEX}\n\n\
        # Add our tex directory to the TEXINPUTS variable so e.g. pdfsync is found (even when the user hasn\xE2\x80\x99t installed it)\n\
        export TEXINPUTS=\"$TM_BUNDLE_SUPPORT/tex//:$(kpsewhich --expand-var '$TEXINPUTS')\"\n\n\
        # Switch to the right directory.\n\
        cd \"$TM_PROJECT_DIRECTORY\"\n\
        cd \"$DIR\"\n\n\
        # Prepare output window.\n\
        html_header 'Sweave, Typeset &amp; View' \"$FILE\"\n\
        echo '<h2>Sweaving\xE2\x80\xA6</h2>'\n\n\
        SW=${TM_SWEAVE_WD:=${TM_DIRECTORY}}\n\
        echo -e \"setwd('$SW')\\nSweave('$TM_FILEPATH')\" | R --vanilla --quiet\n\n\
        # Check if we actually have a tex compiler\n\
        require_cmd \"$TEX\" \"You can either set the <tt>TM_LATEX_COMPILER</tt> variable to the full path of your LaTeX compiler (e.g. <tt>/opt/local/bin/pdflatex</tt> or set the <tt>PATH</tt> variable to include the path of <tt>pdflatex</tt>.\"\n\n\n\
        run_tex () {\n\
        if [ \"$TEX\" != latexmk.pl ]\n\
        \tthen \"$TEX\" ${TM_LATEX_OPTIONS:=-interaction=nonstopmode -file-line-error-style} \"$1\"\n\
        \telse \"$TEX\" -f -r \"${TM_BUNDLE_SUPPORT}/latexmkrc\" \"$1\"\n\
        fi\n\
        }\n\n\
        # Compile.\n\
        run_tex \"$FILE\" 2>&1| latexErrWarnHtml.py -v\n\
        RC=$?\n\n\
        # If there is output and it's newer than the current document, then we go directly to preview or link to it.\n\
        if [ -s \"${PDF}\" -a ! \"$PDF\" -ot \"$FILE\" ]; then\n\
        \tif [[ \"$V\" == html ]]; then\n\
        \t\tWEB_LOC=\"tm-file://${DIR}/${PDF}\"\n\
        \t\tWEB_LOC=\"${WEB_LOC//\\\\#/%23}\"\n\
        \t\tif (($RC > $EL))\n\
        \t\t\tthen link \"${WEB_LOC}\" 'Click Here to Preview'\n\
        \t\t\telse redirect \"${WEB_LOC}\"\n\
        \t\tfi\n\
        \telse\n\
        \t\tV=${V%.app} # strip potential .app extension\n\
        \t\tif find_app >/dev/null \"$V.app\"; then\n\
        \t\t\topen -a \"$V\" \"$PDF\"\n\
        \t\t\tif [[ \"$V\" == TeXniscope && -f \"${PDF}sync\" ]]; then\n\
        \t\t\t\tSCRIPT=$(find_app TeXniscope.app)/Contents/Resources/forward-search.sh\n\
        \t\t\t\t[[ -x \"$SCRIPT\" ]] && \"$SCRIPT\" \"$TM_LINE_NUMBER\" \"$TM_FILEPATH\" \"$PDF\"\n\
        \t\t\tfi\n\
        \t\t\tif (($RC <= $EL)); then exit_discard; fi\n\
        \t\telse\n\
        \t\t\tstrong \"Error locating external viewer: $V\"\n\
        \t\tfi\n\
        \tfi\n\
        else\n\
        \tstrong \"Error: PDF file not written to disk\"\n\
        fi\n\
        html_footer\n"
      :input: none
E73FA01C-7625-11D9-B58C-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert to Latest
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: E73FA01C-7625-11D9-B58C-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_P4:=p4}" revert "$TM_FILEPATH"
        
        # force TM to refresh the current file..
        rescan_project

      :input: none
1FAC4AE2-B00C-11D9-91F2-000D93347A42: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: Line $2 in $1
      :scope: source.python
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveModifiedFiles
      :name: Run Project Unit Tests
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :alt
        - :super
      :uuid: 1FAC4AE2-B00C-11D9-91F2-000D93347A42
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: ^\s*File "(.+)", line (\d+)
      :command: |-
        # Find all files that end with "Test.py" and run 
        # them.
        
        find . -name "*Test.py" -exec "${TM_PYTHON:-python}" '{}' \;|pre
      :input: none
91FC4F89-ADA9-4435-B159-9BA348FDE590: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Send Document (DockSend)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: F
        modifiers: 
        - :control
      :uuid: 91FC4F89-ADA9-4435-B159-9BA348FDE590
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/bin/sh\n\
        osascript \"${TM_BUNDLE_SUPPORT}/send_to_transmit.applescript\" \"$TM_FILEPATH\" &>/dev/console &\n\
        echo \"Sent \xE2\x80\x98${TM_FILENAME}\xE2\x80\x99 to Transmit\"\n"
      :input: none
88754B0F-D8DB-4796-9D02-058B756C606D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc, source.objc++
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Completion: Fallback"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 88754B0F-D8DB-4796-9D02-058B756C606D
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        line = ENV['TM_CURRENT_LINE']
        
        def candidates_or_exit(methodSearch,files)
          candidates = []
          files.each do |name, pure,noArg|
            zGrepped = %x{zgrep ^#{e_sh methodSearch } #{name}}
            candidates += zGrepped.split("\n").map do |elem|
               [elem, pure, noArg]
              end
          end
          TextMate.exit_show_tool_tip "No completion available" if candidates.empty?
          return candidates
        end
        
        def prettify(candidate)
          ca = candidate.split("\t")
          if ca[1]  && ca.size != 2
            ca[0]+ca[1]
          else
           ca[0]
          end
        end
        
        def construct_arg_name(arg)
        	a = arg.match(/(NS|AB|CI|CD)?(Mutable)?(([AEIOQUYi])?[A-Za-z_0-9]+)/)
        	unless a.nil?
        		(a[4].nil? ? "a": "an") + a[3].sub!(/\b\w/) { $&.upcase }
        	else
        		""
        	end
        end
        
        def snippet_generator(cand,s,star,arg_name)
          c = cand.split"\t"
          if c[1] && c.size != 2 && c[1] != ""
            i = 0
            middle = c[1][1..-2].split(",").collect do |arg|
              "${"+(i+=1).to_s+":"+ arg.strip + "}" 
            end.join(", ")
            c[0][s..-1]+"("+middle+")$0"
          else
            name = ""
            if arg_name
              name = "${2:#{construct_arg_name(c[0])}}"
              if star
                name = ("${1:${TM_C_POINTER: *}#{name}}") if star
              else
                name = " " + name
              end
            
            else
              name = (ENV['TM_C_POINTER'] || " *").rstrip if star
            end
          #  name = name[0..-2].rstrip unless arg_name
            e_sn(c[0][s..-1]) + name + "$0"
          end
        end
        
        
        def pop_up(candidates, searchTerm,star,arg_name)
          start = searchTerm.size
          prettyCandidates = candidates.map do |cand|
            [prettify(cand[0]), cand[0],cand[1],cand[2]]
          end.sort
          if prettyCandidates.size > 1
            
            require "enumerator"
            pruneList = []  
        
            prettyCandidates.each_cons(2) do |a| 
              pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
            end
            pruneList << true
            ind = -1
            prettyCandidates = prettyCandidates.select do |a| #remove duplicates
              pruneList[ind+=1]  
            end
          end
          
          if prettyCandidates.size > 1
            #index = start
            #test = false
            #while !test
            #  candidates.each_cons(2) do |a,b|
            #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
            #  end
            #  break if test
            #  searchTerm << candidates[0][index].chr
            #  index +=1
            #end
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            pl = {'menuItems' => prettyCandidates.map { |pretty, full, pure, noArg | { 'title' => pretty, 'cand' => full, 'pure'=> pure, 'noArg'=> noArg} }}
            open("/dev/console", "w") { |io| io << pl.to_plist }
            io = open('|"$DIALOG" -u', "r+")
            io << pl.to_plist
            io.close_write
            res = OSX::PropertyList::load(io.read)
            if res.has_key? 'selectedMenuItem'
              b = {0 => false , 1 => true}
              snippet_generator( res['selectedMenuItem']['cand'], start, star&& !b[res['selectedMenuItem']['pure']],arg_name && !b[res['selectedMenuItem']['noArg']] )
            else
              ""
            end
          else
            snippet_generator( candidates[0][0], start, star && !candidates[0][1], arg_name && !candidates[0][2] )
          end
        end
        
        
        if ENV['TM_INPUT_START_LINE_INDEX']
          caret_placement =ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
        else
          caret_placement =ENV['TM_LINE_INDEX'].to_i - 1
        end
        
        backContext = line[1+caret_placement..-1].match /^[a-zA-Z0-9_]/
        
        if backContext
          TextMate.exit_discard
        end
        
        star = arg_name = false
        if ENV['TM_SCOPE'].include? "meta.protocol-list.objc"
          files = [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaProtocols.txt.gz",false,false]]
        elsif ENV['TM_SCOPE'].include?("meta.scope.implementation.objc") ||  ENV['TM_SCOPE'].include?("meta.interface-or-protocol.objc")
          files = [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz",false,false]]
          files += [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaTypes.txt.gz", true, false]] if ENV['TM_SCOPE'].include?("meta.scope.interface.objc")
          userClasses = ["#{ENV['TM_PROJECT_DIRECTORY']}/.classes.TM_Completions.txt.gz", false,false]
          files += [userClasses] if File.exists? userClasses[0]
          if ENV['TM_SCOPE'].include?("meta.function.objc")
            star = true
            files += [[ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaTypes.txt.gz",true,false]]
          elsif ENV['TM_SCOPE'].include? "meta.scope.implementation.objc"
            star = arg_name = true
            files += [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CLib.txt.gz",false,false],
             [ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaTypes.txt.gz",true,false],
                     ["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaFunctions.txt.gz",false,false]]
            files += [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/C++Lib.txt.gz",false,false]] if ENV['TM_SCOPE'].include? "source.objc++"
          elsif ENV['TM_SCOPE'].include? "meta.scope.interface.objc"
            star = arg_name = true
          end
        else
          star = arg_name = true
          files = [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz",false,false],
                  [ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaConstants.txt.gz",true,true],
                  [ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaTypes.txt.gz",true,false],
                  [ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CLib.txt.gz",false,false],
                  [ "#{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaFunctions.txt.gz",false,false]]
          files += [["#{e_sh ENV['TM_BUNDLE_SUPPORT']}/C++Lib.txt.gz",false,false]] if ENV['TM_SCOPE'].include? "source.objc++"
        end
        alpha_and_caret = /[a-zA-Z_][_a-zA-Z0-9]*\(?$/
        if k = line[0..caret_placement].match(alpha_and_caret)
          candidates = candidates_or_exit(k[0], files)
          res = pop_up(candidates, k[0],star,arg_name)
        else
          res = ""
        end
        print res
      :input: none
AE75286C-FB51-4AD9-A580-9FABEA1E477A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml meta.object
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Method
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: AE75286C-FB51-4AD9-A580-9FABEA1E477A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<SNIPPET
        method ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD} \${1:args} =
        	\$0
        SNIPPET
      :input: selection
71AB34F4-755D-4F16-A45F-93CD88246ED7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: View Man Page
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 71AB34F4-755D-4F16-A45F-93CD88246ED7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        res=$(CocoaDialog inputbox --title "Manual Page" \
            --informative-text "What manual page do you want?" \
            --button1 "Okay" --button2 "Cancel")
        
        [[ $(head -n1 <<<"$res") == "2" ]] && exit_discard
        
        res=$(tail -n1 <<<"$res")
        $("$TM_BUNDLE_SUPPORT/mman"<<<"$res")

      :input: none
CF23FBDC-A1D2-48D6-B21F-EE93D891CE6D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin markup.heading
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Increase Heading Level
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "]"
        modifiers: 
        - :super
      :uuid: CF23FBDC-A1D2-48D6-B21F-EE93D891CE6D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/^(\s*)(={1,4})=(.*)=\2$/$1$2$3$2/'
      :input: selection
14038705-CA2C-4386-8B21-3EEF52A15537: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scilab
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 14038705-CA2C-4386-8B21-3EEF52A15537
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export APP=`find_app Scilab-4.1.app`
        LAUNCHER=$APP/Contents/Resources/launcher.sh
        if [ -x "$LAUNCHER" ]
        then
        	DIRECTORY=`echo "$TM_DIRECTORY" | sed -e "s/'/''/g" -e "s/\"/\"\"/g"`
        	FILEPATH=`echo "$TM_FILEPATH" | sed -e "s/'/''/g" -e "s/\"/\"\"/g"`
        	echo "cd('$DIRECTORY'); exec('$FILEPATH');" > /tmp/scilab.sce
        	$LAUNCHER -f /tmp/scilab.sce
        else
        	echo "Scilab 4.1 not found."
        	echo "Please copy Scilab-4.1.app to the Applications directory."
        fi

      :input: none
B9F3EC5C-B299-11D9-9356-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: B9F3EC5C-B299-11D9-9356-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        eval '"$TM_BUNDLE_SUPPORT/revert_file.rb"' "${TM_SELECTED_FILES:-'$TM_FILEPATH'}"

      :input: none
B4874A14-2491-465A-A349-61E4EBCF4700: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: B4874A14-2491-465A-A349-61E4EBCF4700
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # index created using: curl -s 'http://devguru.com/technologies/javascript/index.asp'|grep -o '<a href="[0-9]*.asp">[a-z][a-zA-Z]*</a>'|perl -pe 's/<a href="([^"]*)">([^<]*)<\/a>/$2\t$1/'|sort|uniq|gzip >dev_guru_index.gz
        
        ref=$(zgrep -w "^${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}" "$TM_BUNDLE_SUPPORT/dev_guru_index.gz"|cut -f2)
        
        [[ -n "$ref" ]] && exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://devguru.com/technologies/javascript/$ref'>"
        
        echo "No documentation found."
      :input: selection
6A931F29-5A2B-4CCB-A958-0A0A9A3F2BEF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Summaries\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: S
        modifiers: 
        - :alt
        - :super
      :uuid: 6A931F29-5A2B-4CCB-A958-0A0A9A3F2BEF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # print "Got:" + STDIN.read
        
        require ENV['TM_SUPPORT_PATH'] +'/lib/ui.rb'
        opts = { "Summary" => "summary(${1:x})", 
                 "Table" => "table(${1:x})"}
        keys = opts.keys.sort
        ans = TextMate::UI.menu(keys)
        TextMate.exit_discard unless ans
        print opts[keys[ans]]
      :input: none
F10674C0-D55D-4EFD-88DE-DC60C3EE6562: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: constant.numeric.ticket.release-notes
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Ticket
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: F10674C0-D55D-4EFD-88DE-DC60C3EE6562
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: open "http://macromates.com/ticket/show?ticket_id=$(cat)"
      :input: selection
63BE6D35-8529-4218-866B-F61C1A877C1B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Search on Apache.org
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 63BE6D35-8529-4218-866B-F61C1A877C1B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: echo "<html><head><meta http-equiv=\"Refresh\" content=\"0; http://search.apache.org/index.cgi?query=$TM_CURRENT_WORD\"></head><body></body></html>"
      :input: none
46C3E5A1-7E04-11D9-AE69-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 46C3E5A1-7E04-11D9-AE69-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 0B296803-7D51-11D9-859D-000D93B6E43C
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env bash\n\n\
        . \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"TODO Bundle Help\" \"TODO\"\n\n\
        \"$TM_SUPPORT_PATH/lib/markdown_to_help.rb\" <<'MARKDOWN'\n\n\
        # Introduction\n\n\
        The \"Show TODO List\" command will scan your current document (on disk) or documents in your project for lines containing certain tags (see below).\n\
        You will be presented with a row of \xE2\x80\x9CTabs\xE2\x80\x9D that are counting matches while the search is going on. Once the search finishes a list for each of the tags and their context is shown. Each entry can be clicked to jump to that line in that file. The lists can be ordered by clicking on their column titles. Clicking on the Tabs will jump to the corresponding list.\n\n\
        TextMate will ignore files whose full path matches the environment variable `TM_TODO_IGNORE`.\n\n\
        Note: This command requires Ruby 1.8\n\n\
        # Tags\n\n\
        Preconfigured tags are:\n\n\
        * <span style=\"color: #A00000;\">FIXME (or FIX ME)</span>\n\
        * <span style=\"color: #CF830D;\">TODO</span>\n\
        * <span style=\"color: #008000;\">CHANGED</span>\n\
        * <span style=\"color: #0090C8;\">RADAR (as &lt;radar://\xE2\x80\xA6&gt; or &lt;rdar://\xE2\x80\xA6&gt;)</span>\n\n\
        Those tags can easily be set up via the <span onClick=\"TextMate.system(&apos;&quot;${TM_RUBY:-ruby}&quot; &quot;$TM_BUNDLE_SUPPORT/lib/settings.rb&quot; &amp;&gt;/dev/null &amp;&apos;, null)\">\xE2\x80\x9CPreferences\xE2\x80\x9D</a> command.\n\n\
        # Hints\n\n\
        * The list can be printed using _Print\xE2\x80\xA6_ (\xE2\x8C\x98P) from the _File_ menu.\n\
        * The Command will abort when the project directory resolves to the root folder.\n\
        * Access keys: `\xE2\x8C\x83` + first letter of the tag (like `\xE2\x8C\x83T` for \xE2\x80\x9CTODO\xE2\x80\x9D) will jump to the respective section.\n\n\
        MARKDOWN\n\n\
        html_footer\n"
      :input: none
6B723007-D4EE-476B-8282-76230C559D5A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.haskell
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Type
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 6B723007-D4EE-476B-8282-76230C559D5A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: haskelltype "${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}"
      :input: none
7EB957A4-A531-11D9-917B-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Test RegExp in First Line
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: x
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 7EB957A4-A531-11D9-917B-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Select a regular expression in your text; this command will show you matches in the rest of your text.
        # First line of input is expected to be a regular
        # expression. If we're doing matching, leave out the /slashes/, eg:
        # (.+)z
        # If we're doing substitution, use slashes to identify the expression as such:
        # /old/new/ 
        # Every line after the first is match fodder, used to test the regexp.
        
        ruby "$TM_BUNDLE_SUPPORT/bin/rx_helper.rb"|pre
      :input: selection
FB412036-2D62-41A3-BDFA-F897933132AA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex meta.data.environment.tabular.latex
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :control
      :uuid: FB412036-2D62-41A3-BDFA-F897933132AA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require 'pp'
        lines = STDIN.read
        s = lines.slice!(/^.*?\}\s*\n/)
        # Place any \hline's not on a line of their own in their own line
        lines.gsub!(/(\\hline\s*)(?!\n)/,"\\hline\\\\\\\\")
        lines = lines.split(/\\\\/)
        data = lines.map do |line|
          line.split(/&/).map{|i| i.strip}
        end
        cols = data.map{|i| i.length}.max
        widths = []
        cols.times do |i|
          widths << data.inject(0) do |maximum,line| if line.length <= i then maximum else [maximum,line[i].length].max end end
        end
        pattern = widths.map{|i| "%#{i}s"}.join(" & ")
        print s.chomp
        prev=false
        for line in data do
          print(prev ? "\\\\\n" : "\n")
          if line.length <= 1 then
            print line
            prev=false
          else
            line.fill("",(line.length+1)..cols)
            printf(pattern,*line)
            prev=true
          end
        end
        print "\n"

      :input: selection
4D4EACBA-CF58-48FF-8CBC-0C93BC88AB11: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt entity.name.tag.mt, text.html.mt variable.other.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Tag
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 4D4EACBA-CF58-48FF-8CBC-0C93BC88AB11
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Context-sensitive help lookup for MT tags.
        if grep <<<${TM_CURRENT_WORD:-!} -Esq '[a-zA-Z0-9_]+'
        	then exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://www.sixapart.com/movabletype/docs/$TM_CURRENT_WORD'>"
        	else echo "Nothing to lookup (hint: place the caret on a tag name)"
        fi
      :input: none
7E7936B6-7334-455B-A5ED-D51CA49CF532: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Completions for Word\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 7E7936B6-7334-455B-A5ED-D51CA49CF532
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -wKU
        require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
        
        if ENV['TM_SELECTED_TEXT'] and ENV['TM_SELECTED_TEXT'].to_s.include?('|')
          require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes.rb"
          ENV['TM_SELECTED_TEXT'].to_s =~ /^(, )?\[?(.+?)\]?$/
          comma = $1.to_s
          choices = $2.split('|')
          choice = TextMate::UI.menu(choices)
          # exit_replace_text is used here since this is expected to be used in the middle of a snippet,
          # and inserting another snippet will break the existing tabstops
          TextMate::exit_replace_text((choice ? comma + choices[choice].strip : ENV['TM_SELECTED_TEXT']).strip)
        end
        
        functions = `grep -i "^$TM_CURRENT_WORD" "$TM_BUNDLE_SUPPORT"/functions.txt`.split("\n")
        
        abort if functions.empty?
        
        if functions.size > 1
          names = functions.map {|e| e[/^.+?(?=%|$)/] }.uniq
          abort unless choice = TextMate::UI.menu(names)
          choice = functions[choice]
        else
          choice = functions.pop
        end
        
        function, prototype, description = choice.split('%')
        
        offset = ENV['TM_CURRENT_WORD'] ? ENV['TM_CURRENT_WORD'].length : 0
        
        print function[offset..-1] + '('
        
        parts = prototype.strip.match(/^\s*(?:([0-9A-Za-z|_]+)\s+)?(\w+)\s*\((.*)\).*$/)
        params = parts[3] rescue ''
        
        tabstop = 0
        print(params.scan(/(\w+ )?([\w.|]+)( = .+)?(\])?,?/).map do |(type, name, default, optional_bracket)|
          snippet = type.to_s + name
          optional = false
          if optional_bracket
            # Optional
            snippet = '[' + snippet + ']'
            optional = true
          elsif default
            # Optional with default
            snippet = '[' + snippet + default
            optional = true
          end
          tabstop += 1
          if tabstop > 1
            if optional
              "${#{tabstop}:, #{snippet}}"
            else
              ", ${#{tabstop}:#{snippet}}"
            end
          else
            "${#{tabstop}:#{snippet}}"
          end
        end.join(''))
        
        print ')$0'
      :input: none
023F99B6-3F0B-4249-96E8-39CF824F1733: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: AppleScript Resources
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 023F99B6-3F0B-4249-96E8-39CF824F1733
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/bin/bash
        
        # A list of useful applescript resources at apple.com
        
        open "http://www.apple.com/applescript/resources/"
        
      :input: none
C1302FC5-FDC8-4560-8DFF-2CEC85EFCD19: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Next History Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
      :uuid: C1302FC5-FDC8-4560-8DFF-2CEC85EFCD19
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        require ENV['TM_BUNDLE_SUPPORT'] + "/lib/historyList.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        doc = STDIN.read
        new_doc = HistoryList.move_down(doc)
        TextMate.exit_discard if new_doc == doc
        print e_sn(new_doc)
      :input: selection
0210BC81-D701-4836-A188-42D9A79F292B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 0210BC81-D701-4836-A188-42D9A79F292B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	hg = ENV['TM_HG'] || "hg"
        	puts %x{#{hg} remove #{TextMate.selected_paths_for_shell}}
        END
      :input: none
BE2B6161-2E23-4C08-B438-409BB1E82DA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Submit Changelist\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: BE2B6161-2E23-4C08-B438-409BB1E82DA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/usr/bin/env ruby -w
        
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT'] + "/lib"
        $LOAD_PATH << ENV['TM_SUPPORT_PATH'] + "/lib"
        
        require 'p4_forms'
        require 'shelltokenize'
        
        p4				= ENV['TM_P4'] || 'p4'
        #commit_paths	= ENV['CommitPaths']
        support			= ENV['TM_SUPPORT_PATH']
        commit_tool		= support + "/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        
        ignore_file_pattern = /(\/.*)*(\/\..*|\.(tmproj|o|pyc)|Icon)/
        
        
        StatusMap = {	'edit' 		=> 'M',
        			'add'		=> 'A',
        			'delete'	=> 'D'}
        	# TODO others probably needed
        		
        output = %x{"#{p4}" change -o}
        puts output
        
        commit_form = Perforce::Form.new(output)
        #puts commit_form.inspect
        
        raw_paths = commit_form.paths_from_entry("Files")
        commit_paths = []
        commit_status = []
        
        raw_paths.each do |path|
        	match = /^(.*)\s#\s(\w*)/.match(path)
        	commit_paths.push(match[1])
        	commit_status.push(match[2])
        end
        		
        # map to CVS-like status for CommitWindow display
        commit_status = commit_status.collect{|status| StatusMap[status]}
        
        commit_paths = commit_paths.collect {|path| path.p4_to_local_path }
        commit_path_text = commit_paths.join_p4_to_local_paths
        
        #puts commit_path_text
        #puts "--------------"
        
        commit_args = %x{"#{commit_tool}" --status #{commit_status.join(":")} #{commit_path_text}}
        #puts commit_args
        #puts "--------------"
        
        commit_tokens = commit_args.tokenize
        
        #puts commit_tokens.inspect
        
        commit_form.fields['Status'] = 'pending'
        commit_form.fields['Description'] = commit_tokens[1]
        commit_form.fields['Files'] = commit_tokens[2...commit_tokens.size].local_to_p4_paths.inject("") {|out, path| out += "#{path}\n" }
        
        
        puts commit_form.to_s
        
        IO.popen(%Q{"#{p4}" submit -i}, "w+" ) {|p| p.puts commit_form.to_s }
        
      :input: none
DC7A2CCA-8301-11D9-9E93-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to OPML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: DC7A2CCA-8301-11D9-9E93-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl "$TM_BUNDLE_SUPPORT/t2o.pl"
      :input: selection
BA9536B4-5A7E-46D2-A268-E0ADAB9782BC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Send Line / Selection to Google Calculator
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: BA9536B4-5A7E-46D2-A268-E0ADAB9782BC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\
        require 'cgi'\n\
        require 'net/http'\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/progress.rb'\n\n\
        query = CGI::escape(STDIN.read)\n\
        abort if query.empty?\n\n\
        TextMate.call_with_progress(:message => 'Querying Google\xE2\x80\xA6') do\n  response = Net::HTTP.get('www.google.com', '/search?q=' + query)\n  if response =~ /<b>.*? = (.*?)<\\/b>/\n    answer = $1\n    answer.gsub!(/<sup>(.+?)<\\/sup>/, '^\\1') # Prefix exponents\n    answer.gsub!(/<.+?>/, '')\n    answer.gsub!('&#215;', '\xC3\x97')\n    answer.gsub!(/(\\d+) (?=\\d{3})/, '\\1,') # Turn 10 000 into 10,000\n    print answer\n  else\n    TextMate.exit_show_tool_tip 'Invalid calculation'\n  end\n\
        end"
      :input: selection
8B98F650-78F7-11D9-B2B4-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript, source.as3
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Find in Actionscript Dictionary
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 8B98F650-78F7-11D9-B2B4-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/Tools/asd.rb\""
      :input: selection
BF01B32B-534E-4886-AA99-69B4C9676BA3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Txt2tags Version
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BF01B32B-534E-4886-AA99-69B4C9676BA3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags --version | sed 's/<.*//'
      :input: none
4C8AB52A-5C88-4786-9FCE-28777DBB02B5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Typewriter
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: k
        modifiers: 
        - :super
      :uuid: 4C8AB52A-5C88-4786-9FCE-28777DBB02B5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require 'escape'
        def esc(str)
          e_sn(str).gsub(/\}/, '\\}') # escaping inside a placeholder
        end
        
        s = STDIN.read
        if s.empty? then
          print "\\`\\`$1\\`\\`"
        elsif s =~ /^\\`(.*)\\`$/ then
          print "${1:#{esc $1}}"
        elsif ENV.has_key? 'TM_SELECTED_TEXT'
          print "${1:\\`\\`#{esc s}\\`\\`}"
        else
          print "\\`\\`#{e_sn s}\\`\\`"
        end
      :input: selection
9029E141-4526-4ED8-95B2-2A4E19BAD402: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Revisions...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
        - :super
      :uuid: 9029E141-4526-4ED8-95B2-2A4E19BAD402
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#\n\
        # $Id: Revisions....plist 3075 2006-04-22 20:20:01Z aparajita $\n\
        #\n\n\
        require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        require_cmd opendiff \"You must install the Apple developer tools to run FileMerge.\"\n\n\
        # See if the current file is under svn control\n\
        FILE=`basename \"$TM_FILEPATH\"`\n\
        INFO_LINES=`svn info \"$FILE\" 2>&1 | grep \"^Path\\: .*\\$\" | wc -l`\n\n\
        if [ $INFO_LINES -eq 0 ]; then\n\
        \techo \"The current file is not under subversion control\"\n\
        \texit_show_tool_tip\n\
        fi\n\n\
        revs=$(\"$TM_SVN\" log -q \"$TM_FILEPATH\"|grep -v '^-*$' \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Diff Revisions\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript <<END\n\
        \tset theResult to false\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No revisions of file '$TM_FILENAME' found\" buttons (\"Continue\") default button 1\n\
        \t\telse\n\
        \t\t\ttell app \"SystemUIServer\" to choose from list (every text item of \"$revs\") with prompt \"Please choose two revisions of '$TM_FILENAME':\" with multiple selections allowed\n\n\
        \t\t\tset theitems to the result\n\
        \t\t\tif theitems is not false then\n\
        \t\t\t\tif the count of items in the theitems is not 2 then\n\
        \t\t\t\t\tdisplay dialog \"Please select exactly two revisions (hold down the Apple key to select multiple revisions).\" buttons (\"Continue\") default button 1\n\
        \t\t\t\telse\n\
        \t\t\t\t\tset theResult to (item 1 of theitems) & return & (item 2 of theitems)\n\
        \t\t\t\tend if\n\
        \t\t\tend if \n\
        \t\tend if\n\
        \t\tset the result to theResult\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\
        revs=`echo -n \"$revs\" | awk -F '|' 'BEGIN { RS=\"\\r\"} { print substr($1, 2) }'`\n\
        revs=( $revs )\n\
        \"$TM_BUNDLE_SUPPORT/bin/filemerge.sh\" ${revs[1]} ${revs[0]}\n"
      :input: none
93A395CC-77E8-11D9-B5A8-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Evaluate Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: 93A395CC-77E8-11D9-B5A8-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: printf " = %s" `{ tr -d ,; echo; } | bc -l`| perl -pe 's/(\.[^0]+)0+$|\.0+$/$1/'
      :input: selection
99D9DBC0-E03E-46B9-9E73-13F58DCDB55B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert to Snippet
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 99D9DBC0-E03E-46B9-9E73-13F58DCDB55B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/bin/convert_to_snippet.rb\""
      :input: selection
6E779E48-F146-49BF-B60C-EFDFD1380772: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: "Paste Line / Selection Online\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :alt
        - :control
      :uuid: 6E779E48-F146-49BF-B60C-EFDFD1380772
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -rjcode -KU\n\n\
        BUNDLE_SUPPORT = ENV['TM_BUNDLE_SUPPORT']\n\
        SUPPORT_PATH = ENV['TM_SUPPORT_PATH']\n\n\
        PASTE_URL = ENV['TM_PASTIE_URL'] || 'http://pastie.textmate.org/pastes/create'\n\n\
        require \"#{BUNDLE_SUPPORT}/lib/doctohtml.rb\"\n\
        require \"#{SUPPORT_PATH}/lib/textmate\"\n\
        require \"#{SUPPORT_PATH}/lib/progress\"\n\
        require \"#{SUPPORT_PATH}/lib/escape\"\n\
        require 'cgi'\n\
        require 'fileutils'\n\
        require 'zlib'\n\
        require \"yaml\"\n\n\
        def temp_script(script)\n  dest = %x{ /usr/bin/mktemp -t tm_paste }.chomp\n  at_exit { File.delete dest }\n  FileUtils.cp(script, dest)\n  dest\n\
        end\n\n\
        # example: [\"Colloquy\", \"#textmate\"] -> [ 2, 1 ]\n\
        def indices_for_names(names, tree)\n  name = names.shift\n  node = tree.find { |n| n[\"name\"] == name }\n  return [ 0 ] if node.nil?\n  res  = [ tree.index(node) ]\n  res += indices_for_names(names, node[\"children\"]) unless names.empty? || node[\"children\"].nil?\n  return res\n\
        end\n\n\
        # example: [ 2, 1 ] -> [\"Colloquy\", \"#textmate\"]\n\
        def names_for_indices(indices, tree)\n  node = tree[indices.shift.to_i]\n  res  = [ node[\"name\"] ]\n  res += names_for_indices(indices, node[\"children\"]) unless indices.empty?\n  return res\n\
        end\n\n\
        PREFS_FILE = \"#{ENV['HOME']}/Library/Preferences/com.macromates.textmate.paste_online.yaml\"\n\n\
        def load_prefs(destinations)\n  prefs = File.open(PREFS_FILE) { |file| YAML.load(file) } rescue { }\n  selected = prefs['selectedDestinations'] || [ [ \"Paste to Colloquy:\", \"#textmate\" ] ]\n  selected.collect! { |names| indices_for_names(names, destinations) }\n  return { 'selectedDestinations' => selected }\n\
        end\n\n\
        def save_prefs(params)\n  selected = params['selectedDestinations'].dup\n  selected.collect! { |indices| names_for_indices(indices.dup, params['destinations']) }\n  File.open(PREFS_FILE, \"w\") { |file| YAML.dump({ 'selectedDestinations' => selected }, file) }\n\
        end\n\n\
        def get_destinations\n  destinations = []\n  node = nil\n\n  actions = %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + \"/get_destinations.scpt\")} }\n  actions.split(\"\\n\").each do |action|\n    if action =~ /^\\t(.+)/ then\n      (node['children'] ||= [ ]) << { 'name' => $1 }\n    else\n      node = { 'name' => action }\n      destinations << node\n    end\n  end\n\n  destinations.sort! { |a, b| a['name'] <=> b['name'] }\n  destinations.each { |e| e['children'].sort! { |a, b| a['name'] <=> b['name'] } if e.has_key? 'children' }\n\n  prefs = load_prefs(destinations)\n\n  window_title = if ENV.has_key? 'TM_SELECTED_TEXT'; 'Paste Selection Online'; else 'Paste Line Online'; end\n  default_wrap = (ENV['TM_SCOPE'] =~ /^text\\./) ? 1 : 0\n  parameters = {\n    'windowTitle'           => window_title,\n    'destinations'          => destinations,\n    'selectedDestinations'  => prefs['selectedDestinations'],\n    'private'               => 0,\n    'lineWrap'              => default_wrap,\n  }.to_plist\n\n  res = %x{ \"$TM_SUPPORT_PATH/bin/tm_dialog\" -cmp #{e_sh parameters} pastebin }\n  exit if $? != 0\n\n  res = OSX::PropertyList.load(res)\n  exit unless res.has_key? 'returnCode'\n\n  save_prefs(res)\n\n  actions = []\n  res['selectedDestinations'].to_a.each do |index_array|\n    path = []\n    node = destinations\n    index_array.each do |index|\n      path << node[index.to_i]['name']\n      node = node[index.to_i]['children']\n    end\n    actions << path.join(' ')\n  end\n\n  [ actions.join(\"\\n\"), res['private'], res['lineWrap'] ]\n\
        end\n\n\
        def find_language_ext\n\
        \tbundle_dirs = [\n\
        \t\tFile.expand_path('~/Library/Application Support/TextMate/Bundles'),\n\
        \t\t'/Library/Application Support/TextMate/Bundles',\n\
        \t\tTextMate.app_path + '/Contents/SharedSupport/Bundles'\n\
        \t]\n\n  if scope = ENV['TM_SCOPE'] then\n    scope = scope.split(' ').first\n    bundle_dirs.each do |dir|\n      Dir.glob(dir + '/*.tmbundle/Syntaxes/*.{plist,tmLanguage}') do |filename|\n        File.open(filename) do |io|\n          begin\n            plist = OSX::PropertyList.load(io)\n            if scope == plist['scopeName'].to_s then\n              return Array(plist['fileTypes']).first || 'txt'\n            end\n          rescue Exception => e\n            abort \"Error while parsing \xE2\x80\x9C#{filename}\xE2\x80\x9D\\n\\n#{e}\"\n          end\n        end\n      end\n    end\n  end\n\n  ext = File.extname(ENV['TM_FILENAME'].to_s).sub(/\\A\\./, '')\n  ext.empty? ? 'txt' : ext\n\
        end\n\n\
        def paste_stdin(priv, wrap)\n  server = $1 if PASTE_URL =~ %r{.*?://(.*?)(/.*)?$}\n  TextMate.call_with_progress(:title => 'Paste to Pastie', :message => \"Contacting Server \xE2\x80\x9C#{server}\xE2\x80\x9D\xE2\x80\xA6\") do\n    text_file, html_file = `/usr/bin/mktemp -t tm_paste && /usr/bin/mktemp -t tm_paste`.split(\"\\n\")\n    at_exit { File.delete(text_file); File.delete(html_file) }\n\n    xml = STDIN.read\n\n    open(text_file, 'w') do |io|\n      io << CGI::unescapeHTML(xml.gsub(/<[^>]*>/, ''))\n    end\n\n    Zlib::GzipWriter.open(html_file) do |gz|\n      gz.write document_to_html(xml)\n    end\n\n    author = ENV['TM_AUTHOR'] || \"#{`dscl . read \"/Users/$USER\" realname|cut -f2 -d:`.strip} (#{ENV['USER']})\"\n    ext = find_language_ext\n\n    %x{\n      curl #{PASTE_URL} \\\n      -s -L -o /dev/null -w \"%{url_effective}\" \\\n      -H \"Expect:\" \\\n      -F \"paste[parser]=plaintext\" \\\n      -F \"paste[restricted]=#{priv}\" \\\n      -F \"paste[wrap]=#{wrap}\" \\\n      -F \"paste[display_name]=#{author}\" \\\n      -F \"paste[file_extension]=#{ext}\" \\\n      -F \"paste[body]=<#{text_file}\" \\\n      -F \"paste[textmate_html_gz]=<#{html_file}\"\n    }\n  end\n\
        end\n\n\
        pid = fork do\n  dests, priv, wrap = get_destinations\n  unless dests.empty?\n    url = paste_stdin(priv, wrap)\n    if url == PASTE_URL  # pastie error--something went wrong\n      puts \"Server Error:  Your paste could not be made at this time.  \" +\n           \"Please wait a moment and try again.\"\n    else\n      %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + \"/paste_to_destinations.scpt\")} #{e_sh url} #{e_sh dests} }\n      puts \"Pasted #{url}\"\n    end\n  end\n\
        end\n\n\
        Process.detach(pid)\n"
      :input: selection
42E26C97-72AB-4953-807F-645AF7EDF59F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css meta.property-list -meta.property-value, source.css meta.property-value punctuation.separator.key-value
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: CodeCompletion CSS Properties
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 42E26C97-72AB-4953-807F-645AF7EDF59F
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        TextmateCodeCompletion.plist('Property Completions')

      :input: selection
5F0E6093-660C-4018-B664-4264FFA4BDE1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Bold
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 5F0E6093-660C-4018-B664-4264FFA4BDE1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: toggle_style.rb -style=textbf
      :input: selection
8FDBC987-A543-11D9-B374-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Test RegExp in Clipboard
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: x
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 8FDBC987-A543-11D9-B374-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # put a regular expression on the clipboard and select text to be searched. Output is your document with all matches highlighted.
        # add a -x before the -c to omit nonmatching lines.
        # Replace `pbpaste` with a regexp string if you don't like copying first.
        # You can replace or reorder the color list with any html-okay colors or #ffffff values.
        
        echo "<html><head></head><body>"
        echo "<h3>Results for /`pbpaste`/</h3><tt>"
        
        "$TM_BUNDLE_SUPPORT/bin/hl.pl" -c "Red","Dark Blue","Dark Purple","Brown","Burgundy","Forest Green","Yellow","Pastel Green","Light Purple","Pink","Turquoise","Light Blue","Dark Grey","Orange","Grass Green" "`pbpaste`"
        
        echo "</tt></body></html>"
      :input: selection
365F0868-308E-44BC-8781-2B65CBF48B74: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php.cake
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Lookup in API
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: /
        modifiers: 
        - :alt
        - :control
      :uuid: 365F0868-308E-44BC-8781-2B65CBF48B74
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<HTML
          <html><head><meta http-equiv="Refresh" content="0; URL=http://api.cakephp.org/search.php?query=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}"></head><body></body></html>
        HTML
      :input: none
B0869DF4-B5E2-48A5-8550-5BABE67F6D25: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Browse
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: B0869DF4-B5E2-48A5-8550-5BABE67F6D25
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TM_RUBY="${TM_RUBY:=ruby}"
        SUPPORT_PATH=${TM_BUNDLE_SUPPORT:="$TM_BUNDLE_PATH/Support"}
        BROWSER="${SUPPORT_PATH}/browser.rb"
        
        $TM_RUBY "$BROWSER" "${TM_PROJECT_DIRECTORY:-TM_DIRECTORY}" "$SUPPORT_PATH"
      :input: none
443BBF21-6124-4486-BFCA-D18606465885: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Current Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 443BBF21-6124-4486-BFCA-D18606465885
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        # set up TM_FIRST_LINE containing the first line of the script.
        read first_line
        0<&- # close STDIN
        export TM_FIRST_LINE="$first_line"
        
        export PYTHONPATH="$TM_BUNDLE_SUPPORT/DocMate"
        export PYTHONPATH="$TM_SUPPORT_PATH/lib:$PYTHONPATH"
        
        /usr/bin/python2.3 -S - <<PYTHON
        # coding: UTF-8
        import sys
        from sys import exit
        
        import tm_helpers
        import webpreview
        import docmate
        import dialog
        
        docmate.launch_pydoc_server()
        
        # get current dotted word from the env
        word = tm_helpers.current_word(r"[A-Za-z0-9_\.]*")
        
        if not word:
            print "<meta http-equiv='Refresh' content='0;URL=%s'>" % docmate.pydoc_url()[0]
        else:
            library_docs = docmate.library_docs(word)
            local_docs = docmate.local_docs(word)
            if library_docs:
                print webpreview.html_header("DocMate", "Python")
                print "<h3>Python Library Documentation</h3>\n"
                print "<ol style='list-style-type: lower-alpha;'>\n"
                for n, opt in enumerate(library_docs):
                    desc, url = opt
                    accesskey = chr(ord("a") + n)
                    print '\t<li><a href="%s" accesskey="%s">%s</a></li>\n' % (url, accesskey, desc)
                print "</ol>\n"
            if local_docs and library_docs:
                print "<h3>Pydoc Documentation</h3>"
                print "<ol style='list-style-type: decimal;'>\n"
                for n, opt in enumerate(local_docs):
                    desc, url = opt
                    accesskey = chr(ord("1") + n)
                    print '\t<li><a href="%s" accesskey="%s">%s</a></li>\n' % (url, accesskey, desc)
                print "</ol>\n"
                print webpreview.html_footer()
            elif local_docs and not library_docs:
                print "<meta http-equiv='Refresh' content='0;URL=%s'>" % local_docs[0][1]
        PYTHON
        
        
      :input: document
8E5BEE2D-01D5-455A-A576-044DCC1243AA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.setext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Title
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8E5BEE2D-01D5-455A-A576-044DCC1243AA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: "="
      :capture_pattern: 
      :command: head -n$((TM_LINE_NUMBER-1))|tail -n1|sed 's/./=/g'|tail -c +$((TM_LINE_INDEX+1))
      :input: document
481BD550-B156-4FA0-B14C-265BF74EFBFE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 481BD550-B156-4FA0-B14C-265BF74EFBFE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        Markdown.pl <<'EOF'
        
        # reStructeredText (2005-09-21)
        ## What is it
        Docutils is an open-source text processing system for processing plaintext documentation into useful formats, such as HTML or LaTeX. It includes reStructuredText, the easy to read, easy to use, what-you-see-is-what-you-get plaintext markup language.
        
        ## Requirements
        To install using Mac Ports:
        
            sudo port install py-docutils
        
        ## Syntax
        Information about RST can be found [here](http://docutils.sourceforge.net/rst.html)
        
        ## Using it
        This bundle includes the standard text processing commands: Preview, Preview in Browser, Convert Document to HTML (in place), and Validate.
        
        EOF
      :input: none
B3E6DCF7-6323-4229-94D7-59996BDF07EC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex meta.include
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Included Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: B3E6DCF7-6323-4229-94D7-59996BDF07EC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        ${TM_RUBY:-ruby} <<"RUBY"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape.rb"
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/options"
        
        master = LaTeX.master(ENV['TM_LATEX_MASTER'] || ENV['TM_FILEPATH'])
        
        Dir.chdir(File.dirname(master)) unless master.nil?
        
        input = ENV['TM_SELECTED_TEXT'] || ENV['TM_CURRENT_LINE']
        options = input.scan(/\\(?:include|input|includegraphics|lstinputlisting)(?:%.*\n[ \t]*)?(?>\[.*?\])?(?:%.*\n[ \t]*)?(?>\{(.*?)\})/m)
        if options.empty?
        	print "Did not find any appropriate item to open in #{ENV['TM_SELECTED_TEXT'] ? "selection" : "current line" }"
        else
          options[0].each{|el| el.gsub!(/(^\")?(\"$)?/, '')} 
          filepath = `kpsewhich #{e_sh options[0]}`.chomp
          if filepath.empty?
            print "Could not locate file for path `#{options[0]}'"
          else
            `open #{e_sh filepath}`
          end
        end
        RUBY

      :input: selection
C1EC9501-B96E-4E6E-8F0A-2BECF19D0F30: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.s5, source.s5 text.html.markdown
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Convert to HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: C1EC9501-B96E-4E6E-8F0A-2BECF19D0F30
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/s5.rb"
        print S5.new(STDIN.readlines.join).to_html
      :input: document
BF303CAC-FF2B-4299-8F2B-C84FE64B5146: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.lua
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: BF303CAC-FF2B-4299-8F2B-C84FE64B5146
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ": ${TM_LUA:=lua}\n\
        require_cmd \"$TM_LUA\"\n\
        \"$TM_LUA\" \"$TM_FILEPATH\"|pre"
      :input: none
DB16585F-4D78-412B-B468-38AD54C254B5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc - string - comment, source.objc++ - string - comment
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Matching Start Bracket
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "]"
        modifiers: []

      :uuid: DB16585F-4D78-412B-B468-38AD54C254B5
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        
        class Lexer
          include Enumerable
          def initialize
            @label   = nil
            @pattern = nil
            @handler = nil
            @input   = nil
            
            reset
            
            yield self if block_given?
          end
          
          def input(&reader)
            if @input.is_a? self.class
              @input.input(&reader)
            else
              class << reader
                alias_method :next, :call
              end
              
              @input = reader
            end
          end
          
          def add_token(label, pattern, &handler)
            unless @label.nil?
              @input = clone
            end
            
            @label   = label
            @pattern = /(#{pattern})/
            @handler = handler || lambda { |label, match| [label, match] }
            
            reset
          end
          
          def next(peek = false)
            while @tokens.empty? and not @finished
              new_input = @input.next
              if new_input.nil? or new_input.is_a? String
                @buffer    += new_input unless new_input.nil?
                new_tokens =  @buffer.split(@pattern)
                while new_tokens.size > 2 or (new_input.nil? and not new_tokens.empty?)
                  @tokens << new_tokens.shift
                  @tokens << @handler[@label, new_tokens.shift] unless new_tokens.empty?
                end
                @buffer   = new_tokens.join
                @finished = true if new_input.nil?
              else
                separator, new_token = @buffer.split(@pattern)
                new_token            = @handler[@label, new_token] unless new_token.nil?
                @tokens.push( *[ separator,
                                 new_token,
                                 new_input ].select { |t| not t.nil? and t != "" } )
                reset(:buffer)
              end
            end
            peek ? @tokens.first : @tokens.shift
          end
          
          def peek
            self.next(true)
          end
          
          def each
            while token = self.next
              yield token
            end
          end
          
          private
          
          def reset(*attrs)
            @buffer   = String.new if attrs.empty? or attrs.include? :buffer
            @tokens   = Array.new  if attrs.empty? or attrs.include? :tokens
            @finished = false      if attrs.empty? or attrs.include? :finished
          end
        end
        
        
        class ObjcParser
        	
        	attr_reader :list
          def initialize(args)
            @list = args
          end
          
          def get_position
            return nil,nil if @list.empty?
        	has_message = true
        
            a = @list.pop
            endings = [:close,:post_op,:at_string,:at_selector,:identifier]
        openings = [:open,:return,:control]
            if a.tt == :identifier && !@list.empty? && endings.include?(@list[-1].tt)
              insert_point = find_object_start
            else
              @list << a
        	has_message = false unless methodList
              insert_point = find_object_start
            end
        return insert_point, has_message
          end
          
          def methodList
            	old = Array.new(@list)
        
            a = selector_loop(@list)
            if !a.nil? && a.tt == :selector
              if file_contains_selector? a.text
                return true
              else
                internal = Array.new(@list)
                b = a.text
                until internal.empty?
                  tmp = selector_loop(internal)
                  return true if tmp.nil?
                  b = tmp.text + b
                  if file_contains_selector? b
                    @list = internal
                    return true
                  end
                end
              end
        	else
            end
        @list = old
        return false
          end
          
          def file_contains_selector?(methodName)
            fileNames = ["#{ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz"]
            userMethods = "#{ENV['TM_PROJECT_DIRECTORY']}/.methods.TM_Completions.txt.gz"
        
            fileNames += [userMethods] if File.exists? userMethods
            candidates = []
            fileNames.each do |fileName|
              zGrepped = %x{zgrep ^#{e_sh methodName }[[:space:]] #{e_sh fileName }}
              candidates += zGrepped.split("\n")
            end
        
            return !candidates.empty?
          end
          
          def selector_loop(l)
            until l.empty?
              obj = l.pop
              case obj.tt
              when :selector
                return obj
              when :close
                return nil if match_bracket(obj.text,l).nil?
              when :open
                return nil
              end
            end
            return nil
          end
          
          def match_bracket(type,l)
            partner = {"]"=>"[",")"=>"(","}"=>"{"}[type]
            up = 1
            until l.empty?
              obj = l.pop
              case obj.text
              when type
                up +=1
              when partner
                up -=1
              end
              return obj.beg if up == 0
            end
          end
          
          def find_object_start
            openings = [:operator,:selector,:open,:return,:control]
            until @list.empty? || openings.include?(@list[-1].tt)
              obj = @list.pop
              case obj.tt
              when :close
                tmp = match_bracket(obj.text, @list)
                b = tmp unless tmp.nil?
              when :star
                b, ate = eat_star(b,obj.beg)
                return b unless ate
              when :nil
                b = nil
              else
                b = obj.beg
              end
            end
            return b
          end
        
          def eat_star(prev, curr)
            openings = [:operator,:selector,:open,:return,:control,:star]
            if @list.empty? || openings.include?(@list[-1].tt)
              return curr, true
            else
              return prev, false
            end
          end
        end
        
        if __FILE__ == $PROGRAM_NAME
          require "stringio"
          line = ENV['TM_CURRENT_LINE']
          caret_placement =ENV['TM_LINE_INDEX'].to_i - 1
        
          up = 0
          pat = /"(?:\\.|[^"\\])*"|\[|\]/
            line.scan(pat).each do |item|
               case item
               when "["
                 up+=1
               when "]"
                 up -=1
               end
             end
          if caret_placement ==-1
            print "]$0" + e_sn(line[caret_placement+1..-1])
            TextMate.exit_insert_snippet
          end
        
          if  up != 0 
            print e_sn(line[0..caret_placement])+"]$0"+e_sn(line[caret_placement+1..-1])
            TextMate.exit_insert_snippet
          end
          
          to_parse = StringIO.new(line[0..caret_placement])
          lexer = Lexer.new do |l|
            l.add_token(:return,  /\breturn\b/)
            l.add_token(:nil, /\bnil\b/)
            l.add_token(:control, /\b(?:if|while|for|do)(?:\s*)\(/)# /\bif|while|for|do(?:\s*)\(/)
            l.add_token(:at_string, /"(?:\\.|[^"\\])*"/)
            l.add_token(:selector, /\b[A-Za-z_0-9]+:/)
            l.add_token(:identifier, /\b[A-Za-z_0-9]+\b/)
            l.add_token(:bind, /(?:->)|\./)
            l.add_token(:post_op, /\+\+|\-\-/)
            l.add_token(:at, /@/)
            l.add_token(:star, /\*/)
            l.add_token(:close, /\)|\]|\}/)
            l.add_token(:open, /\(|\[|\{/)
            l.add_token(:operator,   /[&-+\/=%:\,\?;<>\|\~\^]/)
        
            l.add_token(:terminator, /;\n*|\n+/)
            l.add_token(:whitespace, /\s+/)
            l.add_token(:unknown,    /./) 
            
            l.input { to_parse.gets }
            #l.input {STDIN.read}
          end
        
          offset = 0
          tokenList = []
          A = Struct.new(:tt, :text, :beg)
        
          lexer.each do |token| 
            tokenList << A.new(*(token<<offset)) unless [:whitespace,:terminator].include? token[0]
            offset +=token[1].length
          end
          if tokenList.empty?
            print e_sn(line[0..caret_placement])+"]$0"+e_sn(line[caret_placement+1..-1])
            TextMate.exit_insert_snippet
          end
          
          par = ObjcParser.new(tokenList)
          b, has_message = par.get_position
        
          if !line[caret_placement+1].nil? && line[caret_placement+1].chr == "]"
            if b.nil? || par.list.empty? || par.list[-1].text == "["
        			print e_sn(line[0..caret_placement])+"]$0"+e_sn(line[caret_placement+2..-1])
            	TextMate.exit_insert_snippet
        		end
          end
        
          if b.nil?
            print e_sn(line[0..caret_placement])+"]$0"+e_sn(line[caret_placement+1..-1])
          elsif !has_message && (b < caret_placement )
            print e_sn(line[0..b-1]) unless b == 0
            ins = (/\s/ =~ line[caret_placement].chr ? "$0]" : " $0]")
            print "[" +e_sn(line[b..caret_placement]) + ins +e_sn(line[caret_placement+1..-1])
          elsif b < caret_placement    
            print e_sn(line[0..b-1]) unless b == 0
            print "[" +e_sn(line[b..caret_placement]) +"]$0"+e_sn(line[caret_placement+1..-1]) 
          else
            print e_sn(line[0..caret_placement])+"]$0"+e_sn(line[caret_placement+1..-1])
          end
        end

      :input: selection
65C64E73-D308-4251-9837-A3A040D5704B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: markup.quote
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Quoted Text
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 65C64E73-D308-4251-9837-A3A040D5704B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd par
        
        PARINIT="rTbgqR B=.,?!_A_a Q=_s>|+" par
      :input: selection
4B8C62A1-82C3-40C6-9595-4546EE8B2CA0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 4B8C62A1-82C3-40C6-9595-4546EE8B2CA0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        html_header "Txt2tags Preview"
        txt2tags -t html -i- -o-
        html_footer

      :input: document
56BE2092-806D-11D9-A0FB-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Info
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 56BE2092-806D-11D9-A0FB-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        : ${TM_RUBY:=ruby}
        FORMAT_INFO="${TM_BUNDLE_SUPPORT}/format_info.rb"
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_SVN" info "$TM_FILEPATH" 2>&1 \
           |"$TM_RUBY" -- "$FORMAT_INFO"
        else
           eval "$TM_SVN" info "$TM_SELECTED_FILES" 2>&1 \
           |"$TM_RUBY" -- "$FORMAT_INFO"
        fi
      :input: none
1C9B5F32-759D-4B3E-BA91-A83897C48026: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Record All
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 1C9B5F32-759D-4B3E-BA91-A83897C48026
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "${TM_PROJECT_DIRECTORY:=$TM_DIRECTORY}";
        
        "${TM_RUBY:=ruby}" <<'EOF'
        output = `CocoaDialog inputbox --title Input --informative-text 'Record Message' --button1 Record --button2 'Abort'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        output = `darcs record -a -m '#{output[1].strip.gsub(/(')/, '\\\\1')}'`
        
        puts(output)
      :input: none
C4517F03-DB1A-434E-BF29-F13DA337B20F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Declaration to Implementation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: u
        modifiers: 
        - :super
      :uuid: C4517F03-DB1A-434E-BF29-F13DA337B20F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Converts method declarations to their
        # out-of-class-declaration implementations.
        #
        # Could be applied to bunch of methods in
        # selection.
        
        ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/declaration_to_implementation.rb"
      :input: selection
3010E2A8-6E4F-11D9-A18D-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Sort Lines & Remove Duplicates
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          iA==

        modifiers: []

      :uuid: 3010E2A8-6E4F-11D9-A18D-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: sort -f|uniq
      :input: selection
FE31CF79-5F04-4FB6-B5CE-70BC781FF8B5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Syntax Cheat Sheet
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: FE31CF79-5F04-4FB6-B5CE-70BC781FF8B5
      :disable_output_auto_indent: 
      :bundle_uuid: D99E8C0C-792F-11D9-A212-000D93B3A10E
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Markdown Cheat Sheet"
        Markdown.pl "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer
      :input: none
B297E4B8-A8FF-49CE-B9C4-6D4911724D43: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby string.quoted, source.ruby constant.other.symbol.ruby
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle String / Symbol
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: ":"
        modifiers: 
        - :control
      :uuid: B297E4B8-A8FF-49CE-B9C4-6D4911724D43
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        print case str = STDIN.read
          # Handle standard quotes
          when /\A["'](\w+)["']\z/: ":" + $1
          when /\A:(\w+)\z/: '"' + $1 + '"'
          # Default case
          else str
        end

      :input: selection
31F1A06C-0990-4BD7-8E63-D65E7BCD485D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 31F1A06C-0990-4BD7-8E63-D65E7BCD485D
      :disable_output_auto_indent: 
      :bundle_uuid: D619CB94-53ED-41C5-963B-401492CE2602
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"XCode Help\" \"XCode\"\n\n\
        Markdown.pl <<'EOF'\n\
        This bundle contains a set of useful commands for Xcode users.\n\n\
        Several of the commands will use your Xcode project file and will try to find this by first checking the root folder of your project (`TM_PROJECT_DIRECTORY`) searching for a project with the extensions `xcodeproj`, `xcode`, or `pbproj`. If nothing is found, the folder of the currently open file (`TM_DIRECTORY`) will be checked, and then the parent and ancestor folders of this (until the project file is found).\n\n\
        Normally it should work out-of-the-box when dragging the folder containing your Xcode project and sources to TextMate. But if you have an atypical setup, you may need to explicitly set the project file, see Settings below for details.\n\n\
        ## Commands\n\n\
        *   __Build & Run__ (&#x2318;R)\n\n    First do a normal build. If that succeeds, run the target and display console output.\n\n\
        *   __Build__ (&#x2318;B)\n\n    Build the project using [`xcodebuild`](http://developer.apple.com/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html) with the active build configuration and show the result pretty-printed and with potential source references shown as clickable links.\n\n    A sample will be played based on the success/failure of the build. See Settings below for how to disable this.\n\n\
        *   __Run__ (&#x21E7;&#x2318;R)\n\n    Scan the project file for a target of type _application_ or _tool_ and run it.\n    \n    For _application_ targets, TextMate will use the [`open`](http://developer.apple.com/documentation/Darwin/Reference/ManPages/man1/open.1.html) command to run the application. This means that output is sent to the shared console log, which is viewable by <a href=\"javascript:TextMate.system('open -a Console.app', null)\">launching the Console utility</a>.\n\n    For _tool_ targets, TextMate will use the Terminal application to run the tool.\n\n    The `DYLD_FRAMEWORK_PATH` and `DYLD_LIBRARY_PATH` environment variables are set to the targets folder before running the target.\n\n    If the project has multiple _tool_ and _application_ targets, the command will currently show an error (rather than pick the active).\n\n\
        *   __Run Tests__\n\n\
        \tScan the project file for a unit test target and run it.\n\n\
        *   __Clean__\n\n    This will clear the target (done by running `xcodebuild clean` with the project and active build configuration as arguments).\n\n\
        *   __New Project Using Xcode Template\xE2\x80\xA6__\n\n\
        \tCreates a new Xcode project from one of Xcode's templates.\n\n\
        *   __Open Project in Xcode\xE2\x80\xA6__\n\n\
        \tIf&mdash;using the same heuristics as the Run command&mdash;an Xcode project can be found, open it in Xcode.\n\n\
        *   __Import Project\xE2\x80\xA6__\n\n    Asks you for an Xcode project, and will then create (and open) a TextMate project that mimics the groups and files present in that project.\n\n\
        *   __Import Frontmost Project__\n\n    Create a TextMate project with groups and files like the frontmost project which is open in Xcode.\n    \n\
        ## Settings\n\n\
        *   `TM_XCODE_PROJECT`\n\n    If your file structure is so that TextMate can't automatically find your Xcode project, then you can set this environment variable to the full path of the project file.\n    \n    It makes the most sense to set this as a project specific variable (as opposed to a global variable). This is done by deselecting everything in the project drawer and then clicking the small circled I button in the lower right corner of the drawer.\n\n\
        *   `TM_MUTE`\n\n    If you do not like the samples being played after a build, you can set this variable to 1. This can be done in Preferences &#x2192; Advanced &#x2192; Shell Variables.\n\n\
        ## Credits\n\n\
        Majority of work done by Chris Thomas. Additional work by Allan Odgaard with support from Mark Rowe and Rob Rix.\n\n\
        EOF\n\n\
        html_footer"
      :input: none
0823F607-CC45-4AB7-A869-36DF8ED662A7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: AppleScript Terminology / Event Codes
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 0823F607-CC45-4AB7-A869-36DF8ED662A7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/bin/bash
        
        # a list of all built-in terms, their types, and the associated event codes.
        
        open "http://developer.apple.com/releasenotes/AppleScript/ASTerminology_AppleEventCodes/TermsAndCodes.html"

      :input: none
40D3C674-40A1-42A1-847A-FBEAE6E83CCC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Tests
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :alt
        - :super
      :uuid: 40D3C674-40A1-42A1-847A-FBEAE6E83CCC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export TM_TARGET=Test
        "${TM_BUNDLE_SUPPORT}/bin/run_xcodebuild.sh"

      :input: none
BDBB15A4-2824-4BEC-93A5-7475F9C46A39: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.rails.model, meta.rails.helper
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Unit Test
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: BDBB15A4-2824-4BEC-93A5-7475F9C46A39
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" unit_test
      :input: none
BB66B370-D68B-4AFA-A228-C28F34E2AED2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: View Document as HTML
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BB66B370-D68B-4AFA-A228-C28F34E2AED2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cat <<"HTML"
        <style type="text/css">
           body {
              font-family: "Bitstream Vera Sans Mono", "Monaco", monospace;
           }
           .comment {
              font-style: italic;
              color: #AAA;
           }
           .keyword {
              font-weight: bold;
           }
           .string {
              color: #00F;
           }
           .entity {
              text-decoration: underline;
           }
           .storage {
              color: #888;
           }
           .support {
              color: #0F0;
           }
           .constant, .variable {
              color: #F0F;
           }
        </style>
        <body>
        <div style="white-space: pre; -khtml-line-break: after-white-space;">
        HTML
        
        perl -pe 's/<\/[^>]+>/<\/span>/g' \
        | perl -pe 's/<([^\/.>]+)[^>]*>/<span class="$1">/g' \
        | perl -pe 's/\t/&nbsp;&nbsp;&nbsp;/g'

      :input: selection
55235037-C23A-4B8D-8ECD-9ED5737DD0D5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Complete vals
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 55235037-C23A-4B8D-8ECD-9ED5737DD0D5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/ocamlcompletion"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        $contents = $stdin.read
        $line = ENV['TM_CURRENT_LINE']
        $linepos = ENV['TM_LINE_INDEX'].to_i
        
        
        class Array
          def map_i(&block)
            accum = []
            self.each_index do |i|
              accum << yield(i, self[i])
            end
            accum
          end
        end
        
        
        def extract_module_from_line
          if $line == "" then return ['',/^/] end
        
          accum = []
          start = [($linepos - 1), 0].max
            
          start.downto(0) do |i|
            if $line[i].chr !~ /[A-Za-z_.]/
              break
            end
            accum << $line[i].chr
          end
          
          full = accum.reverse.join
          if full[-1] == '.' || full.strip.length == 0
            [full.chomp('.'), /^/]
          else
            matches = /^(.*?)\.([^.]*)$/.match(full)
            if matches
              [matches[1].to_s, /^#{Regexp.escape(matches[2].to_s)}/]
            else
              ["", /^#{Regexp.escape(full)}/]
            end
          end
        end
        
        
        def convert_to_snippet(str, stripregex)
          matches = /^(\S+)\s+:\s+(.*)$/.match(str)
          funname = matches[1]
          args = []
          depth = 0
          last = 'a'
          token = []
          matches[2].each_byte do |b|
            c = b.chr
            case c
            when '('
              token << c
              depth += 1
            when ')'
              token << c
              depth -= 1
            when '>'
              if last == '-' and depth == 0
                args << (token.join.chomp('-').strip + ' ->')
                token = []
              else
                token << c
              end
            else
              token << c
            end
            last = c
          end
          args[-1] = args[-1][/^(.*) ->$/, 1]
          i = 2
          args = args.map do |a| 
            a.strip!    
            i += 1
            if a =~ /^\S+:/
              if a =~ /^\?/
                i += 1 
                "\$\{#{i - 1}:~#{a[/^\S+:/]}\$\{#{i}:#{e_sn(a[/:(.*)$/, 1])}\}}"
              else
                "~#{a[/^\S+:/]}\$\{#{i}:#{e_sn(a[/:(.*)$/, 1])}\}" 
              end
            else
              "\$\{#{i}:#{e_sn(a)}\}" 
            end
          end
          snippet = "#{funname} ${1:#{args.join(' ')}}".sub(stripregex, '')
          
          snippet
        end
        
        
        begin
          openmodules = OCamlCompletion.open_modules($contents)
          modulename, regex = extract_module_from_line
          modules = if modulename == '' then nil else [modulename] end
          possible_completions = OCamlCompletion::cmigrep(regex.source, :values, modules, openmodules).split(/\n/).select { |l| l =~ /^val\s+/ }.sort.uniq
          possible_completions = possible_completions.map do |c|
            chash = Hash.new
            chash['completion'] = c[/^val\s+(.*)/, 1]
              
            chash
          end
        
          plist = Hash.new
          plist['possibleCompletions'] = possible_completions
        
          cio = IO.popen("'#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog' -m '#{ENV['TM_BUNDLE_SUPPORT']}/nibs/CompletionsWindow.nib' | pl", 'r+')
          cio.puts(plist.to_plist)
          cio.close_write
          choice = OSX::PropertyList.load(cio.read)
          if !choice['returnButton'] || choice['returnButton'] != 'Cancel'
            selection = choice['result']['returnArgument'].to_i
            snippettxt = plist['possibleCompletions'][selection]['completion']
            print convert_to_snippet(snippettxt, regex)
          else
            print ""
          end
        rescue
          print ""
        end
      :input: document
970BA294-B667-11D9-8D53-00039369B986: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Keyboard Shortcuts
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: k
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 970BA294-B667-11D9-8D53-00039369B986
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_RUBY:=ruby}\" -- \"${TM_BUNDLE_SUPPORT}/bin/list_shortcuts.rb\""
      :input: none
931DD73E-615E-476E-9B0D-8341023AE730: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby comment
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Bold
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 931DD73E-615E-476E-9B0D-8341023AE730
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        s = STDIN.read
        case s
        when /^\w+$/
          print "*#{s}*$0"
        when ""
          print "*$1*$0"
        else
          print "<b>#{s}</b>"
        end
      :input: selection
DA0A5984-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $0
      :scope: source.java, text.xml
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveModifiedFiles
      :name: Ant
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: DA0A5984-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: ^(.*?):([0-9]+):.*
      :command: |+
        cd "$TM_DIRECTORY"
        export JAVA_HOME=${TM_JAVA_HOME:-/System/Library/Frameworks/JavaVM.framework/Home}
        ant -s build.xml 2>&1 | "$TM_BUNDLE_SUPPORT/bin/htmlize_ant.py" 
        
      :input: none
E29C9E3B-B7FB-4ED1-94C3-2F702CD090B5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Previous Revision (PREV)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: E29C9E3B-B7FB-4ED1-94C3-2F702CD090B5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'cvs_diff'
        
        CVS::diff_active_file(:prev, "Diff With Previous Revision")
        END

      :input: none
919889A9-590B-45CD-AEA2-CFC3452B16C7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.context-free
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Render
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 919889A9-590B-45CD-AEA2-CFC3452B16C7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Compile \xE2\x80\x9C${TM_FILENAME}\xE2\x80\x9D\" \"Context Free\"\n\n\
        SIZE=400\n\
        RES=\"/tmp/tm_cfdg_${TM_FILENAME%.*}.png\"\n\n\
        cfdg -s $SIZE \"$TM_FILEPATH\" \"$RES\"|pre\n\n\
        if [[ -e \"$RES\" ]]; then\n  echo \"<img src='tm-file://${RES// /%20}' width='$SIZE' height='$SIZE'>\"\n  { sleep 20; rm -f \"$RES\"; } &>/dev/null &\n\
        fi\n\n\
        html_footer\n"
      :input: none
54CDB56E-85EA-11D9-B369-000A95E13C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Terminal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: O
        modifiers: 
        - :control
      :uuid: 54CDB56E-85EA-11D9-B369-000A95E13C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        
        def find_directory
          files = [ ENV['TM_SELECTED_FILE'], ENV['TM_FILEPATH'], ENV['TM_DIRECTORY'] ]
          res = files.find { |file| file && File.exists?(file) }
          res && File.file?(res) ? File.split(res).first : res
        end
        
        def is_running(process)
          all = `ps -U "$USER" -o ucomm`
          all.to_a[1..-1].find { |cmd| process == cmd.strip }
        end
        
        def terminal_script(dir)
          return <<-APPLESCRIPT
            tell application "Terminal"
              activate
              do script "cd #{e_as(e_sh(dir))}; clear; pwd"
            end tell
        APPLESCRIPT
        end
        
        def iterm_script(dir)
          return <<-APPLESCRIPT
            tell application "iTerm"
              activate
              if exists the first terminal then
                set myterm to the first terminal
              else
                set myterm to (make new terminal)
              end if
              tell myterm
                activate current session
                launch session "Default Session"
                tell the last session
                  write text "cd #{e_as(e_sh(dir))}; clear; pwd"
                end tell
              end tell
            end tell
        APPLESCRIPT
        end
        
        if dir = find_directory
          script = nil
          if ENV['TM_TERMINAL'] =~ /^iterm$/i || is_running('iTerm')
            script = iterm_script(dir)
          else
            script = terminal_script(dir)
          end
          open("|osascript", "w") { |io| io << script }
        end

      :input: none
1717B5AE-209B-4548-9155-9E88A7230C1C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Method
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: 
        - :alt
      :uuid: 1717B5AE-209B-4548-9155-9E88A7230C1C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<SNIPPET
        ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}: function(\${1:args}) {
        	\$0
        }\${2:,}
        SNIPPET
      :input: selection
D2F7F545-5149-47B9-AC62-DBDC6ACAB9BB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert TODO List
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: D2F7F545-5149-47B9-AC62-DBDC6ACAB9BB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: todo
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        
        10.times do |n|
          start = ENV["TM_COMMENT_START#{"_#{n}" if n > 0}"].to_s.strip
          stop  = ENV["TM_COMMENT_END#{"_#{n}"   if n > 0}"].to_s.strip
          unless start.empty? || stop.empty?
            print "#{e_sn start}\n\tTODO $0\n#{e_sn stop}"
            exit
          end
        end
        
        fallback = ENV['TM_COMMENT_START'].to_s.strip
        print "#{e_sn fallback.sub(/.$/, '\\0 ')}TODO "

      :input: none
FCAAFD28-1765-4618-851D-20AA52499F77: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Process Actions From Inbox File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "="
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: FCAAFD28-1765-4618-851D-20AA52499F77
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        ####  NOT VERY MUCH TESTED  ####
        ####      USE WITH CARE     ####
        "$TM_BUNDLE_SUPPORT/bin/process_inbox.rb"

      :input: none
A1D725D0-E28F-491C-8776-C6FAF0A89DF7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Strip Matching Lines
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A1D725D0-E28F-491C-8776-C6FAF0A89DF7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # we seem to have to provide the full path
        # here... which is a pain. Some shell guru
        # can no doubt explain why.
        output = `'#{ENV['TM_SUPPORT_PATH']}/bin/CocoaDialog.app/Contents/MacOS/CocoaDialog' inputbox --title "Strip Matching Lines" --informative-text 'Regular Expression' --button1 'Strip' --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	$stdin.each_line() { |l| $stdout.write l }
        	exit;
        end
        
        re = Regexp.new(output[1])
        $stdin.each_line() do |line|
        	print line if !re.match(line)
        end

      :input: selection
E7E68111-54E4-4C01-8DBA-9D9FFD38FF2C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Interactive Shell
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: E7E68111-54E4-4C01-8DBA-9D9FFD38FF2C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # Start a new shell if needed, otherwise show the one with the right name.
        export SHELL_NAME=${SHELL_NAME:="TextMate Shell"}
        "$TM_BUNDLE_SUPPORT/new.sh"

      :input: none
EA5073FF-4ABB-44FA-95E3-6CB4B8818106: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.antlr, source.antlr source.java
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Build
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: EA5073FF-4ABB-44FA-95E3-6CB4B8818106
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        TM_JAVA=$(which "${TM_JAVA:-java}")
        TM_ANTLR="${TM_ANTLR:-org.antlr.Tool}"
        
        cd "$TM_DIRECTORY"
        
        # for this to work you need to set CLASSPATH to
        # include antlr v3, v2, and StringTemplate jars
        # or set TM_ANTLR to include a proper -classpath
        "$TM_JAVA" $TM_ANTLR "$TM_FILENAME"

      :input: none
17B22F8D-8631-4E3A-A1A2-CECD17F95320: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Open Installed Script\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: g
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 17B22F8D-8631-4E3A-A1A2-CECD17F95320
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.open_installed_script
      :input: none
068FA312-303F-42E0-9BC7-EA6CA4324A7C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Run Doxgen
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 068FA312-303F-42E0-9BC7-EA6CA4324A7C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        ~/Applications/Development/Doxygen.app/Contents/Resources/doxygen $TM_PROJECT_DIRECTORY/$PATH_TO_DOXYGEN

      :input: none
04046396-4FB2-11DB-ADD3-00112474B8F0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.nemerle
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Compile Library
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 04046396-4FB2-11DB-ADD3-00112474B8F0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Compile Library" "Nemerle"
        require_cmd ncc
        
        ncc -t:library "$TM_FILEPATH" -o "$TM_FILEPATH".dll
      :input: document
9F8B60D0-0535-4B92-8A02-A5AF47BE5306: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Working Copy (BASE)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
        - :super
      :uuid: 9F8B60D0-0535-4B92-8A02-A5AF47BE5306
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #
        # $Id: Working Copy (BASE).plist 3075 2006-04-22 20:20:01Z aparajita $
        #
        
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd opendiff "You must install the Apple developer tools to run FileMerge."
        
        # See if the current file is under svn control
        FILE=`basename "$TM_FILEPATH"`
        INFO_LINES=`svn info "$FILE" 2>&1 | grep "^Path\: .*\$" | wc -l`
        
        if [ $INFO_LINES -eq 0 ]; then
        	echo "The current file is not under subversion control"
        	exit_show_tool_tip
        fi
        
        "$TM_BUNDLE_SUPPORT/bin/filemerge.sh" BASE -

      :input: none
45F92B81-6F0E-11D9-A1E4-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $3
      :scope: text.html
      :fallback_input: 
      :line_capture_register: "1"
      :before_running_command: nop
      :name: Tidy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 45F92B81-6F0E-11D9-A1E4-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: line (\d+) column (\d+) - (.*?)$
      :command: |-
        "${TM_TIDY:-tidy}" -f /dev/null -iq -utf8 \
            -wrap 0 --tab-size $TM_TAB_SIZE --indent-spaces $TM_TAB_SIZE \
            ${TM_SELECTED_TEXT:+--show-body-only yes} \
            ${TM_XHTML:+-asxhtml} \
            --doctype strict \
            --enclose-text yes \
            --tidy-mark no|\
        if [[ "$TM_SOFT_TABS" == "YES" ]]; then cat; else ruby -pe '
        
        	unless $in_pre
        		tab_size = ENV["TM_TAB_SIZE"].to_i
        		space, text = /( *)(.*)/m.match($_)[1..2]
        		$_ = "\t" * (space.length / tab_size).floor +
        		     " "  * (space.length % tab_size) + text
        	end
        
        	$in_pre = true	if(/<pre>/)
        	$in_pre = false	if(/<\/pre>/)
        	'
        fi
      :input: selection
73E356A1-87CF-4B8E-A4B5-B14F29683F12: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "New Project Using Xcode Template\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 73E356A1-87CF-4B8E-A4B5-B14F29683F12
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -wKU\n\n\
        TEMPLATES = '/Library/Application Support/Apple/Developer Tools/Project Templates'\n\
        SUPPORT   = ENV['TM_SUPPORT_PATH']\n\
        DIALOG    = ENV['DIALOG']\n\
        MATE      = \"#{SUPPORT}/bin/mate\"\n\n\
        require \"#{SUPPORT}/lib/osx/plist\"\n\
        require \"#{SUPPORT}/lib/escape\"\n\n\
        require \"cgi\"\n\
        require \"fileutils\"\n\
        require \"find\"\n\
        require \"iconv\"\n\n\
        module ProcessTemplate\n  module_function\n  \n  def expand(str, variables)\n    str.gsub(/\xC2\xAB(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)\xC2\xBB/) do |match|\n      variables[$1]\n    end\n  end\n\n  def expand_file(file, variables)\n    data = IO.read(file)\n\n    open(file, \"w\") do |io|\n      if data[0..1] == \"\\xFE\\xFF\"\n        new_data = expand(Iconv.conv('utf-8', 'utf-16', data), variables)\n        io << Iconv.conv('utf-16', 'utf-8', new_data)\n      elsif mac_roman?(data)\n        io << expand(Iconv.conv('utf-8', 'mac', data), variables)\n      elsif utf8?(data)\n        io << expand(data, variables)\n      else\n        io << data # we probably should not have opened the file for writing\n      end\n    end\n  end\n\n  def mac_roman?(data)\n    data =~ /\\xC7(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)\\xC8/\n  end\n\n  def utf8?(data)\n    data =~ /\xC2\xAB(DATE|FULLUSERNAME|ORGANIZATIONNAME|PRODUCTNAME|PROJECTNAMEASIDENTIFIER|PROJECTNAMEASXML|PROJECTNAME|TARGETNAMEASIDENTIFIER|USERNAME|UUID|YEAR)\xC2\xBB/\n  end\n\n  def process(dir, name)\n    variables = {\n      'DATE'                      => Time.now.strftime('%F'),\n      'FULLUSERNAME'              => `dscl . read \"/Users/$USER\" realname|cut -f2 -d:`.strip,\n      'ORGANIZATIONNAME'          => ENV['TM_ORGANIZATION_NAME'],\n      'PRODUCTNAME'               => name,\n      'PROJECTNAMEASIDENTIFIER'   => name.gsub(/[^a-zA-Z0-9]/, '_'),\n      'PROJECTNAMEASXML'          => CGI.escapeHTML(name),\n      'PROJECTNAME'               => name,\n      'TARGETNAMEASIDENTIFIER'    => name.gsub(/[^a-zA-Z0-9]/, '_'),\n      'USERNAME'                  => ENV['LOGNAME'],\n      'UUID'                      => `uuidgen`.chomp,\n      'YEAR'                      => Time.now.year,\n    }\n\n    template_info = Find.find(dir) { |path| break path if path =~ /\\/TemplateInfo.plist$/ }\n    exit unless File.exist? template_info.to_s\n\n    data = File.read(template_info)\n    data = Iconv.conv('utf-8', 'mac', data) if mac_roman? data\n\n    plist = OSX::PropertyList.load(data)\n\n    plist['FilesToRename'].each_pair do |key, value|\n      from = File.join(dir, expand(key, variables))\n      to = File.join(dir, expand(value, variables))\n      FileUtils.mv(from, to) if File.exist?(from) && !File.exist?(to)\n    end\n\n    src_dir = File.split(template_info).first\n    Dir.glob(\"#{src_dir}/*.*\").each do |file|\n      expand_file(file, variables)\n    end\n\n    dst_dir = src_dir.sub(/(.*\\/)[^\\/]*(\\.[^.])/, \"\\\\1#{name}\\\\2\")\n    File.delete(template_info)\n    FileUtils.mv(src_dir, dst_dir) if File.exist?(src_dir) && !File.exist?(dst_dir)\n\n    plist['FilesToMacroExpand'].each do |file|\n      variables['FILENAME'] = file\n      expand_file(File.join(dir, expand(file, variables)), variables)\n    end\n  end\n\
        end\n\n\
        def scan_dir(dir)\n  entries = [ ]\n  Dir.foreach(dir) do |entry|\n    next if entry =~ /^\\./\n    entries << { 'name' => entry, 'path' => File.join(dir, entry) }\n  end\n  entries \n\
        end\n\n\
        templates = [ ]\n\n\
        Dir.foreach(TEMPLATES) do |dir|\n  next if dir =~ /^\\./\n  templates << { 'name' => dir, 'children' => scan_dir(File.join(TEMPLATES, dir)) }\n\
        end\n\n\
        plist = { 'templates' => templates, 'projectName' => 'untitled' }.to_plist\n\
        defaults = { 'Xcode New Project Location'          => '~/',\n             'Xcode New Project Selected Template' => [ [ 1, 6 ] ] }.to_plist\n\n\
        if res = OSX::PropertyList.load(%x{ #{e_sh DIALOG} -cmp #{e_sh plist} -d #{e_sh defaults} 'New Project' })['result']\n\n  src = res['returnArgument']\n\n  dir = File.expand_path(res['location'])\n  dst = File.join(dir, res['name'])\n  \n  abort \"Location does not exist.\"    unless File.exists?(dir)\n  abort \"Destination already exists.\" if File.exists?(dst)\n\n  FileUtils.cp_r(src, dst)\n  ProcessTemplate.process(dst, res['name'])\n  %x{ #{e_sh MATE} #{e_sh dst} &>/dev/null & }\n\n\
        end\n"
      :input: none
43C9E8AE-3E53-4B82-A1AF-56697BB3EF09: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: character
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Character / Selection to Entities Excl. Tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 43C9E8AE-3E53-4B82-A1AF-56697BB3EF09
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $KCODE = 'U'
        
        $char_to_entity = { }
        File.open("#{ENV['TM_BUNDLE_SUPPORT']}/entities.txt").read.scan(/^(\d+)\t(.+)$/) do |key, value|
          $char_to_entity[[key.to_i].pack('U')] = value
        end
        
        def encode (text)
          text.gsub(/[^\x00-\x7F]|["'<>&]/) do |ch|
            ent = $char_to_entity[ch]
            ent ? "&#{ent};" : sprintf("&#x%02X;", ch.unpack("U")[0])
          end
        end
        
        STDIN.read.scan(/(?x)
        
            ( <\?(?:[^?]*|\?(?!>))*\?>
            | <!-- (?m:.*?) -->
            | <\/? (?i:a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dfn|dir|div|dl|dt|em|fieldset|font|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var)\b
                (?:[^>"']|"[^"]*"|'[^']*')*
              >
            | &(?:[a-zA-Z0-9]+|\#[0-9]+|\#x[0-9a-fA-F]+);
            )
            |([^<&]+|[<&])
        
          /x) do |tag, text|
          print tag.to_s, encode(text.to_s)
        end

      :input: selection
4C05FB6C-AA32-4217-8788-D840D49E82CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run BibTeX
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4C05FB6C-AA32-4217-8788-D840D49E82CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # just to remind you of some useful environment variables
        # see Help / Shell Variables for the full list
        M=${TM_LATEX_MASTER:=$TM_FILEPATH}
        DIR=`dirname "$M"`
        FILE=`basename -s.tex "$M"`
        PDF="${FILE%.tex}.pdf"
        CWD="`pwd`/"
        
        # Switch to the right directory.
        cd "$TM_PROJECT_DIRECTORY"
        cd "$DIR"
        
        bibtex "$FILE"|pre

      :input: none
09E7930D-E706-4C90-B37E-5B95E1D97949: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Line/Selection as Python
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
      :uuid: 09E7930D-E706-4C90-B37E-5B95E1D97949
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/usr/bin/env python
        
        import os
        from sys import stdout, stdin, exit
        from traceback import format_stack
        
        py = stdin.read()
        
        if 'TM_SELECTED_SCOPE' in os.environ:
            stdout.write(" ")
        else:
            stdout.write("\n")
        
        try:
            scope = {}
            result = eval(py, globals(), scope)
        except:
            exc = format_stack()
            stdout.write(exc)
            exit(206) # exiting with this code show's output in a tooltip 
        else:
            stdout.write(repr(result))
        
      :input: selection
DA0A5E1E-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Send to Affrus
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: DA0A5E1E-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: open -a Affrus "$TM_FILEPATH"
      :input: none
41A8F343-48CB-482E-A395-34C31CE9A5AB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.gri
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Gri and View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 41A8F343-48CB-482E-A395-34C31CE9A5AB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # Run Gri, convert the PostScript to PDF, and then show the latter.
        # The code is patterned on that for the "LaTeX and view" command.
        # GPL 2005 Dan Kelley.
        # (I hope it's OK to GPL something in TM!)
        
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        
        # The comment and line below are copied from the "LaTeX and view" command.
        # Get the viewer program. Any program (that works with open -a <name>) can be used,
        # except 'html' which is reserved to mean the internal HTML window. This is also the
        # default option.
        V=${TM_LATEX_VIEWER:=html}
        
        GRI=gri
        DIR=`dirname "$TM_FILEPATH"`
        FILE=`basename "$TM_FILEPATH"`
        PSFILE=`basename "$FILE" .gri`.ps
        PDFFILE=`basename "$FILE" .gri`.pdf
        CWD="`pwd`/"
        TOPDF="epstopdf"
        
        # Switch to the right directory.
        cd "$TM_PROJECT_DIRECTORY"
        cd "$DIR"
        
        # Prepare output window.
        htmlHeader "Running Gri on file ${FILE}"
        echo "<h1>Running Gri on ${FILE}...</h1>";
        
        # Function to close window if the error level is low enough.
        close() {
        	if (($RC == 0)); then closeWindow; fi
        }
        
        
        # Compile. Bail out on errors.
        echo "gri -output ${DIR}/${PSFILE} ${TM_FILEPATH}";
        echo "<BR>";
        gri -output "${DIR}/${PSFILE}" "${TM_FILEPATH}";
        RC=$?
        if (($RC != 0)); then exit; fi
        echo "${TOPDF} ${DIR}/$PSFILE ${DIR}/$PDFFILE";
        echo "<BR>";
        ${TOPDF} "${DIR}/$PSFILE" > "${DIR}/$PDFFILE";
        
        # View...
        if [ "$V" == html ]; then
        	if [ -s "${PDFFILE}" ]; then
        		WEB_LOC="tm-file://${DIR}/${PDFFILE}"
        		if (($RC != 0)); then
        			link "${WEB_LOC}" 'Click Here to Preview'
        		else
        			redirect "${WEB_LOC}"
        		fi
        	else
        		strong "Error: PDF file not written to disk"
        	fi
        	htmlFooter
        else
        	echo "HUH?<br>"
        	open -a "$V" "${DIR}/${PDFFILE}"
        	close
        fi

      :input: none
C3045596-791D-11D9-9130-000A95766570: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Line / Selection as Query
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Q
        modifiers: 
        - :control
      :uuid: C3045596-791D-11D9-9130-000A95766570
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        query=${TM_SELECTED_TEXT:-$TM_CURRENT_LINE}
        
        db_browser.rb --query="$query"
      :input: selection
EA15C388-6EB3-4650-B958-EE43A4A7320B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: "Upload to Userscripts.org\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: u
        modifiers: 
        - :super
      :uuid: EA15C388-6EB3-4650-B958-EE43A4A7320B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.upload_to_userscripts
      :input: document
2684F52C-663F-47F3-8320-C8FCB71E276F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 2684F52C-663F-47F3-8320-C8FCB71E276F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/html.sh"
        
        if [[ -z $TM_FILENAME ]]
          then title="Textile as HTML"
          else title="${TM_FILENAME%.*} as HTML"
        fi
        
        htmlHeader "$title" '<style type="text/css">
        	body {	
        		background-color: #eee;
        	}
        	.contents {	
        		background: white;
        		font-family: Verdena, sans-serif;
        		font-size: 13px;
        		border: 1px #888 solid;
        		padding: 0 1em;
        	}
        	</style>'
        beginTag div 'contents'
        	"$TM_SUPPORT_PATH/bin/Textile.rb"
        endTag
        htmlFooter
      :input: document
351451DE-C1A4-4A36-A563-99AF761D026B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Generate Output and Open in Browser
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: 351451DE-C1A4-4A36-A563-99AF761D026B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        MultiMarkdown.pl|SmartyPants.pl > "${TM_DIRECTORY:-/tmp}"/output.html
        open "${TM_DIRECTORY:-/tmp}"/output.html
      :input: selection
A60EB1AE-66C8-4791-940B-6601635A7899: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff Revisions...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: A60EB1AE-66C8-4791-940B-6601635A7899
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        if [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\n\
        fi\n\n\
        revs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Diff Revisions\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript <<END\n\
        \tset theResult to false\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No revisions of file '$TM_FILENAME' found\" buttons (\"Continue\") default button 1\n\
        \t\telse\n\
        \t\t\ttell app \"SystemUIServer\" to choose from list (every text item of \"$revs\") with prompt \"Please choose two revisions of '$TM_FILENAME':\" with multiple selections allowed\n\n\
        \t\t\tset theitems to the result\n\
        \t\t\tif theitems is not false then\n\
        \t\t\t\tif the count of items in the theitems is less than 2 then\n\
        \t\t\t\t\tdisplay dialog \"Please select two revisions (hold down the shift key to select multiple revisions).\" buttons (\"Continue\") default button 1\n\
        \t\t\t\telse\n\
        \t\t\t\t\tset theResult to (item 1 of theitems) & return & (item 2 of theitems)\n\
        \t\t\t\tend if\n\
        \t\t\tend if \n\
        \t\tend if\n\
        \t\tset the result to theResult\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\n\
        revs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\n\
        revs=( $revs )\n\n\n\n\
        rev1=${revs[0]#r}\n\
        rev2=${revs[1]#r}\n\n\
        \"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\
        \trequire 'hg_diff'\n\
        \tMercurial::diff_active_file(\"-r$rev2 -r$rev1\", \"Diff Revisions\xE2\x80\xA6\")\n\
        END\n"
      :input: none
637CEA2B-578C-429C-BB74-30E8D42BFA22: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, entity.name.tag
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Tag
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 637CEA2B-578C-429C-BB74-30E8D42BFA22
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        #
        # Lookup current word as a tag name on w3c.org
        #
        # The mapping below was generated using:
        # echo "$tags = {"; curl -s http://www.w3.org/TR/html4/index/elements.html|grep '<td title="Name"><a href=".*">.*</a></td>'|perl -pe 's|<td title="Name"><a href="(.*?)">(.*?)</a></td>|\t"$2"\t=> "$1",|'; echo "}"
        
        $tags = {
        	"A"	=> "../struct/links.html#edef-A",
        	"ABBR"	=> "../struct/text.html#edef-ABBR",
        	"ACRONYM"	=> "../struct/text.html#edef-ACRONYM",
        	"ADDRESS"	=> "../struct/global.html#edef-ADDRESS",
        	"APPLET"	=> "../struct/objects.html#edef-APPLET",
        	"AREA"	=> "../struct/objects.html#edef-AREA",
        	"B"	=> "../present/graphics.html#edef-B",
        	"BASE"	=> "../struct/links.html#edef-BASE",
        	"BDO"	=> "../struct/dirlang.html#edef-BDO",
        	"BIG"	=> "../present/graphics.html#edef-BIG",
        	"BODY"	=> "../struct/global.html#edef-BODY",
        	"BR"	=> "../struct/text.html#edef-BR",
        	"BUTTON"	=> "../interact/forms.html#edef-BUTTON",
        	"CAPTION"	=> "../struct/tables.html#edef-CAPTION",
        	"CENTER"	=> "../present/graphics.html#edef-CENTER",
        	"CITE"	=> "../struct/text.html#edef-CITE",
        	"CODE"	=> "../struct/text.html#edef-CODE",
        	"COL"	=> "../struct/tables.html#edef-COL",
        	"COLGROUP"	=> "../struct/tables.html#edef-COLGROUP",
        	"DD"	=> "../struct/lists.html#edef-DD",
        	"DEL"	=> "../struct/text.html#edef-del",
        	"DFN"	=> "../struct/text.html#edef-DFN",
        	"DIR"	=> "../struct/lists.html#edef-DIR",
        	"DIV"	=> "../struct/global.html#edef-DIV",
        	"DL"	=> "../struct/lists.html#edef-DL",
        	"DT"	=> "../struct/lists.html#edef-DT",
        	"EM"	=> "../struct/text.html#edef-EM",
        	"FONT"	=> "../present/graphics.html#edef-FONT",
        	"FORM"	=> "../interact/forms.html#edef-FORM",
        	"FRAME"	=> "../present/frames.html#edef-FRAME",
        	"H1"	=> "../struct/global.html#edef-H1",
        	"H2"	=> "../struct/global.html#edef-H2",
        	"H3"	=> "../struct/global.html#edef-H3",
        	"H4"	=> "../struct/global.html#edef-H4",
        	"H5"	=> "../struct/global.html#edef-H5",
        	"H6"	=> "../struct/global.html#edef-H6",
        	"HEAD"	=> "../struct/global.html#edef-HEAD",
        	"HR"	=> "../present/graphics.html#edef-HR",
        	"HTML"	=> "../struct/global.html#edef-HTML",
        	"I"	=> "../present/graphics.html#edef-I",
        	"IFRAME"	=> "../present/frames.html#edef-IFRAME",
        	"IMG"	=> "../struct/objects.html#edef-IMG",
        	"INPUT"	=> "../interact/forms.html#edef-INPUT",
        	"INS"	=> "../struct/text.html#edef-ins",
        	"ISINDEX"	=> "../interact/forms.html#edef-ISINDEX",
        	"KBD"	=> "../struct/text.html#edef-KBD",
        	"LABEL"	=> "../interact/forms.html#edef-LABEL",
        	"LEGEND"	=> "../interact/forms.html#edef-LEGEND",
        	"LI"	=> "../struct/lists.html#edef-LI",
        	"LINK"	=> "../struct/links.html#edef-LINK",
        	"MAP"	=> "../struct/objects.html#edef-MAP",
        	"MENU"	=> "../struct/lists.html#edef-MENU",
        	"META"	=> "../struct/global.html#edef-META",
        	"OBJECT"	=> "../struct/objects.html#edef-OBJECT",
        	"OL"	=> "../struct/lists.html#edef-OL",
        	"OPTION"	=> "../interact/forms.html#edef-OPTION",
        	"P"	=> "../struct/text.html#edef-P",
        	"PARAM"	=> "../struct/objects.html#edef-PARAM",
        	"PRE"	=> "../struct/text.html#edef-PRE",
        	"Q"	=> "../struct/text.html#edef-Q",
        	"S"	=> "../present/graphics.html#edef-S",
        	"SAMP"	=> "../struct/text.html#edef-SAMP",
        	"SCRIPT"	=> "../interact/scripts.html#edef-SCRIPT",
        	"SELECT"	=> "../interact/forms.html#edef-SELECT",
        	"SMALL"	=> "../present/graphics.html#edef-SMALL",
        	"SPAN"	=> "../struct/global.html#edef-SPAN",
        	"STRIKE"	=> "../present/graphics.html#edef-STRIKE",
        	"STRONG"	=> "../struct/text.html#edef-STRONG",
        	"STYLE"	=> "../present/styles.html#edef-STYLE",
        	"SUB"	=> "../struct/text.html#edef-SUB",
        	"SUP"	=> "../struct/text.html#edef-SUP",
        	"TABLE"	=> "../struct/tables.html#edef-TABLE",
        	"TBODY"	=> "../struct/tables.html#edef-TBODY",
        	"TD"	=> "../struct/tables.html#edef-TD",
        	"TFOOT"	=> "../struct/tables.html#edef-TFOOT",
        	"TH"	=> "../struct/tables.html#edef-TH",
        	"THEAD"	=> "../struct/tables.html#edef-THEAD",
        	"TITLE"	=> "../struct/global.html#edef-TITLE",
        	"TR"	=> "../struct/tables.html#edef-TR",
        	"TT"	=> "../present/graphics.html#edef-TT",
        	"U"	=> "../present/graphics.html#edef-U",
        	"UL"	=> "../struct/lists.html#edef-UL",
        	"VAR"	=> "../struct/text.html#edef-VAR",
        }
        
        def request_tag_name (default_tag = "body")
          res, tag = %x{ "$TM_SUPPORT_PATH/bin/CocoaDialog.app/Contents/MacOS/CocoaDialog" \
            inputbox --float --title 'Documentation for Tag' \
            --informative-text 'What tag would you like to lookup?' \
            --text '#{default_tag}' --button1 'Lookup' --button2 'Cancel' \
            --button3 'Show All Tags'
          }.split("\n")
          case res.to_i
            when 1 then $tags[tag.to_s.upcase] || "elements.html"
            when 2 then abort "<script>window.close()</script>"
            when 3 then "elements.html"
          end
        end
        
        line, col = ENV["TM_CURRENT_LINE"].to_s, ENV["TM_LINE_INDEX"].to_i
        tag = line =~ /\A.{0,#{col}}<\s*(\w+)/ ? $1 : ENV["TM_CURRENT_WORD"].to_s
        
        path = $tags[tag.upcase] || request_tag_name(tag)
        url  = "http://www.w3.org/TR/html4/index/" + path
        puts "<meta http-equiv='Refresh' content='0;URL=#{url}'>"

      :input: none
C3C8F3A3-C90E-4DA3-8AB3-DB7BDA73355C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Command \xE2\x80\x94 \\command{\xE2\x80\xA6}"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
      :uuid: C3C8F3A3-C90E-4DA3-8AB3-DB7BDA73355C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] +'/lib/escape.rb'
        print "\\\\${1:emph}{#{if s = ENV['TM_SELECTED_TEXT'] then e_sn(s) else '$2' end}}"
      :input: none
00C541DE-9A5C-4C59-A075-E754BAEB25C2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Working Copy (BASE)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 00C541DE-9A5C-4C59-A075-E754BAEB25C2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'cvs_diff'
        
        CVS::diff_active_file(:base, "Diff With Working Copy")
        END

      :input: none
095E8342-FAED-4B95-A229-E245B0B601A7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation in Browser
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 095E8342-FAED-4B95-A229-E245B0B601A7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TPY=${TM_PYTHON:-python}
        
        echo '<html><body>'
        "$TPY" "${TM_BUNDLE_SUPPORT}/browse_pydocs.py"
        echo '</body></html>'
      :input: none
75929BC0-24E5-456D-9FC5-91BF4B490027: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Method/Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 75929BC0-24E5-456D-9FC5-91BF4B490027
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python -S
        
        # This program takes in the name of one of python's special methods, and
        # spits a snippet out.  If the name is unknown, make a regular (non-magic)
        # method/function
        
        # these functions take no argument except 'self'
        selfList = (
            'del', 'repr', 'str', 'hash', 'nonzero', 'unicode', 'len', 'iter', 'neg',
            'pos', 'abs', 'invert', 'complex', 'int', 'long', 'float', 'oct', 'hex',
            'index', 'enter'
        )
        # these binary operators take both 'self' and 'other' as arguments
        selfOtherList = (
         'lt', 'le', 'eq', 'ne', 'gt', 'ge', 'cmp', 'add', 'sub', 'mul', 'floordiv',
         'mod', 'divmod', 'lshift', 'rshift', 'and', 'xor', 'or', 'div', 'truediv',
         'radd', 'rsub', 'rmul', 'rdiv', 'rtruediv', 'rfloordiv', 'rmod', 'rdivmod',
         'rpow', 'rlshift', 'rrshift', 'rand', 'rxor', 'ror', 'iadd', 'isub', 'imul',
         'idiv', 'itruediv', 'ifloordiv', 'imod', 'ilshift', 'irshift', 'iand',
         'ixor', 'ior', 'coerce', 'pow', 'ipow'
        )
        # these functions take some argument(s) other than self
        selfAndMore = {
                 'getattr' : 'name',
                 'delattr' : 'name',
            'getattribute' : 'name',
                 'setattr' : 'name, value',
                 'getitem' : 'key',
                 'delitem' : 'key',
                 'setitem' : 'key, value',
                     'get' : 'instance, owner',
                     'set' : 'instance, value',
                  'delete' : 'instance',
                'contains' : 'item',
                'setslice' : 'i, j, sequence',
                'delslice' : 'i, j',
                    'exit' : 'exc_type, exc_value, traceback',
        }
        
        sPass = '\t${4/.+/"""/}${4:docstring for %s}${4/.+/"""\n/}${4/.+/\t/}${0:pass}'
        
        def defLine(func, args):
            return ''.join(["def __", func, "__(", args, "):\n", sPass])
        
        def make_snippet(name):
            if name in selfList:
                return defLine(name, 'self')
            
            elif name in selfOtherList:
                return defLine(name, 'self, other')
            
            elif name in selfAndMore:
                return defLine(name, 'self, ' + selfAndMore[name])
            
            elif name in ('init', 'call', 'new'):
                return defLine(name, 'self${2/([^,])?.*/(?1:, )/}${2:arg}')
                
            else:
                return ''.join(['def ', name, '(${3:self${2/([^,])?.*/(?1:, )/}${2:arg}}):\n', sPass % name])
        
        # actually print the thing out, using the current word in TM
        from os import environ as env
        print make_snippet(env['TM_CURRENT_WORD'])
      :input: selection
000A245B-4BDD-4544-8200-C5BE3EFEDC20: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.plist.binary
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Binary to XML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 000A245B-4BDD-4544-8200-C5BE3EFEDC20
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        if [[ -f "$TM_FILEPATH" ]]
        	then
        		first_line=$(head -n1 "$TM_FILEPATH")
        		if [[ ${first_line:0:6} == "bplist" ]]
        			then
        				plutil -convert xml1 -o /tmp/textmate_converted_plist.xml "$TM_FILEPATH"
        				cat /tmp/textmate_converted_plist.xml
        			else exit_show_tool_tip "File does not appear to be a binary property list."
        		fi
        	else exit_show_tool_tip "File must be saved before conversion."
        fi

      :input: document
73EAE95D-A09C-4FC2-B4E3-42505678B57E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Comment Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: /
        modifiers: 
        - :super
      :uuid: 73EAE95D-A09C-4FC2-B4E3-42505678B57E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # by James Edward Gray II <james (at) grayproductions.net>
        
        # 
        # To override the operation of this commond for your language add a Preferences
        # bundle item that defines the following valiables as appropriate for your
        # language:
        # 
        #   TM_COMMENT_START - the character string that starts comments, e.g. /*
        #   TM_COMMENT_END   - the character string that ends comments (if appropriate),
        #                      e.g. */
        #   TM_COMMENT_MODE  - the type of comment to use - either 'line' or 'block'
        # 
        
        require "#{ENV["TM_SUPPORT_PATH"]}/lib/escape"
        
        def out(*args)
          print( *args.map do |arg|
            escaped = e_sn(arg)
            $selected ? escaped.gsub("}", "\\}") : escaped.sub("\0", "${0}")
          end )
        end
        
        # find all available comment variables
        var_suffixes = [""]
        2.upto(1.0/0.0) do |n|
          if ENV.include? "TM_COMMENT_START_#{n}"
            var_suffixes << "_#{n}"
          else
            break
          end
        end
        
        text    = STDIN.read
        default = nil  # the comment we will insert, if none are removed
        
        # maintain selection
        if text == ENV["TM_SELECTED_TEXT"]
          $selected = true
          print "${0:"
          at_exit { print "}" }
        else
          $selected = false
        end
        
        # try a removal for each comment...
        var_suffixes.each do |suffix|
          # build comment
          com = { :start     => ENV["TM_COMMENT_START#{suffix}"] || "# ",
                  :end       => ENV["TM_COMMENT_END#{suffix}"]   || "",
                  :mode      => ENV["TM_COMMENT_MODE#{suffix}"]  ||
                                (ENV["TM_COMMENT_END#{suffix}"] ? "block" : "line"),
                  :no_indent => ENV["TM_COMMENT_DISABLE_INDENT#{suffix}"] }
          
          com[:esc_start], com[:esc_end] = [com[:start], com[:end]].map do |str|
            str.gsub(/[\\|()\[\].?*+{}^$]/, '\\\\\&').
                gsub(/\A\s+|\s+\z/, '(?:\&)?')
          end
          
          # save the first one as our insertion default
          default = com if default.nil?
          
          # try a removal
          case com[:mode]
          when "line"  # line by line comment
            if text !~ /\A[\t ]+\z/ &&
               text.map { |l| !!(l =~ /\A\s*(#{com[:esc_start]}|$)/) }.uniq == [true]
              if $selected
                out text.gsub( /^(\s*)#{com[:esc_start]}(.*?)#{com[:esc_end]}(\s*)$/,
                               '\1\2\3' )
                exit
              else
                r = text.sub( /^(\s*)#{com[:esc_start]}(.*?)#{com[:esc_end]}(\s*)$/,
                              '\1\2\3' )
                i = ENV["TM_LINE_INDEX"].to_i
                i = i > text.index(/#{com[:esc_start]}/)            ?
                    [[0, i - com[:start].length].max, r.length].min :
                    [i, r.length].min
                r[i, 0] = "\0"
                out r
                exit
              end
            end
          when "block" # block comment
            regex = /\A(\s*)#{com[:esc_start]}(.*?)#{com[:esc_end]}(\s*)\z/m
            if text =~ regex
              if $selected
                out text.sub(regex, '\1\2\3')
                exit
              else
                r = text.sub(regex, '\1\2\3')
                i = ENV["TM_LINE_INDEX"].to_i
                i = i > text.index(/#{com[:esc_start]}/)            ?
                    [[0, i - com[:start].length].max, r.length].min :
                    [i, r.length].min
                r[i, 0] = "\0"
                out r
                exit
              end
            end
          end
        end
        
        # none of our removals worked, so preform an insert (minding indent setting)
        text[ENV["TM_LINE_INDEX"].to_i, 0] = "\0" unless $selected or text.empty?
        case default[:mode]
        when "line"  # apply comment line by line
          if text.empty?
            out "#{default[:start]}\0#{default[:end]}"
          elsif default[:no_indent]
            out text.gsub(/^.*$/, "#{default[:start]}\\&#{default[:end]}")
          elsif text =~ /\A([\t ]*)\0([\t ]*)\z/
            out text.gsub(/^.*$/, "#{$1}#{default[:start]}#{$2}#{default[:end]}")
          else
            indent = text.scan(/^[\t \0]*(?=\S)/).
                          min { |a, b| a.length <=> b.length } || ""
            text.map do |line|
              if line =~ /^(#{indent})(.*)$(\n?)/ then
                out $1 + default[:start] + $2 + default[:end] + $3
              elsif line =~ /^(.*)$(\n?)/ then
                out indent + default[:start] + $1 + default[:end] + $2
              end
            end
          end
        when "block" # apply comment around selection
          if text.empty?
            out default[:start]
            print "${0}"
            out default[:end]
          elsif text =~ /\A([\t ]*)\0([\t ]*)\z/
            out $1, default[:start]
            print "${0}"
            out $2, default[:end]
          elsif default[:no_indent]
            out default[:start], text, default[:end]
          else
            lines = text.to_a
            if lines.empty?
              out default[:start], default[:end]
            else
              lines[-1].sub!(/^(.*)$/, "\\1#{default[:end]}")
              out lines.shift.sub(/^([\s\0]*)(.*)$/, "\\1#{default[:start]}\\2")
              out(*lines) unless lines.empty?
            end
          end
        end

      :input: selection
022C9B78-88E9-11D9-9236-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Disassemble .SWF
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          kA==

        modifiers: 
        - :alt
      :uuid: 022C9B78-88E9-11D9-9236-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #Check that flasm has been installed, if not warn the user.
        require_cmd "flasm" "To view the disassembled bytecode for the selected .swf please install flasm in one of the locations below.<br><br>usr/local/bin is recommended.<br><br>Flasm can be found at <a href=\"http://www.nowrap.de/flasm.html\">http://www.nowrap.de/flasm.html</a>."
        
        #Check a swf is selected otherwise show tooltip.
        swfSelected=$( echo $TM_SELECTED_FILE | grep -i .swf )
        if [ "$swfSelected" == "" ]; then
        	echo "Please select a swf file from the project drawer."
        	exit 206; 
        fi
        
        #process the swf with flasm.
        flasm -d "$TM_SELECTED_FILE"
      :input: none
E8B6A543-90A6-46A4-A307-B21B67EF7F2F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.lilypond
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Engrave and View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: E8B6A543-90A6-46A4-A307-B21B67EF7F2F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/bin/bash\n\n\
        . \"${TM_SUPPORT_PATH}/lib/webpreview.sh\"\n\
        html_header 'Engrave &amp; View' \"$TM_FILENAME\"\n\
        echo '<h2>Engraving\xE2\x80\xA6</h2>'\n\n\
        : ${TM_LILYPOND:=\"$(find_app Lilypond.app)/Contents/Resources/bin/lilypond\"}\n\
        [[ ! -f \"$TM_LILYPOND\" ]] && TM_LILYPOND=lilypond\n\n\
        if ! type >/dev/null -p \"$TM_LILYPOND\"; then\n   echo \"Error locating <a href='http://lilypond.org/web/'>lilypond</a> on your system.\"\n   exit\n\
        fi\n\n\
        cd \"$TM_DIRECTORY\"\n\
        \"$TM_LILYPOND\" \"$TM_FILENAME\" | pre\n\n\
        if [[ -f \"${TM_FILEPATH%.*}.pdf\" ]];\n   then echo \"Opening PDF\xE2\x80\xA6\"; open \"${TM_FILEPATH%.*}.pdf\"\n   else echo \"Error generating PDF file.\"\n\
        fi"
      :input: none
61B9EE59-3C49-45B8-94DE-7C0C8BCB965C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Create Widget Calling Current Document
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 61B9EE59-3C49-45B8-94DE-7C0C8BCB965C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env bash
        SCRIPT_PATH="Library/Application Support/Textmate/Widget Scripts"
        ESCAPED_FILEPATH=$(echo $TM_FILEPATH | sed -e 's/\"/\\\"/g' -e 's/\`/\\\`/g')
        mkdir -p ~/"$SCRIPT_PATH"
        echo \#\!\/usr/bin/env bash > ~/"$SCRIPT_PATH/default.sh"
        echo -n "\"$ESCAPED_FILEPATH\" \"\$@\"" >> ~/"$SCRIPT_PATH/default.sh"
        echo -n "\"$TM_FILENAME\"" > ~/"$SCRIPT_PATH/filename.txt"
        "$TM_BUNDLE_SUPPORT/deploy_widget.sh"
        echo "Widget created."

      :input: none
0526D870-BE98-4931-8DBF-FDD3D405BB1B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Convert Spaces to Tabs (Estimating Indent)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
        - :super
      :uuid: 0526D870-BE98-4931-8DBF-FDD3D405BB1B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # This is a little more convoluted than it needs to be
        # just to ensure that we can do an OK job on really long
        # files.  Frankly, it's probably all for nothing given
        # that we likely have plenty of memory, and that Ruby will
        # probably go an cache a whole chunk of the file somewhere in
        # the IO pipeline anyway - but we like to make the effort.
        
        spacing = nil
        lines = Array.new()
        line = $stdin.gets()
        while(line != nil)
        	lines << line
        	if(line =~ /^\t/)  # mixed tabs with spaces, use TM's tab setting
        		spacing = ENV['TM_TAB_SIZE']
        		break
        	elsif(line =~ /^[ ]+\S/)
        		spacing = line[/^([ ]+)\S/, 1].length
        		break
        	end
        
        	line = $stdin.gets()
        end
        
        if(spacing != nil)
        	fp = IO.popen("cat \"#{ENV['TM_FILEPATH']}\" | unexpand -t #{spacing}", "r")
        	line = fp.gets()
        	while(line != nil)
        		print line
        		line = fp.gets
        	end
        else
        	lines.each() { |line|
        		print line
        	}
        
        	line = $stdin.gets()
        	while(line != nil)
        		print line
        		line = $stdin.gets()
        	end
        end

      :input: document
C958B58A-D4D4-4055-89DF-22BCA3B8A9CA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Send Document With Active Connection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: F
        modifiers: 
        - :control
      :uuid: C958B58A-D4D4-4055-89DF-22BCA3B8A9CA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        osascript <<-"APPLESCRIPT" - "$TM_FILEPATH"
        on run(argv)
        	tell application "Transmit"
        		(upload item (item 1 of argv)) in current session of first document
        	end tell
        end run
        APPLESCRIPT

      :input: none
D4885A64-9FF5-43BA-8D5E-AEB71E9E08C2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Display Documentation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
        - :super
      :uuid: D4885A64-9FF5-43BA-8D5E-AEB71E9E08C2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/search.rb" input
      :input: selection
A9C04B17-6A04-4D4D-81ED-2F4EFCD61FA3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Mark as Complete
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: /
        modifiers: 
        - :super
      :uuid: A9C04B17-6A04-4D4D-81ED-2F4EFCD61FA3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require 'date'
        lines = STDIN.readlines
        for line in lines
          if line =~ /^(#completed:)(\[\d{4}-\d{2}-\d{2}\])(.*)/ then
          	print $3
          elsif line =~ /^\s*@/
        	print "#completed:[#{Date.today}]#{line}"
          else
        	print line
          end
        end

      :input: selection
73951799-AC15-40A6-81DB-EC051AB4A033: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 73951799-AC15-40A6-81DB-EC051AB4A033
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<SNIPPET
        function ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}(\${1:args}) {
        	\$0
        }
        SNIPPET
      :input: selection
690646D5-AC38-4EB9-8C41-776E4F55CB59: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.jquery support.function.js.jquery
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 690646D5-AC38-4EB9-8C41-776E4F55CB59
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        require 'rexml/document'
        require 'tempfile'
        include REXML
        file = File.open ENV['TM_BUNDLE_SUPPORT'] + '/jquery-docs-xml.xml'
        
        doc = Document.new(file)
        root = doc.root
        name = ENV['TM_CURRENT_WORD']
        methods = ''
        root.elements.each("method[@name='#{name}']") { |e| methods += e.to_s }
        
        stylefile = ENV['TM_BUNDLE_SUPPORT'] + '/docs.xsl'
        
        tf = Tempfile.new('docs')
        tf.puts('<?xml version="1.0" encoding="UTF-8"?>' + "\n")
        tf.puts('<docs>' + "\n")
        tf.puts methods
        tf.puts('</docs>' + "\n")
        tf.close
        xmlfile = tf.path
        
        puts `xsltproc "#{stylefile}" "#{xmlfile}"`

      :input: selection
851259CB-28FD-4B01-A23C-1DB5F46F92BF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.remind
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: This Week
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 851259CB-28FD-4B01-A23C-1DB5F46F92BF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # show this weeks calendar in a tooltip
        require_cmd rem
        
        rem ${REMIND_FLAGS:--mb1} -c+

      :input: none
A6C302D1-4EB0-4CE8-AB43-F21672BFFB68: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: A6C302D1-4EB0-4CE8-AB43-F21672BFFB68
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "GTD Bundle Help file" "Getting Things Done"
        Markdown.pl <<"EOF"|SmartyPants.pl
        # GTD Bundle Help
        This bundle is shamelessly taken from the TODO bundle and reconfigured for GTD.  For more info on GTD see <http://www.davidco.com>
        <h2>Setting up the GTD Bundle</h2>
        The latest version of the GTD bundle can always be found at [textmate
        repository]. &nbsp;Additionally, you'll need two files, a contexts file
        and an exclusions file. &nbsp;These files need to go into a folder
        where you plan to place all of yoour .gtd files. &nbsp;I keep mine in
        ~/Documents/ToDo.<br>
        <br>
        Basically, the contexts.gtd file is a list of contexts, as described
        above. &nbsp;There are several data elements for each file, a couple of
        which I no longer use, but keep so that I don't break the system.
        &nbsp;The big things to get right are the context (first cell), the
        shortcut key (second cell) and the context string (third element).
        &nbsp;<br>
        <br>
        The exclusions.gtd file is a list of gtd files that you <span style="font-style: italic;">don't</span>
        want to see listed in the rollup of tasks. &nbsp;Why? &nbsp;Well, it
        allows me to create project files that I can hide until I want to deal
        with them. &nbsp;For example, I created a ookshelf.gtd file that lists
        all of the tasks assosciated with building shelves in my garage.
        &nbsp;However, I'm not ready for that project yet, so I hide it from my
        rollup. &nbsp;I've tried to make the GTD bundle as customizable as
        posssible, so while you must have the excluded.gtd file, you are free
        to not use it. &nbsp;
        <h2>Using the GTD Bundle</h2>
        Now that you have downloaded the bundle and the supporting files, you
        are ready to jump in! &nbsp;First, create a new project file in your
        ToDo folder (or whatever you call it). &nbsp;Then begin adding tasks by
        entering a shortcut and hitting the "<span style="font-weight: bold;">Enter</span>"
        key - not "Return." &nbsp;This should replace the shortcut with the
        corresponding context string from contexts.gtd. &nbsp;Then tab to the
        data field(s) for that task and hit return to finish entering the task.<br>
        <br>
        Contexts are great, but there is also a status component of the gtd
        list in the GTD bundle. &nbsp;The normal status is how the task is
        created. &nbsp;The two modified statuses are "WAIT" and "DONE."
        &nbsp;To change the status of a task to "WAIT" type "w" and then the
        tab key anywhere on the tasks line (just make sure it is either the
        first character or there is a pace in from of the "w"). &nbsp;Then,
        when you want to "unwait" the task, do the same thing with "u".
        &nbsp;When a task is done, mark it as "DONE" using "d" and the tab key.<br>
        <br>
        Like I said in the beginning, my objective is to plan in project,
        execute in context. &nbsp;So, I have a couple of list views, "Active
        GTD List View" and "GTD List View". &nbsp;The major difference between
        the two is that the active list does not show completed tasks, although
        it does show "WAIT" tasks. &nbsp;Either way, the bundle creates a nice
        looking list of tasks, arranged by context.<br>
        <br>
        One other subject area is additional list formatting. &nbsp;You can
        sort all of the tasks in a project by context by pressing F5. &nbsp;I
        personally don't like this, because my projects are generally built in
        a rough sequence. &nbsp;I have to look up a phone number before I can
        call it, for example. &nbsp;So, the feature is there, but I don't
        really use it. &nbsp;There are also a couple of cleanup commands.
        &nbsp;Cleanup (CTRL-Shift-C) moves all of the "DONE" tasks to the
        bottom of a project list. &nbsp;Remove (CTRL-ALT-Shift-C) does what it
        says; it removes completed tasks.<br>
        
        EOF
        html_footer

      :input: none
75575B16-87B9-40A3-9101-B027DD43D31F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Push to default repo
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 75575B16-87B9-40A3-9101-B027DD43D31F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"
        fi
        
        export TM_HG
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/hg_push.rb"

      :input: none
C95007FC-50A3-4BBC-AACF-3EF6EE2AA7F5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: XHTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: C95007FC-50A3-4BBC-AACF-3EF6EE2AA7F5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t xhtml "$TM_FILEPATH"
      :input: none
7AE6F783-F162-4063-850D-1441441849D8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create HTML From Document / Selection With Line Numbers
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 7AE6F783-F162-4063-850D-1441441849D8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -rjcode -Ku\n\
        require \"#{ENV['TM_BUNDLE_SUPPORT']}/lib/doctohtml.rb\"\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/progress.rb\"\n\
        unit = ENV.has_key?('TM_SELECTED_TEXT') ? 'selection' : 'document'\n\
        TextMate.call_with_progress(:message => \"Creating HTML version of #{unit}\xE2\x80\xA6\") do\n  print document_to_html( STDIN.read, { :line_numbers => true, :include_css => !ENV.has_key?('TM_SELECTED_TEXT') } )\n\
        end"
      :input: selection
9F539C5E-46E1-45F4-9AD7-6BF05BE0C7ED: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Bullet List
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "*"
        modifiers: 
        - :control
      :uuid: 9F539C5E-46E1-45F4-9AD7-6BF05BE0C7ED
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        ENV['TM_SELECTED_TEXT'].to_s.each_line() { |line|
        	if(line =~ /^\*/)
        		print("*#{line}")
        	else
        		print("* #{line}")
        	end
        }

      :input: selection
769AC12C-9EDF-4089-8834-062A301907ED: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Function Call
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
      :uuid: 769AC12C-9EDF-4089-8834-062A301907ED
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] +'/lib/escape.rb'
        print "${1:sum}(#{if s = ENV['TM_SELECTED_TEXT'] then e_sn(s) else '$2' end})"
      :input: selection
667B3ED4-CA2B-402D-9445-904798AE1AA0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: 
      :name: Update Installed Bundles
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 667B3ED4-CA2B-402D-9445-904798AE1AA0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        APP_PATH=$(ps -xwwp $PPID -o command|grep -o '.*.app')
        
        SVN="${TM_BUNDLE_SUPPORT}/bin/svn"
        
        REV=$(< "$TM_SUPPORT_PATH/version")
        SVN_OPTS="-r$REV --no-auth-cache --non-interactive"
        
        cd ~/Library/Application\ Support/TextMate/Pristine\ Copy/Bundles
        if [[ $? == 0 ]]; then 
          for f in *.tmbundle; do "$SVN" up $SVN_OPTS "$f"; done \
           2> >(CocoaDialog progressbar --indeterminate --title 'Updating all your Bundles' --text 'This could take a while...')
        
          osascript -e 'tell app "TextMate" to reload bundles'
          CocoaDialog bubble --title 'All Bundles Updated' --text 'You can use them now' --icon-file "${APP_PATH}/Contents/Resources/Textmate.icns"
        else
          CocoaDialog bubble --title 'No Bundles to update' --text 'Use \"Install Bundles\".' --icon-file "${APP_PATH}/Contents/Resources/Textmate.icns"
        fi

      :input: 
C81F7FF7-7899-48F5-AD79-F248B7BC3DCB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: C81F7FF7-7899-48F5-AD79-F248B7BC3DCB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "PHP Bundle Help" "PHP"
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer

      :input: none
C5B821F3-DDB1-4911-8C89-32FD98033769: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove Logs in Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: C5B821F3-DDB1-4911-8C89-32FD98033769
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.remove_logs
      :input: selection
A7B73FB6-4C26-4607-8899-9595D7BF3EB1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Relaunch TextMate using WebKit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
        - :super
      :uuid: A7B73FB6-4C26-4607-8899-9595D7BF3EB1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        { APP_PATH=$(ps -xwwp $PPID -o command|grep -o '.*.app')
          osascript -e 'tell app "TextMate" to quit'
        
          for (( i = 0; i < 50 && $(echo $(ps -xp $PPID|wc -l))-1; i++ )); do
            sleep .2;
          done
        
          if [[ $(ps -xp $PPID|wc -l) -ne 2 ]]; then
            defaults write com.macromates.textmate WebKitScriptDebuggerEnabled -bool true
            defaults write com.macromates.textmate WebKitDeveloperExtras -bool true
            env DYLD_FRAMEWORK_PATH="$(find_app org.webkit.nightly.WebKit)/Contents/Resources" WEBKIT_UNSET_DYLD_FRAMEWORK_PATH=YES "$(find_app com.macromates.textmate)/Contents/MacOS/TextMate" &
          else
            echo >/dev/console "$(date +%Y-%m-%d\ %H:%M:%S): TextMate is still running. Relaunch aborted."
          fi
        
        } &>/dev/null &

      :input: none
8FC2E9FA-A9CE-42CD-9910-4FC9A9248BF9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Clock
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8FC2E9FA-A9CE-42CD-9910-4FC9A9248BF9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cat <<'PART_1'
        	<html><head><title>Clock</title><script>
        	var myCommand = null;
        
        	function start () {
        	   document.getElementById("start").style.display = "none";
        	   document.getElementById("stop").style.display = "inline";
        	   var cmd = "while true; do date; sleep 1; done"
        	   myCommand = TextMate.system(cmd, function (task) { });
        	   myCommand.onreadoutput = output;
        	}
        
        	function stop () {
        	   document.getElementById("start").style.display = "inline";
        	   document.getElementById("stop").style.display = "none";
        	   myCommand.cancel();
        	}
        
        	function output (str) {
        	   document.getElementById("date").innerText = str;
        	}
        	</script></head>
        	<body onLoad="window.resizeTo(400, 250); start()" onUnload="stop()">
        	<pre><div id="date">
        PART_1
        
        date|tr -d \\n # to get an initial value (visually more attractive)
        
        cat <<'PART_2'
        	</div></pre>
        	<span id="start"><a onClick="start()" href="#">Start</a></span>
        	<span id="stop"><a onClick="stop()" href="#">Stop</a></span>
        	</body></html>
        PART_2

      :input: none
3B083BE7-9812-4F06-A758-CCAD9514E797: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.haskell
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 3B083BE7-9812-4F06-A758-CCAD9514E797
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ": ${TM_HASKELL:=runhaskell}\n\
        require_cmd \"$TM_HASKELL\"\n\n\
        \"$TM_HASKELL\" \"$TM_FILEPATH\" 2>&1 | haskellmate\n\n"
      :input: none
02E5581D-BCC8-4479-A9A9-A5E7CEE8293E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Paste Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: 02E5581D-BCC8-4479-A9A9-A5E7CEE8293E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export SHELL_NAME=${SHELL_NAME:="TextMate Shell"}
        "$TM_BUNDLE_SUPPORT/new.sh"
        PASTE=$(echo "$TM_SELECTED_TEXT" | sed s/\"/\\\\\"/g)
        osascript << END
        tell application "iTerm"
        	tell first terminal
        		tell session named "$SHELL_NAME"
        			write text "$PASTE"
        		end tell
        	end tell
        end tell
        END

      :input: none
8646378E-91F5-4771-AC7C-43FC49A93576: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby meta.require string.quoted
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Require
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: 8646378E-91F5-4771-AC7C-43FC49A93576
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        file = STDIN.read.sub(/\\A([\"'])(.*)(\\.rb)?\\1\\z/, '\\2.rb')\n\
        dir = $:.find { |d| File.exist?(File.join(d, file)) }\n\n\
        if dir && file then\n  ENV['FILE'] = File.join(dir, file)\n  %x{ \"$TM_SUPPORT_PATH/bin/mate\" \"$FILE\" }\n\
        else\n  puts \"Could not find include: \xE2\x80\x98#{file}\xE2\x80\x99\"\n\
        end\n"
      :input: selection
CE007C8C-9A0B-43B8-AEAF-45613BCD3DF7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.java
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: CE007C8C-9A0B-43B8-AEAF-45613BCD3DF7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        JAVADOC=${TM_JAVADOC:-"/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home/docs/index.html"}
        if [[ -f $JAVADOC ]]
           then echo "<meta http-equiv=\"refresh\" content=\"0; tm-file://$JAVADOC\">"
           else echo "<p>Couldn't find Java documentation.<p>You may need to set <tt>TM_JAVADOC</tt> to the location of the root documentation file."
        fi
      :input: none
255E029C-7B95-49F2-B7AC-0FAB4F7FBA58: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Find
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: F
        modifiers: 
        - :control
      :uuid: 255E029C-7B95-49F2-B7AC-0FAB4F7FBA58
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTD.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
        include GTD
        files = GTD.process_directory
        projects = files.map{|i| i.projects}.flatten
        search_string = TextMate::UI.request_string(:title => "Finding projects", :prompt => "Abbreviated words to seach for:")
        exit unless search_string && !(search_string =~ /^\s*$/)
        search_terms = search_string.downcase.split(" ")
        for term in search_terms do
          projects = projects.find_all { |proj| proj.name.downcase.index(term) != nil }
        end
        case projects.length
        when 0
          project = nil
        when 1
          project = projects[0]
        else
          project = TextMate::UI.request_item(:title => "Finding projects",:prompt => "Too many possible matches found! Please select one:",:items => projects.map{|i| i.name+" : "+i.root.name} )
          project = projects.find{|proj| proj.name+" : "+proj.root.name == project} if project
        end
        if project then
        #  project.root.update!
         `open "#{project.txmt}"`
        end

      :input: none
40ABCA1E-A154-47C7-8EBC-D22DC078D295: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert From Kinkless
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 40ABCA1E-A154-47C7-8EBC-D22DC078D295
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "$TM_BUNDLE_SUPPORT/bin/KinklessToGTDConverter.rb"

      :input: document
BF4CA9F1-51CD-48D4-8357-852234F59046: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Omit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: O
        modifiers: 
        - :control
        - :super
      :uuid: BF4CA9F1-51CD-48D4-8357-852234F59046
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        s = STDIN.read
        puts "\#--"
        if s== ""
          puts "\# $0","\#++"
        else
          puts s, "\#++", "$0"
        end
      :input: selection
50AA6E95-A754-4EBC-9C2A-68418C70D689: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Property
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 50AA6E95-A754-4EBC-9C2A-68418C70D689
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\
        #\n\
        # Lookup current word as a CSS property on w3c.org\n\
        #\n\
        # The mapping below was generated using:\n\
        # echo '$props = {'; curl -s http://www.w3.org/TR/CSS2/propidx.html|egrep \"(^|<tr><td>)<a href=\\\".*\\\" class=\\\"noxref\\\"><span class=\\\".*\\\">'.*'</span></a>\"|perl -pe \"s|(?:<tr><td>)?<a href=\\\"(.*)\\\" class=\\\"noxref\\\"><span class=\\\".*\\\">'(.*)'</span></a>|\\t\\\"\\$2\\\"\\t=> \\\"\\$1\\\",|\"; echo '}'\n\n\
        $props = {\n\
        \t\"azimuth\"\t=> \"aural.html#propdef-azimuth\",\n\
        \t\"background\"\t=> \"colors.html#propdef-background\",\n\
        \t\"background-attachment\"\t=> \"colors.html#propdef-background-attachment\",\n\
        \t\"background-color\"\t=> \"colors.html#propdef-background-color\",\n\
        \t\"background-image\"\t=> \"colors.html#propdef-background-image\",\n\
        \t\"background-position\"\t=> \"colors.html#propdef-background-position\",\n\
        \t\"background-repeat\"\t=> \"colors.html#propdef-background-repeat\",\n\
        \t\"border\"\t=> \"box.html#propdef-border\",\n\
        \t\"border-collapse\"\t=> \"tables.html#propdef-border-collapse\",\n\
        \t\"border-color\"\t=> \"box.html#propdef-border-color\",\n\
        \t\"border-spacing\"\t=> \"tables.html#propdef-border-spacing\",\n\
        \t\"border-style\"\t=> \"box.html#propdef-border-style\",\n\
        \t\"border-top\"\t=> \"box.html#propdef-border-top\",\n\
        \t\"border-right\"\t=> \"box.html#propdef-border-right\",\n\
        \t\"border-bottom\"\t=> \"box.html#propdef-border-bottom\",\n\
        \t\"border-left\"\t=> \"box.html#propdef-border-left\",\n\
        \t\"border-top-color\"\t=> \"box.html#propdef-border-top-color\",\n\
        \t\"border-right-color\"\t=> \"box.html#propdef-border-right-color\",\n\
        \t\"border-bottom-color\"\t=> \"box.html#propdef-border-bottom-color\",\n\
        \t\"border-left-color\"\t=> \"box.html#propdef-border-left-color\",\n\
        \t\"border-top-style\"\t=> \"box.html#propdef-border-top-style\",\n\
        \t\"border-right-style\"\t=> \"box.html#propdef-border-right-style\",\n\
        \t\"border-bottom-style\"\t=> \"box.html#propdef-border-bottom-style\",\n\
        \t\"border-left-style\"\t=> \"box.html#propdef-border-left-style\",\n\
        \t\"border-top-width\"\t=> \"box.html#propdef-border-top-width\",\n\
        \t\"border-right-width\"\t=> \"box.html#propdef-border-right-width\",\n\
        \t\"border-bottom-width\"\t=> \"box.html#propdef-border-bottom-width\",\n\
        \t\"border-left-width\"\t=> \"box.html#propdef-border-left-width\",\n\
        \t\"border-width\"\t=> \"box.html#propdef-border-width\",\n\
        \t\"bottom\"\t=> \"visuren.html#propdef-bottom\",\n\
        \t\"caption-side\"\t=> \"tables.html#propdef-caption-side\",\n\
        \t\"clear\"\t=> \"visuren.html#propdef-clear\",\n\
        \t\"clip\"\t=> \"visufx.html#propdef-clip\",\n\
        \t\"color\"\t=> \"colors.html#propdef-color\",\n\
        \t\"content\"\t=> \"generate.html#propdef-content\",\n\
        \t\"counter-increment\"\t=> \"generate.html#propdef-counter-increment\",\n\
        \t\"counter-reset\"\t=> \"generate.html#propdef-counter-reset\",\n\
        \t\"cue\"\t=> \"aural.html#propdef-cue\",\n\
        \t\"cue-after\"\t=> \"aural.html#propdef-cue-after\",\n\
        \t\"cue-before\"\t=> \"aural.html#propdef-cue-before\",\n\
        \t\"cursor\"\t=> \"ui.html#propdef-cursor\",\n\
        \t\"direction\"\t=> \"visuren.html#propdef-direction\",\n\
        \t\"display\"\t=> \"visuren.html#propdef-display\",\n\
        \t\"elevation\"\t=> \"aural.html#propdef-elevation\",\n\
        \t\"empty-cells\"\t=> \"tables.html#propdef-empty-cells\",\n\
        \t\"float\"\t=> \"visuren.html#propdef-float\",\n\
        \t\"font\"\t=> \"fonts.html#propdef-font\",\n\
        \t\"font-family\"\t=> \"fonts.html#propdef-font-family\",\n\
        \t\"font-size\"\t=> \"fonts.html#propdef-font-size\",\n\
        \t\"font-size-adjust\"\t=> \"fonts.html#propdef-font-size-adjust\",\n\
        \t\"font-stretch\"\t=> \"fonts.html#propdef-font-stretch\",\n\
        \t\"font-style\"\t=> \"fonts.html#propdef-font-style\",\n\
        \t\"font-variant\"\t=> \"fonts.html#propdef-font-variant\",\n\
        \t\"font-weight\"\t=> \"fonts.html#propdef-font-weight\",\n\
        \t\"height\"\t=> \"visudet.html#propdef-height\",\n\
        \t\"left\"\t=> \"visuren.html#propdef-left\",\n\
        \t\"letter-spacing\"\t=> \"text.html#propdef-letter-spacing\",\n\
        \t\"line-height\"\t=> \"visudet.html#propdef-line-height\",\n\
        \t\"list-style\"\t=> \"generate.html#propdef-list-style\",\n\
        \t\"list-style-image\"\t=> \"generate.html#propdef-list-style-image\",\n\
        \t\"list-style-position\"\t=> \"generate.html#propdef-list-style-position\",\n\
        \t\"list-style-type\"\t=> \"generate.html#propdef-list-style-type\",\n\
        \t\"margin\"\t=> \"box.html#propdef-margin\",\n\
        \t\"margin-top\"\t=> \"box.html#propdef-margin-top\",\n\
        \t\"margin-right\"\t=> \"box.html#propdef-margin-right\",\n\
        \t\"margin-bottom\"\t=> \"box.html#propdef-margin-bottom\",\n\
        \t\"margin-left\"\t=> \"box.html#propdef-margin-left\",\n\
        \t\"marker-offset\"\t=> \"generate.html#propdef-marker-offset\",\n\
        \t\"marks\"\t=> \"page.html#propdef-marks\",\n\
        \t\"max-height\"\t=> \"visudet.html#propdef-max-height\",\n\
        \t\"max-width\"\t=> \"visudet.html#propdef-max-width\",\n\
        \t\"min-height\"\t=> \"visudet.html#propdef-min-height\",\n\
        \t\"min-width\"\t=> \"visudet.html#propdef-min-width\",\n\
        \t\"orphans\"\t=> \"page.html#propdef-orphans\",\n\
        \t\"outline\"\t=> \"ui.html#propdef-outline\",\n\
        \t\"outline-color\"\t=> \"ui.html#propdef-outline-color\",\n\
        \t\"outline-style\"\t=> \"ui.html#propdef-outline-style\",\n\
        \t\"outline-width\"\t=> \"ui.html#propdef-outline-width\",\n\
        \t\"overflow\"\t=> \"visufx.html#propdef-overflow\",\n\
        \t\"padding\"\t=> \"box.html#propdef-padding\",\n\
        \t\"padding-top\"\t=> \"box.html#propdef-padding-top\",\n\
        \t\"padding-right\"\t=> \"box.html#propdef-padding-right\",\n\
        \t\"padding-bottom\"\t=> \"box.html#propdef-padding-bottom\",\n\
        \t\"padding-left\"\t=> \"box.html#propdef-padding-left\",\n\
        \t\"page\"\t=> \"page.html#propdef-page\",\n\
        \t\"page-break-after\"\t=> \"page.html#propdef-page-break-after\",\n\
        \t\"page-break-before\"\t=> \"page.html#propdef-page-break-before\",\n\
        \t\"page-break-inside\"\t=> \"page.html#propdef-page-break-inside\",\n\
        \t\"pause\"\t=> \"aural.html#propdef-pause\",\n\
        \t\"pause-after\"\t=> \"aural.html#propdef-pause-after\",\n\
        \t\"pause-before\"\t=> \"aural.html#propdef-pause-before\",\n\
        \t\"pitch\"\t=> \"aural.html#propdef-pitch\",\n\
        \t\"pitch-range\"\t=> \"aural.html#propdef-pitch-range\",\n\
        \t\"play-during\"\t=> \"aural.html#propdef-play-during\",\n\
        \t\"position\"\t=> \"visuren.html#propdef-position\",\n\
        \t\"quotes\"\t=> \"generate.html#propdef-quotes\",\n\
        \t\"richness\"\t=> \"aural.html#propdef-richness\",\n\
        \t\"right\"\t=> \"visuren.html#propdef-right\",\n\
        \t\"size\"\t=> \"page.html#propdef-size\",\n\
        \t\"speak\"\t=> \"aural.html#propdef-speak\",\n\
        \t\"speak-header\"\t=> \"tables.html#propdef-speak-header\",\n\
        \t\"speak-numeral\"\t=> \"aural.html#propdef-speak-numeral\",\n\
        \t\"speak-punctuation\"\t=> \"aural.html#propdef-speak-punctuation\",\n\
        \t\"speech-rate\"\t=> \"aural.html#propdef-speech-rate\",\n\
        \t\"stress\"\t=> \"aural.html#propdef-stress\",\n\
        \t\"table-layout\"\t=> \"tables.html#propdef-table-layout\",\n\
        \t\"text-align\"\t=> \"text.html#propdef-text-align\",\n\
        \t\"text-decoration\"\t=> \"text.html#propdef-text-decoration\",\n\
        \t\"text-indent\"\t=> \"text.html#propdef-text-indent\",\n\
        \t\"text-shadow\"\t=> \"text.html#propdef-text-shadow\",\n\
        \t\"text-transform\"\t=> \"text.html#propdef-text-transform\",\n\
        \t\"top\"\t=> \"visuren.html#propdef-top\",\n\
        \t\"unicode-bidi\"\t=> \"visuren.html#propdef-unicode-bidi\",\n\
        \t\"vertical-align\"\t=> \"visudet.html#propdef-vertical-align\",\n\
        \t\"visibility\"\t=> \"visufx.html#propdef-visibility\",\n\
        \t\"voice-family\"\t=> \"aural.html#propdef-voice-family\",\n\
        \t\"volume\"\t=> \"aural.html#propdef-volume\",\n\
        \t\"white-space\"\t=> \"text.html#propdef-white-space\",\n\
        \t\"widows\"\t=> \"page.html#propdef-widows\",\n\
        \t\"width\"\t=> \"visudet.html#propdef-width\",\n\
        \t\"word-spacing\"\t=> \"text.html#propdef-word-spacing\",\n\
        \t\"z-index\"\t=> \"visuren.html#propdef-z-index\",\n\
        }\n\n\
        cur_line = ENV['TM_CURRENT_LINE']\n\
        cur_word = ENV['TM_CURRENT_WORD']\n\n\
        # since dash (\xE2\x80\x98-\xE2\x80\x99) is not a word character, extend current word to neighboring word and dash characters\n\
        $prop_name = /[-\\w]*#{Regexp.escape cur_word}[-\\w]*/.match(cur_line)[0]\n\n\
        def request_prop_name\n  s = `\\\"#{ENV['TM_SUPPORT_PATH']}/bin/CocoaDialog.app/Contents/MacOS/CocoaDialog\\\" inputbox --float --title 'Documentation for Property' --informative-text 'What property would you like to lookup?' --text '#{$prop_name}' --button1 'Lookup' --button2 'Cancel' --button3 'Show All Properties'`\n  case (a = s.split(\"\\n\"))[0].to_i\n    when 1 then $props[a[1].to_s] || \"propidx.html\"\n    when 2 then abort \"<script>window.close()</script>\"\n    when 3 then \"propidx.html\"\n  end\n\
        end\n\n\
        prop_url = $props[$prop_name] || request_prop_name\n\
        url = \"http://www.w3.org/TR/CSS2/\" + prop_url\n\
        puts \"<meta http-equiv='Refresh' content='0;URL=#{url}'>\"\n"
      :input: none
E03416E2-4742-4AC4-B152-D838A6542696: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: MoinMoin (wiki)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: E03416E2-4742-4AC4-B152-D838A6542696
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t moin "$TM_FILEPATH"
      :input: none
05DF9B5B-AB88-4597-ACD3-DD1DCEDC0BE8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "View Revision\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 05DF9B5B-AB88-4597-ACD3-DD1DCEDC0BE8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        ruby >& /tmp/tm_svn_debug <<END &\n\
        begin\n\
        \trequire \"$TM_BUNDLE_SUPPORT/svn_revision_chooser\"\n\n\
        \tSubversion::view_revision(\"$TM_FILEPATH\")\n\
        rescue Exception => error\n\
        \tTextMate::UI.alert(:warning, \"You\xE2\x80\x99ve discovered a bug\", \"Please report the following text: #{error}\\n\\n#{error.backtrace.join(%Q{\\n})}\")\n\
        end\n\
        END\n"
      :input: none
239E196A-7106-4DC9-8FAE-0A9CA7540AFA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Merge Selected Files\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 239E196A-7106-4DC9-8FAE-0A9CA7540AFA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd opendiff "Opendiff comes with Apple's developer tools."
        
        # set utf-8 as the default encoding (used by opendiff)
        export __CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100
        
        eval arr=("$TM_SELECTED_FILES")
        if [[ ${#arr[@]} == 2 ]];
           then opendiff "${arr[0]}" "${arr[1]}"; rescan_project
           else echo -e "You need to select exactly two\nfiles in the project drawer."
        fi

      :input: none
6B024865-6095-4CE3-8EDD-DC6F2230C2FF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: URL Escape Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 6B024865-6095-4CE3-8EDD-DC6F2230C2FF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        print STDIN.read.gsub(/([^a-zA-Z0-9_.-]+)/n) {
          '%' + $1.unpack('H2' * $1.size).join('%').upcase
        }

      :input: selection
2F3DB2EF-6B9E-4E5F-87A8-3675680E5C0D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 2F3DB2EF-6B9E-4E5F-87A8-3675680E5C0D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export TM_RUBY=$(which "${TM_RUBY:-ruby}")
        "${TM_RUBY}" -- "$TM_BUNDLE_SUPPORT/PerlMate/perlmate.rb"

      :input: document
3BF349AD-3452-4CA4-AAA7-8836565E3A5F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt meta.action
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Note as Tool Tip
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "?"
        modifiers: 
        - :control
      :uuid: 3BF349AD-3452-4CA4-AAA7-8836565E3A5F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        lines = STDIN.readlines
        row = ENV['TM_LINE_NUMBER'].to_i
        currentLine = lines[row-1]
        found = currentLine[/\[\d+\]/]
        if found then
          note = lines.find{ |line| line[/^\[\d+\]/] == found }
          note.slice!(/^\[\d+\]\s+/)
          print note
        else
          print "This action does not have a note."
        end
      :input: document
B98B3ADE-3EAE-4C7B-BBF4-46258CAD9E76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Select TextMate Theme
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :alt
        - :control
      :uuid: B98B3ADE-3EAE-4C7B-BBF4-46258CAD9E76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/ui"
        
        @THEMES = []
        def add_themes!(dir)
          themes = `ls "#{dir}"`.split("\n")
          themes.each do |theme|
            @THEMES << {
              'title' => theme.gsub('.tmTheme',''),
              'path'  => '' + dir + theme
            }
          end
          
        end
        
        add_themes! "#{ENV['TM_SUPPORT_PATH']}/../Themes/"
        add_themes! "$HOME/Library/Application Support/TextMate/Themes/"
        
        selection = TextMate::UI.menu(@THEMES)
        
        `open "#{selection['path']}"`
        print "Switched to  " + selection['title']
      :input: none
B3BF8765-30D5-46E7-8331-860B47CDD348: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Send HTML as Email [With Safari]
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: B3BF8765-30D5-46E7-8331-860B47CDD348
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # This requires that 'enable access for assistive devices' is enabled
        
        # Create a temporary file so that this works with unsaved documents
        TM_TMPFILE="$(mktemp /tmp/tm_mail_XXXXXX).html" || exit
        
        # Create a title based on the filename, if there is one
        TM_TITLE=${TM_FILENAME:-untitled}
        
        cat   >"$TM_TMPFILE"
        echo >>"$TM_TMPFILE" "<title>${TM_TITLE%.*}</title>"
        
        osascript -e 'tell app "Safari" to make new document with properties { URL:"file://'"$TM_TMPFILE"'" }'
        osascript -e 'tell app "Safari"' -e 'email contents of first document' -e 'close first document' -e 'end tell'
        
        rm -f "$TM_TMPFILE" "${TM_TMPFILE%.html}"
      :input: document
ADFED53B-16EC-4956-A6A7-3EA2B8140F86: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: S
        modifiers: 
        - :alt
      :uuid: ADFED53B-16EC-4956-A6A7-3EA2B8140F86
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat ${TMP:-/tmp}/TextMate-ScratchSnippet.txt
      :input: none
B0254A99-7750-4A06-937A-9A453ECE3A6C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Build & Run
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: B0254A99-7750-4A06-937A-9A453ECE3A6C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # this command calls xcodebuild giving the name of the project
        # directory as the project to build and parses the output for
        # file/line information then plays a succes/failure sample
        # based on the final outcome
        #
        # if the build succeeds, it will run the target
        
        XCODE_PROJECT_FILE=$(ruby -- "${TM_BUNDLE_SUPPORT}/bin/find_xcode_project.rb")
        export XCODE_PROJECT_FILE
        
        export XCODE_RUN_BUILD=1
        "${TM_BUNDLE_SUPPORT}/bin/run_xcodebuild.sh"
        
        #&& "${TM_BUNDLE_SUPPORT}/bin/run_xcode_target.rb" -project_dir="$XCODE_PROJECT_FILE"

      :input: none
937C187C-75F2-42F7-9AB8-972CBB9BABF5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.io
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 937C187C-75F2-42F7-9AB8-972CBB9BABF5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # just to remind you of some useful environment variables
        # see Help / Shell Variables for the full list
        
        cd $TM_DIRECTORY ; $TM_FILEPATH
      :input: none
A6F3AB3E-FB21-4E93-B672-E41100E88E41: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: A6F3AB3E-FB21-4E93-B672-E41100E88E41
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	hg = ENV['TM_HG'] || "hg"
        	puts %x{#{hg} add #{TextMate.selected_paths_for_shell}}
        END
        
      :input: none
EE5F19BA-6C02-11D9-92BA-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: EE5F19BA-6C02-11D9-92BA-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + '/lib/textmate'
        puts "using ruby-" + RUBY_VERSION.to_s
        result = `"${TM_RUBY:=ruby}" -wc 2>&1`
        puts result
        TextMate.go_to :line => $1 if result =~ /-:(\d+):/

      :input: document
556314B2-B3BF-11D9-9B1F-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Diff Labels\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 556314B2-B3BF-11D9-9B1F-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "labels=`\"${TM_P4:=p4}\" labels | cut -d \" \" -f 2`\n\
        #echo $labels\n\n\
        difflabels=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\", \"\\r\"}\n\
        \ttell app \"SystemUIServer\" to activate\n\
        \ttell app \"SystemUIServer\" to choose from list (every text item of \"$labels\") with prompt \"Please \n\
        choose two labels:\" with multiple selections allowed\n\
        END`\n\
        #echo $difflabels\n\n\
        IFS=\", \"\n\
        difflabels=( $difflabels )\n\n\
        #echo \"0:\" ${difflabels[0]}\n\
        #echo \"1:\" ${difflabels[1]}\n\n\
        ruby -I \"$TM_BUNDLE_SUPPORT/lib/\"<<END\n\
        \trequire 'p4_diff'\n\
        \tPerforce::diff_files_in_revisions(\"@${difflabels[0]}\", \"@${difflabels[1]}\", \"Perforce\xE2\x80\x94Diff Labels\xE2\x80\xA6\")\n\
        END\n"
      :input: none
504278F6-89F4-11D9-9326-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Debug Script in Terminal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: 504278F6-89F4-11D9-9326-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # start up Python in debug mode using either Terminal.app or iTerm.app
        # according to the user's value for TM_TERM_PROG
        # Default to Terminal.app since that is standard.
        TP=${TM_TERM_PROG:=Terminal}
        TPY=${TM_PYTHON:=python}
        
        if [ "$TP" == iTerm ]; then
            osascript <<END
                tell application "iTerm"
                    activate
                    set myterm to (the first terminal)
                    tell myterm            
                        set mysession to (make new session at the end of sessions)
                        tell mysession
                            exec command "/bin/bash -c \"$TPY -m pdb '$TM_FILEPATH' \" " 
                        end tell
                    end tell
                end tell
        END
        else
            osascript  <<END2
                tell application "Terminal"
                    activate
                    do script with command "$TPY -m pdb $TM_FILEPATH"
                end tell
        END2
        fi

      :input: none
4904EDC7-5ED3-4132-AAB2-C2AD87C97EFE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Call Generate Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 4904EDC7-5ED3-4132-AAB2-C2AD87C97EFE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/generate.rb" &>/dev/null &

      :input: none
C4006FCA-85FF-4476-BDA8-34EF355FD0E4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Send Folder (DockSend)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: F
        modifiers: 
        - :control
      :uuid: C4006FCA-85FF-4476-BDA8-34EF355FD0E4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/bin/sh\n\
        osascript \"${TM_BUNDLE_SUPPORT}/send_to_transmit.applescript\" \"$TM_DIRECTORY\" &>/dev/console &\n\
        echo \"Sent folder \xE2\x80\x98`basename ${TM_DIRECTORY}`\xE2\x80\x99 to Transmit\"\n"
      :input: none
5E76D8C8-DE61-11D9-823F-000A95A51A76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Record File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 5E76D8C8-DE61-11D9-823F-000A95A51A76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_DIRECTORY";
        
        "${TM_RUBY:=ruby}" <<'EOF'
        output = `CocoaDialog inputbox --title Input --informative-text 'Record Message' --button1 Record --button2 'Abort'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        output = `darcs record -a -m '#{output[1].strip.gsub(/'/, '\\\\1')}' '#{File.basename(ENV['TM_FILEPATH']).gsub(/(')/, '\\\\1')}'`
        
        puts(output)
      :input: none
05554FE0-4A70-4F3E-81C5-72855D7EB428: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css - text.html
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 05554FE0-4A70-4F3E-81C5-72855D7EB428
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        LIPSUM = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
        
        def tag_preview(selector_list)
        	html = 'TEXT_INSERT'
        	selectors = selector_list.split(/\s+/)
        	last_tag = ''
        	text_insert = "Generated preview for CSS selector #{selector_list}."
        
        	star_class = ''
        	star_id = ''
        	html_class = ''
        	html_id = ''
        	body_class = ''
        	body_id = ''
        
        	selectors.reverse.each do | selector |
        		singlet = false
        		tag = selector.clone
        		if (tag =~ /#(.+)/)
        			id = (tag.scan(/#(.+)/))[0][0]
        			id.gsub!(/\..+/, '')
        		else
        			id = nil
        		end
        		if (tag =~ /\.(.+)/)
        			cls = (tag.scan(/\.(.+)/))[0][0]
        			cls.gsub!(/\./, ' ')
        			cls.gsub!(/\#.+/, '')
        		else
        			cls = nil
        		end
        
        		tag.downcase!
        		tag.sub!(/#(.+)/, '');
        		tag.sub!(/\.(.+)/, '');
        		tag.sub!(/:.+/, '')
        
        		case tag
        		when '*'
        			star_class = " #{cls}" if cls
        			star_id = " id=\"#{id}\"" if id
        			cls = nil
        			id = nil
        			tag = 'div'
        		when 'body'
        			body_class = " #{cls}" if cls
        			body_id = " id=\"#{id}\"" if id
        			cls = nil
        			id = nil
        			tag = 'div'
        		when 'html'
        			html_class = " #{cls}" if cls
        			html_id = " id=\"#{id}\"" if id
        			cls = nil
        			id = nil
        			tag = 'div'
        		end
        
        		next if tag == '+'
        
        		if selector =~ /^[#.]/
        			case last_tag
        			when 'li'
        				tag = 'ul'
        			when 'td'
        				tag = 'tr'
        			when 'tr'
        				tag = 'table'
        			when /^h\d/
        				tag = 'div'
        			else
        				tag = 'span'
        			end
        		end
        
        		if (tag =~ /\[(.+?)\]/)
        			tag_attr = (tag.scan(/\[(.+?)\]/))[0][0]
        			tag.gsub!(/\[.+?\]/, '')
        		else
        			tag_attr = nil
        		end
        		part = "<" + tag
        		part += " #{tag_attr}" if tag_attr
        		part += " id=\"#{id}\"" if id
        		part += " class=\"#{cls}\"" if cls
        
        		# defaults for img tag
        		case tag
        		when 'img'
        			part += " src=\"http://www.google.com/intl/en/images/logo.gif\""
        			part += " alt=\"Preview of #{selector_list}\""
        			singlet = true
        		when 'a'
        			part += " href=\"\#\""
        		when 'input'
        			open_tag = part.clone
        			part += " type=\"radio\" /> Radio"
        			part += "#{open_tag} type=\"checkbox\" /> Checkbox<br />"
        			part += "#{open_tag} type=\"text\" value=\"Text Field\" />"
        			part += "#{open_tag} type=\"button\" value=\"Button\""
        			singlet = true
        		when 'select'
        			part += "><option>Option 1</option><option>Option 2</option"
        			html = ''
        		end
        
        		if (singlet)
        			part += " />"
        		else
        			part += ">"
        			part += html
        			part += "</" + tag + ">"
        		end
        
        		case tag
        		when /^h\d/
        			text_insert = tag.sub(/^h(\d+)/, "Heading \\1")
        		when 'p'
        			text_insert = LIPSUM
        		when 'object', 'img', 'input'
        			text_insert = ""
        		end
        
        		html = part
        		last_tag = tag
        	end
        
        	if (last_tag)
        		case last_tag
        		when 'em', 'strong', 'b', 'i'
        			html = "<p>#{html}</p>"
        		when 'li'
        			html = "<ul>#{html}</ul>"
        		when 'td'
        			html = "<table><tr>#{html}</tr></table>"
        		when 'tr'
        			html = "<table>#{html}</table>"
        		when 'input', 'textarea', 'select'
        			html = "<form method=\"get\">#{html}</form>"
        		end
        	end
        
        	html = "<div>#{html}</div>"
        	html.sub!(/TEXT_INSERT/, text_insert)
        
        	return <<EOT
        <div class="__wrap_wrap"><div class="__star_wrap#{star_class}"#{star_id}><div class="__html_wrap#{html_class}"#{html_id}><div class="__body_wrap#{body_class}"#{body_id}>#{html}</div></div></div></div>
        EOT
        end
        
        def preview_css(str)
        	orig_css = str.clone
        	orig_css.gsub!(/<entity\.name\.tag\.wildcard\.css>\*<\/entity\.name\.tag\.wildcard\.css>/, '.__star_wrap')
        	orig_css.gsub!(/<entity\.name\.tag\.css>body<\/entity\.name\.tag\.css>/, '.__body_wrap')
        	orig_css.gsub!(/<entity\.name\.tag\.css>html<\/entity\.name\.tag\.css>/, '.__html_wrap')
        
        	orig_css.gsub!(/<.+?>/, '')
        	orig_css.gsub!(/&lt;\/?style\b.*?&gt;/m, '')
        	orig_css.strip!
        
        	#meta.selector.css -> wraps the selector
        	#meta.property-list.css -> wraps the properties
        	rules = str.scan(/<meta\.selector\.css>\s*(.+?)\s*<\/meta\.selector\.css>.*?<meta\.property-list\.css>(.+?)<\/meta\.property-list\.css>/m)
        
        	html = ''
        	css = ''
        	rule_num = 0
        
        	rules.each do | rule |
        		selector = rule[0].gsub(/<.+?>/, '')
        		styles = rule[1].gsub(/<.+?>/, '')
        		styles.gsub!(/^\s*\{\n*/m, '')
        		styles.gsub!(/\s*\}\s*$/m, '')
        		styles.gsub!(/\t/, ' ' * ENV['TM_TAB_SIZE'].to_i)
        		selectors = selector.split(/\s*,\s*/m)
        		selectors.each do | single_selector |
        			rule_num += 1
        			html += "<div class=\"__rule_clear\"></div>\n\n" if html != ''
        			html += "<div class=\"__rule_selector\">#{single_selector} <a class=\"__view_link\" href=\"javascript:viewCSS('__rule#{rule_num}')\" title=\"Click to toggle CSS view\">CSS</a><div class=\"__rule\" id=\"__rule#{rule_num}\" style=\"display: none\">#{styles}</div></div>\n\n"
        			html += tag_preview(single_selector) + "\n\n"
        		end
        	end
        
        	filename = ENV['TM_FILENAME'] || 'untitled'
        	base = ''
        	base = "<base href=\"file://#{ENV['TM_FILEPATH']}\" />" if ENV['TM_FILEPATH']
        
        	return <<EOT
        <?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
        	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
        	<head>
        		#{base}
        		<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        		<meta http-equiv="Content-Language" content="en-us" />
        		<title>CSS Preview for #{filename}</title>
        		<style type="text/css">
        #{orig_css}
        .__wrap_wrap {
        	position: relative;
        	margin-top: 5px;
        	margin-bottom: 20px;
        	border-top: 1px solid #ccc;
        }
        .__rule_selector {
        	font-family: Times;
        	font-size: 16px;
        	border-top: 1px solid #ccc;
        }
        .__rule {
        	white-space: pre;
        	word-wrap: break-word;
        	font-family: Monaco;
        	font-size: 11px;
        }
        .__view_link {
        	font-family: Monaco;
        	font-size: 11px;
        }
        .__rule_clear:after {
        	content: "."; 
        	display: block; 
        	height: 0; 
        	clear: both; 
        	visibility: hidden;
        }
        		</style>
        		<script type="text/javascript">
        		function viewCSS(rule_id) {
        			var el = document.getElementById(rule_id);
        			if (el) {
        				if (el.style.display == 'none')
        					el.style.display = 'block';
        				else
        					el.style.display = 'none';
        			}
        		}
        		</script>
        	</head>
        	
        	<body>
        #{html}
        	</body>
        </html>
        EOT
        end
        
        print preview_css(STDIN.read)

      :input: selection
756B8E3C-9928-4552-A15E-17320BBC2E91: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create XML Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 756B8E3C-9928-4552-A15E-17320BBC2E91
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2XML:=rst2xml.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2XML</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        $TRST "$TM_FILEPATH"
      :input: selection
45E5E5A1-84CC-11D9-970D-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate CSS
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: 45E5E5A1-84CC-11D9-970D-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        print '<html><head><meta http-equiv="Refresh" content="0; URL='
        print 'http://jigsaw.w3.org/css-validator/validator?warning=1&profile=none&usermedium=all&text='
        
        scope = STDIN.read
        
        scope.gsub!(/<\/?style.*?>/, '')
        
        ((scope != nil && scope.size > 0) ? scope : $< ).each_byte do |b|
        
          if b == 32
            print '+'
          elsif b.chr =~ /\w/
            print b.chr
          else
            printf '%%%02x', b
          end
        end
        
        puts '#errors"></head><body></body></html>'
      :input: selection
2DB71989-6521-4590-8B27-67750D947891: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Forum: US.O Script Development"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 2DB71989-6521-4590-8B27-67750D947891
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: open "http://userscripts.org/forums/1"
      :input: none
37B43A9E-AD5E-11D9-97B0-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 37B43A9E-AD5E-11D9-97B0-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "LaTeX Bundle Help" "LaTeX"
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer

      :input: none
724FCFF6-CE6B-11D9-9C17-000A95C0F626: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $3
      :scope: text.html.markdown
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: nop
      :name: Level 2 [setext]
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 724FCFF6-CE6B-11D9-9C17-000A95C0F626
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: "-"
      :capture_pattern: ^([^:]*):([^:]*):(.*)$
      :command: |-
        #!/bin/sh
        
        if [[ $TM_LINE_INDEX == 0 && $TM_LINE_NUMBER != 1 ]]
           then head -n$((TM_LINE_NUMBER-1))|tail -n1|sed 's/./-/g'
           else echo -ne '-\t'
        fi
      :input: document
776163E4-730B-11D9-BCD0-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection (man)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 776163E4-730B-11D9-BCD0-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "word=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\n\
        RMAN='/Library/Application Support/Apple/Developer Tools/Plug-ins/DocViewerPlugIn.xcplugin/Contents/Resources/rman'\n\n\
        try_man () {\n\
        \tif [[ -x \"$RMAN\" ]] && man -w \"$word\" &>/dev/null; then\n\
        \t\tpage=$(\"$TM_SUPPORT_PATH/bin/html_man.sh\" -a \"$word\")\n\
        \t\techo \"<meta http-equiv='Refresh' content='0;URL=tm-file://$page'>\"\n\
        \t\texit_show_html\n\
        \tfi\n\
        }\n\n\
        MANSECT=${MANSECT:-2:3:4:5:6:7:8:9} try_man\n\
        try_man\n\n\
        echo \"Couldn\xE2\x80\x99t find documentation for \xE2\x80\x9C${word}\xE2\x80\x9D\"\n"
      :input: selection
4C1A1536-31FF-4FF5-B0C5-CD47D21CFD52: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Function Definition
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
        - :super
      :uuid: 4C1A1536-31FF-4FF5-B0C5-CD47D21CFD52
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] +'/lib/escape.rb'
        print "${1:${2:x} <- }function(${3:var}) {\n#{if s = ENV['TM_SELECTED_TEXT'] then e_sn(s.chomp.gsub(/(\A|\n)/,"\\1\t")) else "\t\$4" end}\n}"
      :input: selection
1DD8A214-1C97-45BA-ADEE-8F888DDE8570: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, text.html.ruby
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Create Partial From Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 1DD8A214-1C97-45BA-ADEE-8F888DDE8570
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/create_partial_from_selection.rb"

      :input: selection
242ECD6E-DE5D-11D9-823F-000A95A51A76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Pull From Default Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 242ECD6E-DE5D-11D9-823F-000A95A51A76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "${TM_PROJECT_DIRECTORY:=$TM_DIRECTORY}"
        
        darcs pull -a
      :input: none
7CC7E11B-02BE-4F8D-9E8F-396D2CB74A98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Hex Colors
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 7CC7E11B-02BE-4F8D-9E8F-396D2CB74A98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Colors"
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/show_hex_colors.rb"
        html_footer
        
      :input: selection
37C520F9-A379-4BBC-AF62-22F7C0B63955: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle Starred
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "*"
        modifiers: 
        - :control
      :uuid: 37C520F9-A379-4BBC-AF62-22F7C0B63955
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        data = STDIN.read
        location = [[ENV['TM_LINE_NUMBER'].to_i,ENV['TM_LINE_INDEX'].to_i]]
        # location = [[8,10],[6,10],[5,4]]
        class String
          def split_after_row(row)
            lines = self.scan(/.*\n?/)
            before = lines[0..row-1].join("")
            after = lines[row..-1].join("")
            return [before,after]
          end
          def fix_back
            stack = []
            before_lines = self.scan(/.*\n?/)
            processed = []
            until before_lines.empty?
              line = before_lines.pop
              case line
              when /^(.*\\begin\{)([^\}\*]*)(\*?)(\}.*\n?)$/
                if stack.empty? then
                  replace = $1 + $2 + ($3=="" ? "*" : "") + $4
                  return [:begin, before_lines.join("") + replace + processed.reverse.join("")]
                else
                  stack.pop
                  processed << line
                end
              when /^(.*\\end\{)([^\}\*]*)(\*?)(\}.*\n?)$/
                stack.push ""
                processed << line
              when /^(.*\\(?:chapter|part|(?:sub){0,2}section|(?:sub)?paragraph))(\*?)(\{.*\n?)$/
                replace = $1 + ($2=="" ? "*" : "") + $3
                return [:section, before_lines.join("") + replace + processed.reverse.join("")]
              else
                processed << line
              end
            end
            raise "Unexpected!"
          end
          def fix_forward
            stack = []
            after_lines = self.scan(/.*\n?/)
            processed = []
            until after_lines.empty?
              line = after_lines.shift
              case line
              when /^(.*\\begin\{)([^\}\*]*)(\*?)(\}.*\n?)$/
                stack.push ""
                processed << line
              when /^(.*\\end\{)([^\}\*]*)(\*?)(\}.*\n?)$/
                if stack.empty? then
                  replace = $1 + $2 + ($3=="" ? "*" : "") + $4
                  return [:end, processed.join("") + replace + after_lines.join("")]
                else
                  stack.pop
                  processed << line
                end
              else
                processed << line
              end
            end
            raise "Unexpected!"
          end
        end
        
        location.each do |row,col|
          before, after = data.split_after_row(row)
          status, before = before.fix_back
          unless status == :section then
            status, after = after.fix_forward
          end
          if col == 0 then
            before_lines = before.scan(/.*\n?/)
            before_lines.pop
            after = before_lines.pop + after
            before = before_lines.join("")
          else
            before_lines = before.scan(/.*\n?/)
        	before_lines.pop
            line = before_lines.pop
            before = before_lines.push(line[0..col-1]).join("")
           after = line[col..-1] + after
          end
          print e_sn(before) + "\$0" + e_sn(after)
        end

      :input: selection
092CED4D-9C4C-4ED7-BB6A-5C80D929D9FD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Offline Open For Editing
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 092CED4D-9C4C-4ED7-BB6A-5C80D929D9FD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # record a file that we're editing offline for later
        # (presumably when access to Perforce is restored)
        
        # first, unlock the file if we need to unlock it
        chmod +r "$TM_FILEPATH"
        /Developer/Tools/SetFile -a l "$TM_FILEPATH"
        
        # now record the file
        mkdir -p "$HOME/P4Cache"
        echo "$TM_FILEPATH" >> "$HOME/P4Cache/OfflineEdits.txt";

      :input: none
19F9C045-7BCC-429B-8C68-967B6BD15B84: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.makefile
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 19F9C045-7BCC-429B-8C68-967B6BD15B84
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Running make"
        
        make ${TM_MAKE_FLAGS} 2>&1|"${TM_RUBY:-ruby}" -rtm_parser -eTextMate.parse_errors
        
        echo "Done."
        html_footer

      :input: none
2061AB22-C557-4C68-919E-9A8815577987: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: AppleScript Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 2061AB22-C557-4C68-919E-9A8815577987
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        # Use ps to test for Help Viewer, because if we try
        # to use osascript, then it will open Help Viewer
        # before the test, during script compilation.
        
        if ps -xc|grep -sq 'Help Viewer$'; then
        	osascript -e 'tell application "Help Viewer" to open "file:///"'
        fi
        osascript <<-APPLESCRIPT
        	tell app "Help Viewer"
        	    handle url "file:///Library/Documentation/Help/AppleScript.help/Contents/Resources/English.lproj/AppleScript.html"
        	    activate
        	end tell	
        APPLESCRIPT
      :input: none
CAB527E2-384C-46CE-96E0-641F941C9776: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Lout
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: CAB527E2-384C-46CE-96E0-641F941C9776
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t lout "$TM_FILEPATH"
      :input: none
2803EE1A-6878-47C7-BB7F-3C1B69315209: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Archive Completed
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: /
        modifiers: 
        - :alt
        - :super
      :uuid: 2803EE1A-6878-47C7-BB7F-3C1B69315209
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTD.rb'
        include GTD
        file = ENV['TM_FILEPATH']
        obj = GTDFile.new(file)
        obj.cleanup_projects
        log = File.open(File.join(File.dirname(file),"GTD.gtdlog"),"a")
        	log.write MyLogger.dump + "\n"
        log.close
        puts obj.dump_object
      :input: none
63F3B3B7-CBE2-426B-B551-657733F3868B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby, source.ruby.rails
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 63F3B3B7-CBE2-426B-B551-657733F3868B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_BUNDLE_SUPPORT}/bin/linked_ri.rb\""
      :input: selection
200ED3B8-A64B-11D9-B384-000D93382786: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Make Script Executable
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: X
        modifiers: 
        - :control
        - :super
      :uuid: 200ED3B8-A64B-11D9-B384-000D93382786
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if chmod +x "${TM_FILEPATH}" && [[ -x "${TM_FILEPATH}" ]]
           then echo "${TM_FILEPATH} is now executable"
           else echo "Failed making ${TM_FILEPATH} executable"
        fi
      :input: none
6BC03260-79E4-47B6-87CE-020BD066E0FB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Descriptives\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :alt
        - :super
      :uuid: 6BC03260-79E4-47B6-87CE-020BD066E0FB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # print "Got:" + STDIN.read
        
        require ENV['TM_SUPPORT_PATH'] +'/lib/ui.rb'
        opts = { "Mean" => "mean(${1:x})", 
                 "Variance" => "var(${1:x})",
                 "Std. Dev." => "sd(${1:x})",
                 "Correlation" => "cor(${1:x})",
                 "Five Num Sum" => "fivenum(${1:x})",
                 "Quantiles" => "quantile(${1:x},${2:quantiles})",
                 "Median" => "median(${1:x})",
        		"Max" => "max(${1:x}${2:, na.rm=TRUE})",
        		"Min" => "min(${1:x}${2:, na.rm=TRUE})",
        		"Range" => "range(${1:x}${2:, na.rm=TRUE})"
        }
        keys = opts.keys.sort
        ans = TextMate::UI.menu(keys)
        TextMate.exit_discard unless ans
        print opts[keys[ans]]
      :input: none
2E03E8C8-DC99-4D15-AE46-0E8DCE6BBE6F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Yahoo Web Search
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Y
        modifiers: 
        - :control
      :uuid: 2E03E8C8-DC99-4D15-AE46-0E8DCE6BBE6F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = ENV['DIALOG']
        require SUPPORT + '/lib/escape'
        require SUPPORT + '/lib/osx/plist'
        require SUPPORT + '/lib/exit_codes'
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/yahoo"
        require 'erb'
        
        input = STDIN.read
        query = e_url(input)
        yahoo = WebSearch.new('TM_YAHOO', query, 'all', 10, 1, nil, 1)
        ysuggest = []
            yahoo.parse_results.each {|result| 
                ysuggest << { 
                  'title' => result['Title'].gsub('"','&raquo;'),
                  'url' => result['Url']}
            }
            plist = { 'menuItems' => ysuggest }.to_plist
        
            res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
            TextMate.exit_show_tool_tip "No matches found" unless res.has_key? 'selectedMenuItem'
            url = res['selectedMenuItem']['url']
            title = res['selectedMenuItem']['title']
        
            print ERB.new(ENV['TM_LINK_FORMAT']).result
      :input: selection
6511380B-D4C7-408B-85FF-9E98C6AAEB4A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Yahoo Related Suggestion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Y
        modifiers: 
        - :control
      :uuid: 6511380B-D4C7-408B-85FF-9E98C6AAEB4A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = ENV['DIALOG']
        require SUPPORT + '/lib/escape'
        require SUPPORT + '/lib/osx/plist'
        require SUPPORT + '/lib/exit_codes'
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/yahoo"
        
        input = STDIN.read
        query = e_url(input)
        yahoo = RelatedSuggestion.new('TM_YAHOO', query, 'all', 10, 1, nil, 1)
        ysuggest = []
            yahoo.parse_analysis.each {|result| 
                ysuggest << { 
                  'title' => result}
            }
            plist = { 'menuItems' => ysuggest }.to_plist
        
            res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
            abort unless res.has_key? 'selectedMenuItem'
            TextMate.exit_replace_text res['selectedMenuItem']['title']
      :input: selection
900C7391-7C63-4D1C-AF83-9F3E497F6A7F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Undo State Change
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 900C7391-7C63-4D1C-AF83-9F3E497F6A7F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: u
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        if (oldtask[0] != "+") and (oldtask[0] != "^"):
        	sys.stdout.write("-  " + oldtask[3:])
        else:
            sys.stdout.write(oldtask)
      :input: selection
44C9C59C-89F9-11D9-9326-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveActiveFile
      :name: Validate Syntax (PyCheckMate)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: 44C9C59C-89F9-11D9-9326-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: ^(.*)\s+line:\s+(\d+)\s+col:\s+(\d+).*$
      :command: |-
        TPY=${TM_PYTHON:-python}
        
        "$TPY" "$TM_BUNDLE_SUPPORT/bin/pycheckmate.py" "$TM_FILEPATH"
      :input: none
FCD467AA-0FAF-4B63-A613-E7175B80709A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scilab
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Script (with getd)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: FCD467AA-0FAF-4B63-A613-E7175B80709A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export APP=`find_app Scilab-4.1.app`
        LAUNCHER=$APP/Contents/Resources/launcher.sh
        if [ -x "$LAUNCHER" ]
        then
        	DIRECTORY=`echo "$TM_DIRECTORY" | sed -e "s/'/''/g" -e "s/\"/\"\"/g"`
        	FILEPATH=`echo "$TM_FILEPATH" | sed -e "s/'/''/g" -e "s/\"/\"\"/g"`
        	echo "cd('$DIRECTORY'); getd('$DIRECTORY'); exec('$FILEPATH');" > /tmp/scilab.sce
        	$LAUNCHER -f /tmp/scilab.sce
        else
        	echo "Scilab 4.1 not found."
        	echo "Please copy Scilab-4.1.app to the Applications directory."
        fi

      :input: none
09BB96F2-75FD-48A7-8314-B5B56B09B477: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, text.html.ruby, source.ruby.rails.embedded.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: File on Current Line
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gA==

        modifiers: 
        - :alt
        - :super
      :uuid: 09BB96F2-75FD-48A7-8314-B5B56B09B477
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_file_on_current_line.rb"
      :input: none
FA3989DC-F289-4E76-A441-57EA6A9C7141: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: GreaseSpot Wiki
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: FA3989DC-F289-4E76-A441-57EA6A9C7141
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://wiki.greasespot.net/Main_Page'>"
      :input: none
95F8AD0C-B0B5-4A3E-ACD2-4786F2E02318: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.remind
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: This Month
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 95F8AD0C-B0B5-4A3E-ACD2-4786F2E02318
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # show this month's calendar
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Calendar for this Month" "Remind"
        require_cmd rem
        
        rem ${REMIND_FLAGS:--mb1} -pl|rem2html --tableonly --nomini|perl -pe 's/<table class="caltable" border=1  bgcolor="#FFFFFF" width=100%>/<table class="pro_table remind_table" cellspacing="0" cellpadding="5" width="100%">/'
        
        html_footer

      :input: none
876E1F2C-8FD2-4E93-803D-55F182BDA009: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: markup.underline.link.internal.man
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Visit Man Page
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 876E1F2C-8FD2-4E93-803D-55F182BDA009
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Place a symlink to "$TM_BUNDLE_SUPPORT/mman" somewhere in your path
        # and then you can bring up man pages in TextMate via the terminal
        # using "mman <manpage>"
        
        "$TM_BUNDLE_SUPPORT/mman"
      :input: selection
950B3108-E2E3-414E-9C4C-EE068F59A895: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create HTML From Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 950B3108-E2E3-414E-9C4C-EE068F59A895
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby -rjcode -Ku\n\
        require \"#{ENV['TM_BUNDLE_SUPPORT']}/lib/doctohtml.rb\"\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/progress.rb\"\n\
        unit = ENV.has_key?('TM_SELECTED_TEXT') ? 'selection' : 'document'\n\
        TextMate.call_with_progress(:message => \"Creating HTML version of #{unit}\xE2\x80\xA6\") do\n  print document_to_html( STDIN.read, :include_css => !ENV.has_key?('TM_SELECTED_TEXT') )\n\
        end\n"
      :input: selection
D79E0650-C374-11D9-8A81-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Update to Newest
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: D79E0650-C374-11D9-8A81-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_RUBY:=ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	svk = ENV['TM_SVK'] || "svk"
        	puts %x{#{svk} update #{TextMate.selected_paths_for_shell}}
        END

      :input: none
57BED2F3-62ED-4DDF-B1C5-1395BF8CC2B4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 57BED2F3-62ED-4DDF-B1C5-1395BF8CC2B4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        echo let ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD} \${1:args} =
        echo -n	\$0

      :input: selection
97E895A4-B5B9-11D9-80D4-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Diff With Revision In Label\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 97E895A4-B5B9-11D9-80D4-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "labels=`\"${TM_P4:=p4}\" labels \"$TM_FILEPATH\" | cut -d \" \" -f 2`\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$labels\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No labels found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Diff '$(basename \"$TM_FILEPATH\")' with version in label:\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [ $revs = \"false\" ]\n\
        then\n\
        \tosascript >/dev/null 2>&1 -e 'tell application \"TextMate\" to activate' &\texit 0\t\n\
        fi\n\n\
        revs=( $revs )\n\n\
        ruby -I \"$TM_BUNDLE_SUPPORT/lib/\"<<END\n\
        \trequire 'p4_diff'\n\
        \tPerforce::diff_active_file(\"@$revs\", \"Perforce\xE2\x80\x94Diff With Revision in Label\xE2\x80\xA6\")\n\
        END\n"
      :input: none
789CCAF4-24F2-4310-84E6-F0972849DA53: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.d
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 789CCAF4-24F2-4310-84E6-F0972849DA53
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd build
        build "$TM_FILEPATH" | pre
      :input: none
34B55C0A-C51E-4137-9811-B805640042C8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Section in begin/end
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
      :uuid: 34B55C0A-C51E-4137-9811-B805640042C8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        $: << ENV['TM_SUPPORT_PATH']
        require 'lib/escape'
        
        def make_tab()
        	size = ENV['TM_TAB_SIZE'].to_i
        	if ENV['TM_SOFT_TABS'] == 'YES'
        		return ' ' * size
        	else
        		return "\t"
        	end
        end
        
        
        text = ENV['TM_SELECTED_TEXT']
        indent = text[/^\s*/]
        tab = make_tab()
        text = text.to_a.map() { |l| tab + l }
        
        puts indent + "begin"
        print e_sn(text.join().chomp() + "\n")
        puts indent + "end"
      :input: selection
CF06E855-A45F-4AC0-A5F3-D9A99B2D7059: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: CF06E855-A45F-4AC0-A5F3-D9A99B2D7059
      :disable_output_auto_indent: 
      :bundle_uuid: 0D39D7BD-CD02-48EF-BB9C-2210BFFC5AD7
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "CTags Help" "CTags"
        Markdown.pl <<'EOF'|SmartyPants.pl
        
        CTags.tmbundle
        ---------------
        
        The CTags bundle allows you to quickly look up function definitions, variables etc. It uses the [Exuberant CTags][1] program freely available under the terms of the [GNU General Public License][2] to generate a list of definitions, and presents any match for the current word when invoked.
        
        Usage
        -----
        
        With the cursor over a word for which you want to see the definition, select *CTags/Find Tags* or press the assigned shortcut. A window will show up listing all locations where the term was defined, as well as your current location so you can easily find your way back. If only one location is found, TextMate will jump there (this behavior can be changed with the  *TmCtagsAutoJump* environment variable, see below).
        
        If you modify the source code, the definition list will become out of sync with your code. Invoke *CTags/Update Tags* to update it.
        
        **Note:** The definitions are stored in a file named *tmtags* in your project root directory. It is safe to delete this file when no longer needed. The bundle will recreate it on the fly whenever needed.
        
        To exclude certain files or directories (eg source control files), add the appropiate options to the `.ctags` file in your home directory. An example:
        
        	--exclude=*~
        	--exclude=\._*
        	--exclude=*\.bak
        	--exclude=\.svn
        	--exclude=_darcs
        
        Please see the ctags man page or the [Exuberant CTags][1] documentation for more info.
        
        
        Configuration
        -------------
        
        The CTags bundle can be configured by adding environment variables, either to a project to only change the behavior within a project, or globally (TextMate/Preferences/Advanced/Shell Variables). The following variables are honored:
        
        * TmCtagsAutoJump
        
        Set this variable to 0 to avoid TextMate jumping when a unique definition is found. Default value: *1*.
        
        * TmCtagsTagFileName
        
        The file name used to store tags in. Default is *tmtags*.
        
        * TM\_TAGS\_FILE
        
        For backward-compatibility with the *Lookup Definition (ctags)* command from the Source bundle. Only makes sense inside a project. If set must contain the full path and filename for the tags file ctags will use. The path also is the root from which ctags does its work (although additional directories can be added).
        
        * TmCtagsTimeout
        
        The timeout in seconds after which ctags is considered hanging (there are some bugs in ctags) and it is killed. Default is 30 seconds. For really large projects that may need to be increased.
        
        * TmCtagsSoundDir
        
        Directory in which sound files are expected. Default is *'/System/Library/Sounds'*.
        
        * TmCtagsOkSingleSound
        
        The name for the sound file played when a unique definition is found. If the extension is *.aiff* it can be omitted. Set to empty string for no sound. Default is an empty string.
        
        * TmCtagsOkMultiSound
        
        The name for the sound file played when multiple definitions are found. If the extension is *.aiff* it can be omitted. Set to empty string for no sound. Default is *Frog*.
        
        * TmCtagsErrorSound
        
        The name for the sound file played when no definitions are found. If the extension is *.aiff* it can be omitted. Set to empty string for no sound. Default is *Sosumi*.
        
        * TM\_CTAGS\_ADDITIONAL\_DIRECTORIES
        
        Additional directories for CTags to process for tags. Directories should be seperated by the colon character (":").
        
        Credits
        -------
        
        This bundle is maintained by [Gerd Knops][3].
        
        Feedback is welcome: gerti-ctagstmb@bitart.com
        
        [1]: http://ctags.sourceforge.net/
        [2]: http://www.gnu.org/copyleft/gpl.html
        [3]: http://gerd.knops.com/
        
        EOF
        html_footer
      :input: none
F674E1B2-5BA5-4397-9D54-D48623E9F2FD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.matlab
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: subplot
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: F674E1B2-5BA5-4397-9D54-D48623E9F2FD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: sub
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        #
        # Looks through code, finds the last subplot function
        # and pre-populates the new subplot call with values
        # from last function. If the input values are numeric,
        # we increment the last argument.
        #
        linesbefore = ENV['TM_LINE_NUMBER'].to_i-1
        columns = ENV['TM_LINE_INDEX'].to_i
        textArray = STDIN.readlines
        myStr = textArray[0...linesbefore].join
        myStr << textArray[linesbefore].to_s.slice(0...columns)
        
        if myStr =~ /.*(subplot\()(\w+[*]?)(\,)(\w+[*]?)(\,)(\w+[*]?)(\))/m
          subrows, subcols, subthis = $2, $4, $6
        
          # We have a pure number
          subthis = subthis.to_i + 1 if subthis =~ /\A\d+\z/
        else
          subrows = "rows"
          subcols = "cols"
          subthis = "current"
        end
        
        print "subplot(${1:", subrows, "},"
        print "${2:", subcols, "},"
        print "${3:", subthis, "})${4:, }$0"
      :input: document
774E75DA-A747-4CB4-B8AF-DE720B01E295: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 774E75DA-A747-4CB4-B8AF-DE720B01E295
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_RUBY:-ruby}\" -- \"$TM_BUNDLE_SUPPORT/lib/php_mate.rb\""
      :input: document
93992270-EA57-4AE0-BF91-16C9110A41E1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Decimal to Octal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: 93992270-EA57-4AE0-BF91-16C9110A41E1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: bc <<<"obase=8;$(cat)"|tr -d \\n
      :input: selection
14CE2968-B4F4-4AB5-8A26-5F0EC156E1D0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt meta.note
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Action
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "{"
        modifiers: 
        - :control
      :uuid: 14CE2968-B4F4-4AB5-8A26-5F0EC156E1D0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        text = STDIN.read
        lines = text.split("\n")
        row = ENV['TM_LINE_NUMBER'].to_i
        m = lines[row-1].scan(/^\[\d+\]/)[0]
        txt = text.slice(0..text.index(m))
        lines = txt.split("\n")
        line = lines.length
        last_line = lines.last
        column = last_line.scan(/^\s*@[^\s]+\s+/)[0].length + 1
        `open "txmt://open?line=#{line}&column=#{column}"`

      :input: document
778EA411-C3C7-42F0-802B-4DE23326E328: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r, text.sweave
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: SWeave project in R
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 778EA411-C3C7-42F0-802B-4DE23326E328
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # this command requires that TM_SWEAVE_MASTER is set
        
        M=${TM_SWEAVE_WD:=${TM_DIRECTORY}}
        osascript -e 'tell application "R" to activate' -e "tell application \"R\" to cmd \"setwd('$M')\nSweave('$TM_SWEAVE_MASTER')\ndate()\""
      :input: selection
37E7E7F5-DD1E-4306-B258-0F9176DC8D7E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.sql
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Condensed SQL
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :alt
        - :super
      :uuid: 37E7E7F5-DD1E-4306-B258-0F9176DC8D7E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env perl
        $/=\0;$_=<>; # Read all input
        
        s/\s*\-\-.*$//g; # Strip comments
        
        1while s@^(([^'"]*["'][^'"]*["'])*[^"']*)(\n+|\s{2,})@$1 @; # Compact whitespace
        
        # set defaultCStringEncoding to UTF-8 and open pbcopy
        open(PBCOPY, '|__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbcopy');
        print PBCOPY; # Print the SQL to pbcopy
        close PBCOPY;
        print "Copied SQL to Clipboard";
      :input: selection
D10F1CAC-BF1D-456D-B1E5-6AA5E3DD40ED: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Edit Configuration File
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: D10F1CAC-BF1D-456D-B1E5-6AA5E3DD40ED
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        AccountFile="$HOME/Library/Preferences/com.macromates.textmate.latex_config.plist"
        if [[ ! -e "$AccountFile" ]]; then
            cat "$TM_BUNDLE_SUPPORT/latex.config" > "$AccountFile"
        fi
        open txmt://open?url=file://$AccountFile
      :input: none
F61688AA-C298-4D58-A9DE-87891797B2F9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: From Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: c
        modifiers: 
        - :alt
        - :control
      :uuid: F61688AA-C298-4D58-A9DE-87891797B2F9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb";
        text = STDIN.read
        text = `pbpaste` if text.empty?
        print "${1:${2:x} = }c("+e_sn(text).sub(/\s+$/,"").gsub(/([a-zA-Z]\w+)/, '"\1"').gsub(/\s+/,",") + ")"
      :input: selection
FA4AA254-EB7D-4B43-AC67-066AA9E8E8D9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.haskell
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Infix Function Call From Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "'"
        modifiers: 
        - :control
      :uuid: FA4AA254-EB7D-4B43-AC67-066AA9E8E8D9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env python
        
        import sys
        x = sys.stdin.read().strip()
        if x:
        	sys.stdout.write("\`%s\`$0" % x)
        else:
        	sys.stdout.write("\`$1\`$0")

      :input: selection
05D7D0D5-C981-40CA-85D6-0539B2E9B7EA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Reload Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 05D7D0D5-C981-40CA-85D6-0539B2E9B7EA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd moinedit
        cat "$(moinedit -r)"
      :input: document
19A73EFD-E8D2-44D1-A3ED-EF604BB290EF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Decode Base 64 Line / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 19A73EFD-E8D2-44D1-A3ED-EF604BB290EF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} -e 'print STDIN.read.unpack("m*")[0]'
      :input: selection
07095A35-FA36-4BA2-BED6-A369EA5F0A73: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: MTASC Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 07095A35-FA36-4BA2-BED6-A369EA5F0A73
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "MTASC Help" "ActionScript"
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer
      :input: none
8C7398D7-1BC2-4F4D-9BA9-AE1520D764AD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Bundles on Repository
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8C7398D7-1BC2-4F4D-9BA9-AE1520D764AD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_RUBY:-ruby}\" -wKU \"$TM_BUNDLE_SUPPORT/show_bundles.rb\" &>/dev/null &"
      :input: none
A952F27C-2200-4C2C-ABC9-69BD36FF76DF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Install AutoUpdater
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A952F27C-2200-4C2C-ABC9-69BD36FF76DF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        mkdir -p ~/Library/LaunchAgents/
        
        cd ~/Library/Application\ Support/TextMate/Support
        if [[ $? == 0 ]];
        then
         svn up . --no-auth-cache --non-interactive
        else
         mkdir ~/Library/Application\ Support/TextMate/Support
         svn co http://macromates.com/svn/Bundles/trunk/Support/ ~/Library/Application\ Support/TextMate/Support --no-auth-cache --non-interactive
        fi
        
        $(cat <<EOF > ~/Library/LaunchAgents/com.macromates.textmate.bundleupdate.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN
        http://www.apple.com/DTDs/PropertyList-1.0.dtd >
        <plist version="1.0">
        <dict>
             <key>Label</key>
             <string>com.macromates.textmate.bundleupdate</string>
        	 <key>Program</key>
        	 <string>$TM_BUNDLE_SUPPORT/bin/autoupdate.sh</string>
        	 <key>RunAtLoad</key>
        	 <true/>
        	 <key>StartCalendarInterval</key>
        	 <dict>  
        	 	<key>Hour</key>
        	 	<integer>12</integer>
        	 	<key>Minute</key>
        	 	<integer>15</integer>
        	 </dict>
        </dict>
        </plist>
        )
        
        { launchctl load ~/Library/LaunchAgents/com.macromates.textmate.bundleupdate.plist } &>/dev/console &

      :input: none
B270255C-1AE7-47FA-B3A7-38E983402C36: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scheme
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Evaluate selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
      :uuid: B270255C-1AE7-47FA-B3A7-38E983402C36
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Evaluate the current seletion in our Scheme interpreter
        #
        # The interpreter you use should be set in the environment
        # variable TM_SCHEME_EVALUATOR 
        
        INTERPRET=${TM_SCHEME_INTERPRETER:=csi}
        CMD=$(basename "$INTERPRET")
        
        # Run depending on the system are we on?
        if [ $CMD == "mzscheme" ] ; then
        	"$INTERPRET" -vm -e "$TM_SELECTED_TEXT"
        elif [ $CMD == "csi" ] ; then
        	"$INTERPRET" -q < /dev/stdin
        fi
      :input: selection
EE76702D-2370-44B6-85E6-772922D963A2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Number List
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "#"
        modifiers: 
        - :control
      :uuid: EE76702D-2370-44B6-85E6-772922D963A2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        ENV['TM_SELECTED_TEXT'].to_s.each_line() { |line|
        	if(line =~ /^#/)
        		print("##{line}")
        	else
        		print("# #{line}")
        	end
        }

      :input: selection
C183920D-A126-11D9-A5A2-000D93C8BE28: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Decode Entities in Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: C183920D-A126-11D9-A5A2-000D93C8BE28
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $KCODE = 'U'
        
        $entity_to_char = { }
        File.open("#{ENV['TM_BUNDLE_SUPPORT']}/entities.txt").read.scan(/^(\d+)\t(.+)$/) do |key, value|
          $entity_to_char[value] = [key.to_i].pack('U')
        end
        
        res = STDIN.read.gsub(/&(?:([a-z0-9]+)|#([0-9]+)|#x([0-9A-F]+));/i) do |m|
          if $1 then
            $entity_to_char[$1] || m
          else
            [$2 ? $2.to_i : $3.hex].pack("U")
          end
        end
        
        print res

      :input: selection
B9EE97CD-E059-4FE5-AD3A-EEC7D5A23E99: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Documentation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: B9EE97CD-E059-4FE5-AD3A-EEC7D5A23E99
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: echo '<meta http-equiv="refresh" content="0; http://www.hobix.com/textile/">'
      :input: none
8104FD3A-DD58-45CA-8FC8-F64680261F13: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Import Frontmost Project
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8104FD3A-DD58-45CA-8FC8-F64680261F13
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        # import the frontmost opened project window in Xcode
        
        source_path=$(osascript -e 'tell application "Xcode" to get the path of project 1')
        dest_path="${source_path%.*}.tmproj"
        
        # FIXME probably should move the old dest_path somewhere and only nuke it if the conversion is successful
        
        "$TM_BUNDLE_SUPPORT/bin/xcode_to_tmproj" "$source_path/project.pbxproj" "$dest_path" && open "$dest_path"
        
      :input: none
8DCBE1EB-A3CC-4559-872E-34A3643F0BC4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Setup Blogs
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8DCBE1EB-A3CC-4559-872E-34A3643F0BC4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        AccountFile="$HOME/Library/Preferences/com.macromates.textmate.blogging.txt"
        if [[ ! -e "$AccountFile" ]]; then
            echo "# List of Blogs
        #
        # Enter a blog name followed by the endpoint URL
        #
        # Blog Name      URL
        example          http://user@example.com/xmlrpc" > "$AccountFile"
        fi
        AccountFile=${AccountFile// /%20} # turn spaces into %20
        open txmt://open?url=file://$AccountFile
      :input: none
A38AD71E-0665-4E1E-8FEF-B2D22291BE0D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey meta.header meta.directive
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Continue Header URL
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: A38AD71E-0665-4E1E-8FEF-B2D22291BE0D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.continue_header_url
      :input: document
ED1485C9-393F-4B62-A8E8-62B242E4C7CF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.fortran
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Quick Open
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: ED1485C9-393F-4B62-A8E8-62B242E4C7CF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        line=$TM_CURRENT_LINE
        header=$TM_SELECTED_TEXT
        
        # extract header from current line
        if [[ -z "$header" ]] && $(egrep -q <<<"$line" '#(import|include)'); then
           header=$(sed -n <<<"$line" 's/[^<"]*[<"]\([^">]*\).*/\1/p')
        fi
        
        # ask user about header
        if [[ -z "$header" ]]; then
           res=$(CocoaDialog inputbox --title "Open Header Quickly" --no-newline --informative-text "Header name?"  --text "foobar"  --button1 "Open" --button2 "Cancel")
           [[ $(head -n1 <<<"$res") == "2" ]] && exit
           header=$(tail -n1 <<<"$res")
        fi
        
        # If Spotlight is available, avail ourselves of it.
        # otherwise, use the old 'find'-based method.
        #
        # The Spotlight method has the advantage of being
        # both reasonably fast and catching all the corner
        # cases, many of which are missed by the old method.
        #
        if [[ `which mdfind` != *"not found" ]]; then
        	# we have Spotlight
        	files=`${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/SpotlightSearch.rb" "$header"`
        else
        	# old method
        	arr=("/usr/include"
        	"${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        	)
        
        	files=$(for dir in "${arr[@]}";
        		do find "$dir" -path "*/$header"; done|sort|uniq)
        fi
        
        if [[ -n "$files" ]];
           then IFS=$'\n'; mate $files &>/dev/null &
           else echo "No headers found."
        fi

      :input: selection
DB5085DA-3E95-4020-8521-C9702168F160: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to PDF
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DB5085DA-3E95-4020-8521-C9702168F160
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "# first figure out a name for the result\n\
        NAME=\"${TM_FILENAME:-untitled}\"\n\
        BASENAME=\"${NAME%.*}\"\n\
        DST=\"/tmp/$BASENAME\"\n\n\
        MultiMarkdown.pl|SmartyPants.pl|\"${TM_RUBY:-ruby}\" >\"$DST.html\" -KU -pe '$_.gsub!(/[^\\x00-\\x7F]/) { |ch| \"&##{ch.unpack(\"U\")[0]};\" }'\n\n\
        # show the generated HTML file\n\
        cat \"$DST.html\"\n\n\
        # convert to PDF with htmldoc\n\
        require_cmd htmldoc\n\
        htmldoc -f \"$DST.pdf\" --header \"\" --footer \"\" --webpage \"$DST.html\"\n\n\
        # open in the users PDF viewer (falling back on Preview)\n\
        viewer=$(find_app \"${TM_PDF_VIEWER:-Preview.app}\")\n\
        if [ $? = 0 ];\n\
        \tthen open -a \"$viewer\" \"$DST.pdf\"\n\
        \telse echo \"Could not find your PDF viewer: \xE2\x80\x98${TM_PDF_VIEWER:-Preview.app}\xE2\x80\x99\"\n\
        fi\n"
      :input: selection
B8902A32-4E8C-4A20-ABB5-7563B908A30B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: B8902A32-4E8C-4A20-ABB5-7563B908A30B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        # Lots of stuff in this command shamelessly stolen from Ruby's Documentation for Word / Selection\n\n\
        require \"#{ENV[\"TM_SUPPORT_PATH\"]}/lib/exit_codes\"\n\
        require \"#{ENV[\"TM_SUPPORT_PATH\"]}/lib/escape\"\n\
        require \"#{ENV[\"TM_SUPPORT_PATH\"]}/lib/web_preview\"\n\
        require \"#{ENV[\"TM_SUPPORT_PATH\"]}/lib/ui\"\n\
        require File.join(ENV[\"TM_SUPPORT_PATH\"], \"lib/current_word\")\n\n\
        require 'base64'\n\n\
        LINKED_RHELP = \"#{ENV[\"TM_BUNDLE_SUPPORT\"]}/bin/LINKED_RHELP.rb\"\n\
        LIBDIR = File.join((ENV[\"R_HOME\"] || '/Library/Frameworks/R.framework/Resources'), '/library')\n\
        # first escape for use in the shell, then escape for use in a JS string\n\
        def e_js_sh(str)\n  (e_sh str).gsub(\"\\\\\", \"\\\\\\\\\\\\\\\\\")\n\
        end\n\n\
        # escape single-quotes for use in javascript strings\n\
        def e_js(str)\n  str.gsub(\"'\", \"\\\\'\")\n\
        end\n\n\
        # Prompts the user for words, for the cases where matches are not found\n\
        def get_word_from_user(prompt = \"Please select word to look for\")\n  TextMate::UI.request_string(:title => \"Look up in R Documentation\", :prompt => prompt)\n\
        end\n\
        def look_up_term(term)\n  `awk -- '/^Entry:/ { entry = $2 } /[[:space:]]'#{e_sh Regexp.escape(term)}'([[:space:]]|$)/,/^URL:/ { if(match($0,/^URL:/)) { sub(/^URL: /, \"\"); sub(/^(\\\\.\\\\.\\\\/)*library\\\\//, \"\"); print entry, $0; } }' #{e_sh LIBDIR}/*/CONTENTS`.split(\"\\n\")\n\
        end\n\n\
        term = Word.current_word(/\\w./)\n\
        if term.empty? then\n  TextMate.exit_discard unless term = get_word_from_user\n\
        end\n\
        # TextMate.exit_show_tool_tip(\"Please select a term to look up.\") if \n\n\
        files = look_up_term(term)\n\
        while files.empty? do\n  TextMate.exit_discard unless term = get_word_from_user(\"Current word not found! Please select word to look for\")\n  files = look_up_term(term)\n\
        end\n\
        # TextMate.exit_show_tool_tip(\"Nothing found for #{term}.\") if files.empty?\n\n\
        if files.size > 1\n  documentation = \"<h1>Multiple Matches:</h1><ul>\"\n  files.each do |file|\n    name,path = file.split(\" \", 2)\n    documentation << %{<li><a href=\"javascript:window.top.location.href='javascript:rhelp(\\\\'#{path}\\\\')'\">#{name}</a></li>}\n  end\n  documentation << \"</ul>\"\n\
        else\n  name,path = files.first.split(\" \", 2)\n  documentation = `#{e_sh LINKED_RHELP} 2>&1 '#{path}' '#{LIBDIR}'`\n\
        end\n\n\
        html_header(\"Documentation for \xE2\x80\x98#{term}\xE2\x80\x99\", \"R help\", <<-HTML)\n  <script type=\"text/javascript\" charset=\"utf-8\">\n    // function taken from http://textsnippets.com/posts/show/686\n    function getElementsByClassName(oElm, strTagName, strClassName){\n      var arrElements = (strTagName == \"*\" && document.all)? document.all : oElm.getElementsByTagName(strTagName);\n      var arrReturnElements = new Array();\n      strClassName = strClassName.replace(/\\\\-/g, \"\\\\\\\\-\");\n      var oRegExp = new RegExp(\"(^|\\\\\\\\s)\" + strClassName + \"(\\\\\\\\s|$)\");\n      var oElement;\n      for(var i=0; i<arrElements.length; i++){\n        oElement = arrElements[i];\n        if(oRegExp.test(oElement.className)){\n          arrReturnElements.push(oElement);\n        }\n      }\n      return (arrReturnElements)\n    }\n    var workingName;\n    function rhelp(path) {\n      TextMate.isBusy = true;\n      // double-escaping is necessary because ruby heredocs interpret backslash-escapes\n      workingName = path.replace(/.*\\\\/|\\\\.html$/, \"\");\n        // Apparently synchronous TextMate.system() has a habit of returning not quite\n        //  all of the data so we're trying asynchronous now\n      var sysObj = TextMate.system(\"#{e_js_sh LINKED_RHELP} 2>&1 '\"+path.replace(/'/,\"'\\\\\\\\''\")+\"' #{e_js_sh LIBDIR} base64\", rhelpDone);\n    }\n    function rhelpDone(sysObj) {\n      TextMate.isBusy = false;\n      var res = sysObj.outputString;\n      var elt = document.getElementById(\"actual_output\");\n      elt.data = 'data:text/html;charset=utf8;base64,' + res;\n      // for some reason, the object tag doesn't like to refresh properly when\n      // its data is set from this asynchronous event handler\n      // So lets force it to re-draw by poking its className\n      elt.className = elt.className;\n      var docString = \"Documentation for \xE2\x80\x98\" + workingName + \"\xE2\x80\x99\";\n      var headline = getElementsByClassName(document, \"p\", \"headline\")[0];\n      headline.innerText = docString;\n      document.getElementsByTagName(\"title\")[0].innerText = docString;\n    }\n    function outputInit() {\n      var elt = document.getElementById(\"actual_output\");\n      elt.data = 'data:text/html;charset=utf8;base64,#{Base64.encode64(documentation).gsub(\"\\n\", \"\")}';\n    }\n  </script>\n  <style type=\"text/css\">\n  body {\n  \toverflow: hidden;\n  }\n  #output_wrapper {\n    display: table;\n    border-spacing: 0;\n    margin: 0;\n    padding: 0;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n  .output_wrapper_row {\n    display: table-row;\n  }\n  .output_wrapper_row > * {\n    display: table-cell;\n    width: 100%;\n    height: 100%;\n  }\n  #actual_output {\n    background-color: white;\n  }\n  </style>\n\
        HTML\n\n\
        puts <<-HTML\n  <div id=\"output_wrapper\">\n  <div class=\"output_wrapper_row\"><div style=\"height: 60px\">&nbsp;</div></div>\n    <div class=\"output_wrapper_row\">\n      <object id=\"actual_output\"></object>\n    </div>\n  </div>\n  <script type=\"text/javascript\" charset=\"utf8\">\n    outputInit();\n  </script>\n\
        HTML\n\
        html_footer\n\
        TextMate.exit_show_html\n"
      :input: none
BF39FA53-3EFD-4CA8-9789-BA606C7883B9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BF39FA53-3EFD-4CA8-9789-BA606C7883B9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Transmit Bundle Help\" \"Transmit\"\n\
        \"$TM_SUPPORT_PATH/lib/markdown_to_help.rb\" <<'MARKDOWN'\n\n\
        # Synopsis\n\n\
        The Transmit bundle offers you a way to have the current document or its containing folder uploaded via the [Transmit][] file transfer program.\n\n\
        [Transmit]: http://www.panic.com/transmit/\n\n\
        # DockSend Setup\n\n\
        The two commands with a \xE2\x80\x9C(DockSend)\xE2\x80\x9D suffix assumes that you have configured Transmit to have DockSend enabled for the containing folder of the current document.\n\n\
        This is done by starting Transmit, connect to your server as usual and then from the Favorites menu select Add to Favorites\xE2\x80\xA6\n\n\
        In the sheet which appears, you need to click the downward pointing arrow with a \xE2\x80\x9CMore Options\xE2\x80\x9D label.\n\n\
        This expands the sheet so it looks like in the following picture:\n\n\
        ![Add to Favorites](add_to_favorites.png)\n\n\
        There are 3 settings of importance here:\n\n 1. **Remote Path** \xE2\x80\x94 This is where, on the server, you want your files uploaded.\n\n 2. **Local Path** \xE2\x80\x94 This is where the files are located on your own machine.\n\n 3. **Use DockSend** \xE2\x80\x94 Check this box to enable the feature.\n\n\
        In the picture we have set the remote path to `/usr/home/raven/public_html` and the local path to `~/scavenger`.\n\n\
        What this means is that if we edit `~/scavenger/index.html` and select Trasmit \xE2\x86\x92 Send Document (DockSend) then it will be uploaded to the server as `/usr/home/raven/public_html/index.html`\n\n\
        MARKDOWN\n\
        html_footer\n"
      :input: none
093DA4F2-D97F-4309-B869-6970C090A539: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: C & C++ Library Completions
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 093DA4F2-D97F-4309-B869-6970C090A539
      :disable_output_auto_indent: 
      :bundle_uuid: 4675A940-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        line = ENV['TM_CURRENT_LINE']
        
        def candidates_or_exit(methodSearch="")
          candidates = []
          ["CLib.txt.gz","C++Lib.txt.gz"].each do |name|
          zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/#{name} }
          candidates += zGrepped.split("\n")
          end
          TextMate.exit_show_tool_tip "No completion available" if candidates.empty?
          return candidates
        end
        
        def prettify(candidate)
          ca = candidate.split("\t")
          ca[0]+ca[1]
        end
        
        def snippet_generator(cand, s)
          	c = cand.split"\t"
          i = 0
          middle = c[1][1..-2].split(",").collect do |arg|
        	 "${"+(i+=1).to_s+":"+ arg.strip + "}" 
        	end.join(", ")
          c[0][s..-1]+"("+middle+")$0"
        end
        
        def pop_up(candidates, searchTerm)
          start = searchTerm.size
          prettyCandidates = candidates.map { |candidate| [prettify(candidate), candidate] }.sort
          if prettyCandidates.size > 1
            require "enumerator"
            pruneList = []  
        
            prettyCandidates.each_cons(2) do |a| 
              pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
            end
            pruneList << true
            ind = -1
            prettyCandidates = prettyCandidates.select do |a| #remove duplicates
              pruneList[ind+=1]  
            end
          end
        
          if prettyCandidates.size > 1
            #index = start
            #test = false
            #while !test
            #  candidates.each_cons(2) do |a,b|
            #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
            #  end
            #  break if test
            #  searchTerm << candidates[0][index].chr
            #  index +=1
            #end
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            pl = {'menuItems' => prettyCandidates.map { |pretty, full | { 'title' => pretty, 'cand' => full} }}
            io = open('|"$DIALOG" -u', "r+")
            io << pl.to_plist
            io.close_write
            res = OSX::PropertyList.load(io.read)
            if res.has_key? 'selectedMenuItem'
              snippet_generator( res['selectedMenuItem']['cand'], start )
            else
              ""
            end
          else
            snippet_generator( candidates[0], start )
          end
        end
        
        if ENV['TM_INPUT_START_LINE_INDEX']
          caret_placement =ENV['TM_INPUT_START_LINE_INDEX'].to_i -1
        else
          caret_placement =ENV['TM_LINE_INDEX'].to_i - 1
        end
        
        backContext = line[1+caret_placement..-1].match /^[a-zA-Z0-9_]/
        
        if backContext
          TextMate.exit_discard
        end
        
        
        alpha_and_caret = /[a-zA-Z_][_a-zA-Z0-9]*\(?$/
        if k = line[0..caret_placement].match(alpha_and_caret)
          candidates = candidates_or_exit(k[0])
          res = pop_up(candidates, k[0])
        else
          res = ""
        end
        print res

      :input: none
DCCF29B4-80E9-4DF8-A9EC-28F91611665F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.lisp
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: DCCF29B4-80E9-4DF8-A9EC-28F91611665F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Documentation for Word" "Common Lisp HyperSpec"
        read KEYWORD
        echo "<ul>"
        curl -s "http://www.lisp.org/HyperSpec/FrontMatter/Symbol-Index-Alphabetical.html" | grep -E "<LI><A.* HREF=\".+\"><B>.*$KEYWORD.*</B></A>" | sed -E "s/<LI><A.* HREF=\"\.\.(.+)\"><B>(.+)<\/B><\/A>/<li><a href=\"http:\/\/www.lisp.org\/HyperSpec\1\">\2<\/a><\/li>/"
        echo "</ul>"
        html_footer

      :input: selection
3E70551A-26B8-44FD-9D3F-25954E4ECDE4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Encode Base 64 Line / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 3E70551A-26B8-44FD-9D3F-25954E4ECDE4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} -e 'print STDIN.read.to_a.pack("m*")'
      :input: selection
729F1599-08BE-40B0-93D6-0482FA566CC7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.groovy
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Selected Snippet
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :alt
        - :super
      :uuid: 729F1599-08BE-40B0-93D6-0482FA566CC7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        if [ "$TM_SELECTED_TEXT" == "" ]; then
           exit_show_tool_tip "select some code to run"
        else
          "$GROOVY_HOME/bin/groovy" -e "$TM_SELECTED_TEXT"
          exit_show_html
        fi
        
      :input: selection
11743544-9E2A-49BF-BA5D-655EAD6445AA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Undo
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 11743544-9E2A-49BF-BA5D-655EAD6445AA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        $TM_HG rollback
      :input: none
59DD3EDA-43DB-4819-8C50-CCBBEED5B0F7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert to Revision...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 59DD3EDA-43DB-4819-8C50-CCBBEED5B0F7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        revs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Revert to Revision\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Revert '$(basename \"$TM_FILEPATH\")' to revision:\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\n\
        revs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\n\
        revs=( $revs )\n\n\
        if [[ -z $TM_SELECTED_FILES ]]; then\n   \"$TM_HG\" revert -r \"${revs[0]#r}\" \"$TM_FILEPATH\"\n\
        else\n   eval \"$TM_HG\" revert -r \"${revs[0]#r}\" $TM_SELECTED_FILES\n\
        fi\n\n\
        # will cause current file to be re-loaded\n\
        rescan_project\n\n"
      :input: none
6A811265-81DC-11D9-9AA2-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Selected Files in Project Drawer (HTML)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 6A811265-81DC-11D9-9AA2-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        eval arr=("$TM_SELECTED_FILES")
        if [[ ${#arr[@]} != 2 ]]; then
           echo -e "You need to select exactly two files in the project drawer."
           exit_show_tool_tip
        fi
        
        perl "$TM_BUNDLE_SUPPORT/Diff.pl"

      :input: none
18C33747-DEB1-4F36-B1E3-EF1D544C1D96: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 18C33747-DEB1-4F36-B1E3-EF1D544C1D96
      :disable_output_auto_indent: 
      :bundle_uuid: 5AE8DC40-A7BB-4E63-AE9B-D7E24C2E339C
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Hotkey Help" "Hotkey"
        Markdown.pl <<'EOF'
        <title>Hotkey Bundle</title>
        
        ## About
        
        The hotkey bundle allows you to store a shell command on control shift 1-5 (US keymap) for the current project.
        
        ## How it works
        
        The first time you press control shift 1-5, it will ask you for the shell command to run. After that, the same key will run that command with output shown as a tool tip.  All commands are run from the base of the project directory.
        
        ## Internals
        
        The list of recorded shell commands is kept in the project folder as `.tmhotkeys` (in YAML format).
        
        EOF
        html_footer
      :input: none
385A50A5-37DB-4B58-A6B0-1849D17A322F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.single.scope.tm-grammar, string.quoted.single.scope.root.tm-grammar, string.quoted.double.scope.tm-grammar, string.quoted.double.scope.root.tm-grammar
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Help: Scope Conventions"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 385A50A5-37DB-4B58-A6B0-1849D17A322F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: echo "<html><head><meta http-equiv=\"Refresh\" content=\"0; http://www.macromates.com/textmate/manual/language_grammars#naming_conventions\"></head><body></body></html>"
      :input: none
BB5DCAEF-2D31-47BC-B4D5-C221F026B2F3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Past Activity
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "-"
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: BB5DCAEF-2D31-47BC-B4D5-C221F026B2F3
      :disable_output_auto_indent: 
      :bundle_uuid: 30FA6EB3-2180-46F8-B2DD-EDA6B443CBB6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require 'date'
        $: << ENV['TM_BUNDLE_SUPPORT']
        require "lib/GTD.rb"
        include GTD
        
        objects = GTD.process_directory
        gtdacts = objects.map{|o| o.actions}.flatten
        gtdprojects = objects.map{|o| o.projects}.flatten
        
        class LogProject
          def initialize(date,name)
            @date = date
            @name = name
          end
          def getprojects
            return @name
          end
        end
        
        class LogAction
          def initialize(date,project,context,name)
            @date = date
            @project = project
            @context = context
            @name = name
          end
          def getcontexts
            return @context
          end
          def getprojects
            return @project
          end
        end
        
        acts = Array.new
        projects = Array.new
        
        today = Date.today
        review = today - 7
        
        logfile = File.join(GTD.get_gtd_directory,"GTD.gtdlog")
        if File.exists?(logfile) then
          log = File.open(logfile)
        else
          puts "Log file #{logfile} not found. Review requires this file. You should run the Clean Current File command to generate a log file."
          exit
        end
        
        log.readlines.each { |line|
          if line =~ /^\/(.*)\/(.*)(\/@(\S+))?/ then
            logdate = Date.strptime($1, '%Y-%m-%d')
            if logdate >= review then
              project = $2
              if line =~ /^\/(.*)\/(.*)\/@(\S+)\s(.*)$/
                logact = LogAction.new($1.to_s,$2.to_s,$3.to_s,$4.to_s)
                acts << logact
              else
                # logproj = LogProject.new(logdate.to_s,project)
                projects << LogProject.new(logdate.to_s,project)
              end
            end
          end
        }
        
        pr = Printer.new
        b = <<HTML
        <html>
          <head>
            <link rel="stylesheet" href="tm-file://#{ENV['TM_SUPPORT_PATH']}/css/default.css" type="text/css" media="screen" title="no title" charset="utf-8" />
            <style type="text/css">
              .nobr {white-space: nowrap}
            </style>
          </head>
          <body>
          <h1>GTD Review (#{review} - #{Date.today})</h1>
        HTML
        e = <<HTML
          </body>
        </html>
        HTML
        pr.raw b
        
        
        pComplete = Array.new
        projects.each {|p| pComplete << p.getprojects }
        if not pComplete.empty? then
          pComplete = pComplete.uniq.sort
          pr.raw "<h2>Projects completed</h2><ul>"
          pComplete.each {|p| 
            pr.raw "<li>#{p}"
          }
          pr.raw "</ul>"
        end
        
        if not acts.empty? then
          pUsed = Array.new
          acts.each {|p| pUsed << p.getprojects }
          pUsed = pUsed.uniq.sort
          diffarray = Array.new
          gtdprojects.each{|p| diffarray << p.name }
          projectsDiff = diffarray - pUsed
          projectsDiff = projectsDiff.uniq.sort
          if not projectsDiff.empty? then
            pr.raw "<h2>Projects not acted on</h2>"
            pr.table do
              pr.headers([ "Project", "Next Action", "Context", "Due by", "Completed"])
              projectsDiff.each{|p| 
              project = gtdprojects.find{|i| i.name == p}
        	  if project.next_action then
                if project.next_action.note then
                  text = "#{project.next_action.link} / #{project.next_action.note}"
                else
                  text = project.next_action.link
                end
                due = case project.next_action.due
                  when "",nil
                    ""
                  when DateLate
                    "<span style=\"color:red\">#{project.next_action.due}</span>"
                  else
                    project.next_action.due
                end
                pr.row([project.link, text, "<span class=\"nobr\">#{project.next_action.context}</span>", "<span class=\"nobr\">#{due}</span>", project.next_action.mark_completed_link])
            end
            }
            end # pr.table
          end
        else  # if acts is empty
          pr.raw "<h2>No logged activity to report</h2>"
        end
          
        pr.raw "<h2>Dated Actions</h2>"
        pr.table do
          pr.headers([ "Context", "Action", "Project", "Due by", "Completed"])
          gtdacts.delete_if {|a| a.due == nil }
          gtdacts.sort{|a,b| a.due <=> b.due}.each do |a|
            proj = if a.project != nil then a.project.link else "none" end
            if a.due != nil then
              due = case a.due
                when "",nil
                  ""
                when DateLate
                  "<span style=\"color:red\">#{a.due}</span>"
                else
                  a.due
              end
              text = "<a href=\"#{a.txmt}\">#{a.name}</a>"
              pr.row([a.context, text, proj , "<span class=\"nobr\">#{due}</span>", a.mark_completed_link])
            end
          end
        end
        
        pr.raw e
        puts pr.to_html
      :input: selection
B85D7CB4-5A47-4B49-831F-F2CCBFC5F48F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript, source.shell
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle AppleScript / osascript
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: B85D7CB4-5A47-4B49-831F-F2CCBFC5F48F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        scrpt = STDIN.read
        
        if scrpt =~ /\A\s*osascript\s+-e\s*(.*)\z/m then
          scrpt = $1.gsub(/\s+-e\s*/, "\n")
          scrpt.gsub!(/\\(')|'([^']*)'/, '\1\2')
          print "${0:", scrpt.gsub(/[$`\\}]/, '\\\\\0'), "}"
          %x{ { sleep .1; osascript -e 'tell app "System Events" to keystroke "[" using {command down, option down}'; } &>/dev/null & } # Indent Selection
          exit 204 # this signals exit_insert_as_snippet
        else
          lines = scrpt.collect { |line| line.chomp.gsub(/'/, "'\\\\''") }
          lines.collect! { |line| "-e '#{line.strip}'" }
          print "osascript " + lines.join(' ')
        end

      :input: selection
47D203ED-EB9B-4653-A07B-A897800CEB76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Completion: Ruby (rcodetools)"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 47D203ED-EB9B-4653-A07B-A897800CEB76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -w
        
        require "#{ENV["TM_SUPPORT_PATH"]}/lib/exit_codes"
        require "#{ENV["TM_SUPPORT_PATH"]}/lib/ui"
        
        require "pathname"
        
        TM_RUBY    = ENV["TM_RUBY"] || "ruby"
        RCODETOOLS = "#{ENV['TM_BUNDLE_SUPPORT']}/vendor/rcodetools"
        
        RAILS_DIR = nil
        dir = File.dirname(ENV["TM_FILEPATH"]) rescue ENV["TM_PROJECT_DIRECTORY"]
        if dir
          dir = Pathname.new(dir)
          loop do
            if (dir + "config/environment.rb").exist?
              Object.send(:remove_const, :RAILS_DIR)
              RAILS_DIR = dir.to_s
              break
            end
            
            break if dir.to_s == "/"
            
            dir += ".."
          end
        end
        
        command     = <<END_COMMAND.tr("\n", " ").strip
        "#{TM_RUBY}"
        -I "#{RCODETOOLS}/lib"
        --
        "#{RCODETOOLS}/bin/rct-complete"
        #{"-r \"#{RAILS_DIR}/config/environment.rb\"" if RAILS_DIR}
        --line=#{ENV['TM_LINE_NUMBER']}
        --column=#{ENV['TM_LINE_INDEX']}
        2> /dev/null
        END_COMMAND
        completions = `#{command}`.to_a.map { |l| l.strip }.select { |l| l =~ /\S/ }
        
        if not $?.success?
          TextMate.exit_show_tool_tip "Parse error."
        elsif completions.size == 1
          selected = completions.first
        elsif completions.size > 1
          selected = completions[TextMate::UI.menu(completions)] rescue exit
        else
          TextMate.exit_show_tool_tip "No matches were found."
        end
        
        print selected.sub(/\A#{Regexp.escape(ENV['TM_CURRENT_WORD'].to_s)}/, "")

      :input: document
FBFC214F-B019-4967-95D2-028F374A3221: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: "Execute and Update \xE2\x80\x98# =>\xE2\x80\x99 Markers"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
        - :super
      :uuid: FBFC214F-B019-4967-95D2-028F374A3221
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export RUBYLIB="$TM_BUNDLE_SUPPORT/vendor/rcodetools/lib${RUBYLIB:+:$RUBYLIB}"
        export TM_RUBY=$(which "${TM_RUBY:-ruby}")
        
        "${TM_RUBY}" -- "$TM_BUNDLE_SUPPORT/vendor/rcodetools/bin/xmpfilter"

      :input: selection
8F305E73-F68F-4A5D-B04B-A8646F2CC695: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: New Terminal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: 8F305E73-F68F-4A5D-B04B-A8646F2CC695
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $LOAD_PATH << "#{ENV['TM_BUNDLE_SUPPORT']}/lib"
        require "terminal_mate"
        TerminalMate::Client.new.send("new", ENV["TM_SCOPE"], ENV["TM_PROJECT_DIRECTORY"], ENV["TERMINAL_MATE_NEW"])

      :input: none
768F3AD8-30D7-4AFD-8041-5F02E5EADD44: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: ctrl-shift-2
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "@"
        modifiers: 
        - :control
        - :super
      :uuid: 768F3AD8-30D7-4AFD-8041-5F02E5EADD44
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd ${TM_PROJECT_DIRECTORY}
        "${TM_RUBY:=ruby}" <<'EOF'
        
        num = 2
        
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" --check`
        if($? == 0)
          print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`
          exit()
        end
        
        output = `CocoaDialog inputbox --title Input --informative-text 'What command should be run?' --button1 Record --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        # update the command
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" -u '#{output[1].strip.gsub(/'/, '\\\\1')}'`
        
        # run the command
        print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`

      :input: none
0E144686-095D-4B69-94D0-6E0ECA41C90D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build SML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 0E144686-095D-4B69-94D0-6E0ECA41C90D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        if [[ -d "$TM_SMLNJ_HOME/base/system" ]]; then
          cd "$TM_SMLNJ_HOME/base/system"
          make
        else
          echo "No such folder: $TM_SMLNJ_HOME/base/system"
        fi

      :input: none
B13A395C-58D7-4192-BFD3-03F2DB2B0162: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.groovy
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: JavaDoc
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: B13A395C-58D7-4192-BFD3-03F2DB2B0162
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -w
        
        require "#{ENV["TM_SUPPORT_PATH"]}/lib/exit_codes"
        
        JAVADOC = "/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home/docs/api/"
        
        term = STDIN.read.strip
        term_path = term
        while term_path =~ /\./
        	term_path = term_path.sub(/\./, "/")
        end 
        file_name = "#{JAVADOC}/index.html"
        file_name = "#{JAVADOC}/#{term_path}.html" unless term_path.empty?
        
        puts("#{term} not found.") unless File.file?(file_name)
        puts("<meta http-equiv=\"refresh\" content=\"0; tm-file://#{file_name}\">") if File.file?(file_name)

      :input: selection
F330276E-C4B2-11D9-B15D-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Trash aux Files
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          fw==

        modifiers: 
        - :alt
        - :control
      :uuid: F330276E-C4B2-11D9-B15D-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # Delete aux files from TM_FILEPATH, it's master (if any), and it's master (if any), recursively
        # Honestly, I'd be surprised if anybody has a file with a master with a master, but it's easy enough to do
        
        # If TM_LATEX_MASTER is set and the current file has the %!TEX root comment, the comment overrides TM_LATEX_MASTER
        
        . "${TM_BUNDLE_SUPPORT}/lib/options.sh"
        
        trash_aux_files () { # takes 1 arg, path to TeX file
          cd "`dirname "$1"`"
          FILE="`basename "${1%.*}"`"
          
          rm -f "$FILE".{aux,pdfsync,mtc*,log,bbl,aux,toc,bmt,out,nav,snm,vrb,blg,aux.bak}
        }
        
        # sets TM_LATEX_MASTER to the master for arg 1
        get_master () {
          unset -v OPTIONS_root TM_LATEX_MASTER
          parse_options "`basename "$1"`"
          TM_LATEX_MASTER="$OPTIONS_root"
        }
        
        LATEX_FILE="$TM_FILEPATH"
        while [[ ${#LATEX_FILE} -gt 0 ]]; do
          trash_aux_files "$LATEX_FILE"
          get_master "$LATEX_FILE"
          LATEX_FILE="$TM_LATEX_MASTER"
        done
        
        echo 'Done cleaning files'

      :input: selection
0658019F-3635-462E-AAC2-74E4FE508A9B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Close Tag
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: .
        modifiers: 
        - :alt
        - :super
      :uuid: 0658019F-3635-462E-AAC2-74E4FE508A9B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        doc        = STDIN.read
        line       = ENV['TM_LINE_NUMBER'].to_i
        line_index = ENV['TM_LINE_INDEX'].to_i
        
        if ENV.has_key? 'TM_INPUT_START_LINE' then
          line       = ENV['TM_INPUT_START_LINE'].to_i
          line_index = ENV['TM_INPUT_START_LINE_INDEX'].to_i
        end
        
        before = /(.*\n){#{line-1}}.{#{line_index}}/.match(doc)[0]
        
        # remove all self-closing tags
        if ENV.has_key? 'TM_HTML_EMPTY_TAGS' then
          empty_tags = ENV['TM_HTML_EMPTY_TAGS']
          before.gsub!(/<(#{empty_tags})\b[^>]*>|<[^>]+\/\s*>/i, '') 
        end
        
        # remove all comments
        before.gsub!(/<!--.*?-->/m, '')
        
        stack = [ ]
        before.scan(/<\s*(\/)?\s*(\w[\w:-]*)[^>]*>/) do |m|
          if m[0].nil? then
            stack << m[1]
          else
            until stack.empty? do
              close_tag = stack.pop
              break if close_tag == m[1]
            end
          end
        end
        
        if stack.empty? then
          %x{ osascript -e beep &>/dev/null & }
        else
          print "</#{stack.pop}>"
        end
      :input: document
E9CD6C3E-DC99-4682-B98D-517D34C503A8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.groovy
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: E9CD6C3E-DC99-4682-B98D-517D34C503A8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        if [ -e "${TM_FILEPATH}" ]; then
            "$GROOVY_HOME/bin/groovy" "${TM_FILEPATH}"
            exit_show_html
        else
        	puts "File not found or not saved. Please save first or try 'Run script' on a selection of text"
        fi

      :input: none
BF20459A-D83B-4821-A68D-06F3D885309C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt - meta.note
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Note
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "{"
        modifiers: 
        - :control
      :uuid: BF20459A-D83B-4821-A68D-06F3D885309C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        text = STDIN.read
        lines = text.split("\n")
        row = ENV['TM_LINE_NUMBER'].to_i
        col = ENV['TM_LINE_INDEX'].to_i
        currentLine = lines[row-1]
        found = currentLine.scan(/\[\d+\]/)[0]
        if found then
        # No need to change the file at all in this case. Just locate the proper 
        # line and use the txmt scheme to take us there.
          txt = text.slice(0..text.rindex(found)+found.length)
          lines = txt.split("\n")
          line = lines.length
          column = lines.last.length + 1
          `open "txmt://open?line=#{line}&column=#{column}"`
          TextMate.exit_discard 
          # print text.insert(text.rindex(found)+found.length + 1,"$0")
        else
          m = text.scan(/\[(\d+)\]/).map{|i| i[0].to_i}.max || 0
          before = []
          (row-1).times do before << lines.shift end
          # cl = lines.shift
          if lines[0] =~ /(?:due|at|from):/ then
            before << lines[0].slice!(/^.*(?=\s(?:due|at|from):)/)
          else
            before << lines.shift
            lines.unshift("")
          end
          print e_sn(before.join("\n") + " [#{m+1}]" + lines.join("\n")) + "\n[#{m+1}] $0"
        end
      :input: selection
7118880F-C5BA-4359-87A1-480FB61E416B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: clean completed tasks
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "*"
        modifiers: []

      :uuid: 7118880F-C5BA-4359-87A1-480FB61E416B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT']+"/lib/GTD.rb"
        include GTD
        file = ENV['TM_FILEPATH']
        obj = GTDFile.new(file)
        obj.cleanup_projects
        log = File.open(File.join(File.dirname(file),"GTD.gtdlog"),"a")
        	log.write MyLogger.dump + "\n"
        log.close
        puts obj.dump_object
      :input: none
9B769AE9-BE8F-45B9-91E0-39533AD8114B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.textile
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 9B769AE9-BE8F-45B9-91E0-39533AD8114B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_SUPPORT_PATH/bin/Textile.rb\""
      :input: selection
BA4B9C28-6566-46E8-8482-9A52DCB5384D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "\xE2\x80\xAFShow Available Revisions for Merging"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: BA4B9C28-6566-46E8-8482-9A52DCB5384D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/bin/bash\n\
        #\n\
        require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        require_cmd \"${TM_SVNMERGE:=svnmerge}\" \"If you have installed svnmerge, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVNMERGE</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\n\
        FORMAT_LOG=\"${TM_BUNDLE_SUPPORT}/format_log.rb\"\n\n\
        workpath=\"$TM_SELECTED_FILE\"\n\n\
        # svnmerge calls stty if COLUMNS is not set. Apparently Python has no is_tty? equivalent.\n\
        COLUMNS=80\n\
        export COLUMNS\n\n\
        cd \"$workpath\"\n\n\
        # check for no or multiple HEADs\n\
        integratedRevs=`svn propget svnmerge-integrated \"$workpath\"`\n\
        if [[ -z \"$integratedRevs\" ]]; then\n\
        \tpre \"Merge tracking has not been initialized for '$workpath'\"\n\
        \texit_discard\n\
        fi\n\n\
        theHead=`osascript <<END\n\
        \t-- split heads (yes, svnmerge uses spaces to delimit; hopefully spaces in filenames get URI-style\xC2\xA0encoded, but I haven't checked)\n\
        \tset AppleScript's text item delimiters to {\" \"}\n\
        \tset theList to (every text item of \"$integratedRevs\")\n\n\
        \t-- split head names from associated revision numbers\n\
        \tset theHeads to {}\n\
        \tset AppleScript's text item delimiters to {\":\"}\n\
        \trepeat with i from 1 to the count of theList\n\
        \t\tset theHeads to (theHeads & (text item 1 of (item i of theList)))\n\
        \tend\n\n\
        \tif the count of theHeads is greater than 1 then\n\
        \t\ttell app \"TextMate\"\n\
        \t\t\tchoose from list theHeads with prompt \"Please choose the HEAD directory for '$workpath':\"\n\
        \t\tend tell\n\
        \telse if the count of theHeads is 1 then\n\
        \t\tset the result to item 1 of theHeads\n\
        \telse\n\
        \t\tset the result to false\n\
        \tend if\n\
        END`\n\n\
        # exit if user canceled\n\
        [[ \"$theHead\" = \"false\" ]] && exit_discard\n\n\n\
        \"$TM_SVNMERGE\" avail --log -S \"`basename $theHead`\" 2>&1 \\\n\
        \t| \"${TM_RUBY:=ruby}\" -- \"$FORMAT_LOG\" '--title=Revisions Available for Merging'\n"
      :input: none
37135380-74CE-11D9-813D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Previous Revision (PREV)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 37135380-74CE-11D9-813D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        #!/usr/bin/env ruby -w
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/svn_diff"
        
        Subversion::diff_active_file('PREV', "Diff With Previous")
        END
      :input: none
06BAABEC-B819-4778-94FF-C744CF5DD7CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex meta.function.environment
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Change Current
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: e
        modifiers: 
        - :alt
        - :control
      :uuid: 06BAABEC-B819-4778-94FF-C744CF5DD7CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        lines = STDIN.readlines
        fi = lines.shift
        la = lines.pop
        lines.map!{|l| e_sn(l)}
        [fi,la].each do |l| l.sub!(/(\\(?:begin|end)\{)\w+\*?\}/) do |m|
            "#{$1}$1\}"
          end
        end
        l,c = ENV['TM_LINE_NUMBER'].to_i-ENV['TM_INPUT_START_LINE'].to_i, ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i
        lines[l-1].sub!(/^(.{#{c}})/,"\\1$0")
        print [fi,*lines].join("")
        print la

      :input: selection
76E34DE2-1DCB-47B8-BA2F-4F3341A3AB9C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Annotate Line
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 76E34DE2-1DCB-47B8-BA2F-4F3341A3AB9C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'versioned_file'
        require 'diff'
        
        file = CVS::VersionedFile.new(ENV['TM_FILEPATH'])
        annotation = file.cvs(:annotate)
        diff = CVS::Diff.new(file.diff(:head))
        
        n = diff.source_line(ENV['TM_LINE_NUMBER'].to_i-1)
        case n
        when Symbol then puts "#{n} locally"
        else puts annotation.split(/\n/)[n]
        end
        
        END

      :input: none
FEAF33F2-F8C2-463F-A76A-BA75D0645FC5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: FEAF33F2-F8C2-463F-A76A-BA75D0645FC5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<SNIPPET
        function ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}(\${1:args}) {
        	\$0
        }
        SNIPPET
      :input: selection
93523AF2-7A9D-4190-A1C9-D510AAB690FB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.double, string.quoted.single
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Long Strings
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 93523AF2-7A9D-4190-A1C9-D510AAB690FB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        def doit!(str='')
          return str unless ['"',"'","`"].include?(str[0].chr) and str[0] == str[-1]
          
          column = (ENV['TM_INPUT_START_COLUMN'].to_i||1) - 1
          
          @quote_char = str[0].chr
          str.gsub!(/\A#{Regexp.escape(@quote_char)}|#{Regexp.escape(@quote_char)}\Z/,'')
          strs = []
          while str.length != 0
            strs << str.slice!(0..(70-column))
            column = 0
          end
          str = @quote_char + (strs.compact.join %{#@quote_char + \n#@quote_char}) + @quote_char
          
          str
        end
        
        # print doit!(%{%{Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. asdjfhakldsfhkladjsfhkalsdjfh}}) #for testing
        
        print doit!(STDIN.read())

      :input: selection
7CDA9C8D-82C1-11D9-8357-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Show AS Function Signature
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 7CDA9C8D-82C1-11D9-8357-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/Tools/functionsig.pl\""
      :input: selection
FDF81E69-0EE5-4E32-A721-86FE17BF8A6F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Install MTASC Support Files
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FDF81E69-0EE5-4E32-A721-86FE17BF8A6F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_PROJECT_DIRECTORY"
        cp "$TM_BUNDLE_SUPPORT/mtasc.yaml" .
        mate mtasc.yaml
      :input: none
F5D7F00C-6DEE-469E-AFEE-6E4B7CDD4148: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Document In R
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: F5D7F00C-6DEE-469E-AFEE-6E4B7CDD4148
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/tmR.rb\""
      :input: document
C9FAE873-96D3-4CE7-8DDA-4C2B30F1813E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c, source.c++, source.objc, source.objc++
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Project in Xcode
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: C9FAE873-96D3-4CE7-8DDA-4C2B30F1813E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        PROJECT=$(ruby -- "${TM_BUNDLE_SUPPORT}/bin/find_xcode_project.rb")
        if [[ -f "${PROJECT}/project.pbxproj" ]]; then
           open -a Xcode "${PROJECT}"
        else
           echo "Didn't find an Xcode project file."
           echo "You may want to set TM_XCODE_PROJECT."
        fi

      :input: none
F56525A1-C879-4A7C-9584-4DB28AFC58C2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown -meta.disable-markdown
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Italic
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :super
      :uuid: F56525A1-C879-4A7C-9584-4DB28AFC58C2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require 'escape'
        def esc(str)
          e_sn(str).gsub(/\}/, '\\}') # escaping inside a placeholder
        end
        
        s = STDIN.read
        if s.empty? then
          print "*$1*"
        elsif s =~ /^(\*+)(.*[^\*])\*+$/ then
          m, s = $1, $2
          case m.length
            when 1 then print "${1:#{esc s}}"
            when 2 then print "${1:***#{esc s}***}"
            else print "${1:**#{esc s}**}"
          end
        elsif ENV.has_key? 'TM_SELECTED_TEXT'
          print "${1:*#{esc s}*}"
        else
          print "*#{e_sn s}*"
        end
      :input: selection
90EA3ACF-121E-4BBA-B1EB-3F461BCBDC8D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: "Plots\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: P
        modifiers: 
        - :alt
        - :super
      :uuid: 90EA3ACF-121E-4BBA-B1EB-3F461BCBDC8D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # print "Got:" + STDIN.read
        
        require ENV['TM_SUPPORT_PATH'] +'/lib/ui.rb'
        opts = { "Formula" => "plot(${1:y~x}${2:, data=${3:frame})",
                 "Bar Graph" => "barplot(${1:table(${2:x})})",
        		"Pie Chart" => "pie(${1:x}${2:, col=c(${3:colors})})",
        		"Histogram" => "hist(${1:x}${2:, breaks = ${3:8}})",
        		"Box Plot" =>  "boxplot(${1:x}${2:, horizontal = TRUE})",
        		"Scatterplot" => "plot(${1:x})"}
        keys = opts.keys.sort
        ans = TextMate::UI.menu(keys)
        TextMate.exit_discard unless ans
        print opts[keys[ans]]
      :input: none
20865252-80D2-4CA4-9834-391D09210C4F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 20865252-80D2-4CA4-9834-391D09210C4F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        rm "$TM_FILEPATH" &&
        cd "$TM_DIRECTORY" &&
        "$TM_CVS" update "$TM_FILENAME"
        
        # force TM to refresh the current file..
        osascript &>/dev/null \
           -e 'tell application "Dock" to activate' \
           -e 'tell application "TextMate" to activate' &

      :input: none
D6F5F368-C476-4882-82EA-D11E22A445BF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Annotate
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: D6F5F368-C476-4882-82EA-D11E22A445BF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_P4:=p4}" annotate -c -i -q "$TM_FILEPATH"

      :input: none
965DF29E-4EBD-457A-9A61-56D920C35F72: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Matching Lines into New Document
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 965DF29E-4EBD-457A-9A61-56D920C35F72
      :disable_output_auto_indent: 
      :bundle_uuid: B7BC3FFD-6E4B-11D9-91AF-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        res=$(CocoaDialog inputbox --title "Filter Matching Lines" \
            --informative-text "Enter a pattern:" \
            --button1 "Filter" --button2 "Cancel")
        
        [[ $(head -n1 <<<"$res") == "2" ]] && exit_discard
        export pattern=$(tail -n1 <<<"$res")
        
        # This could be done with grep, but Python's RE is closer to oniguruma
        "${TM_PYTHON:-python}" -c '
        import sys, os, re, traceback
        try:
          pattern = re.compile(os.environ["pattern"])
        except re.error, e:
          sys.stderr.write("Invalid pattern: %s" % e)
          sys.exit(1)
        for line in sys.stdin:
          if pattern.search(line):
            sys.stdout.write(line)
        ' || exit_show_tool_tip

      :input: selection
65FAC309-42DC-4C48-AC0D-BC7AA5864C71: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt meta.action
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: New With Same Context
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 65FAC309-42DC-4C48-AC0D-BC7AA5864C71
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        line = ENV['TM_CURRENT_LINE']
        require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
        match = line.match('(\s*@\S+)')
        print "#{e_sn line}\n#{e_sn match[1]} $0"

      :input: selection
89E5CC0A-3EFF-4DEF-A299-2E9651DE6529: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Insert Entity\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 89E5CC0A-3EFF-4DEF-A299-2E9651DE6529
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -w
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = SUPPORT + '/bin/tm_dialog'
        
        require "#{SUPPORT}/lib/osx/plist"
        require "#{SUPPORT}/lib/escape"
        
        entities = [ ]
        File.read("#{ENV['TM_BUNDLE_SUPPORT']}/entities.txt").scan(/^(\d+)\t(.+)$/) do |key, value|
          char = [key.to_i].pack('U')
          entities << { 'display' => "#{value} (#{char})", 'char' => char, 'entity' => value }
        end
        
        plist = { 'entities' => entities, 'insertAsEntity' => true }.to_plist
        open("|#{e_sh DIALOG} -cm 'Insert Entity'", 'w+') do |io|
          io << plist; io.close_write
        
          res = OSX::PropertyList.load(io.read)['result']
          abort if res.nil?
        
          if res['asEntity'].to_i == 1
            print '&' + res['returnArgument'].first['entity'] + ';'
          else
            print res['returnArgument'].first['char']
          end
        end

      :input: none
7844998B-4EF4-4385-A3B1-55B1942BFE5A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Category Archive
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 7844998B-4EF4-4385-A3B1-55B1942BFE5A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\" -a=c"
      :input: none
FF165AAB-1582-4DA8-B0D1-13EBD30B24FD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c, source.c++
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Compile Single File to Tool
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FF165AAB-1582-4DA8-B0D1-13EBD30B24FD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        #
        # Compile the active file to an executable.
        # Executable name is prefixed with "Test".
        
        require 'English'
        
        FilePath		= ENV['TM_FILEPATH']
        FileDir		= ENV['TM_DIRECTORY']
        FileBaseName	= File.basename(FilePath)
        FileExtension	= File.extname(FilePath)
        FileNoExtension = FileBaseName.sub(/#{FileExtension}$/, "")
        
        Dir.chdir(ENV['TM_DIRECTORY'])
        
        # have to use g++ to bring in C++ runtime libraries
        cc = case FileExtension
        when /\.c(pp?|xx|\+\+)/,'.C','.ii'
        	'g++'
        else
        	'gcc'
        end
        
        puts %x{ "#{cc}" -g -Wmost -Os -o "Test#{FileNoExtension}" "$TM_FILEPATH"}
        
        puts "Successfully created Test#{FileNoExtension}" unless $CHILD_STATUS != 0

      :input: none
0F8C1F78-6E4C-11D9-91AF-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove Trailing Spaces in Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0F8C1F78-6E4C-11D9-91AF-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/[\t ]+$//g'
      :input: selection
0D68EA05-DF84-4EE3-89A1-1A57FB2BAE59: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.lisp
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0D68EA05-DF84-4EE3-89A1-1A57FB2BAE59
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Lisp Bundle Help" "Lisp"
        "$TM_SUPPORT_PATH/bin/Textile.rb" < "$TM_BUNDLE_SUPPORT/help.textile"
        html_footer

      :input: none
B8651C6E-A05E-11D9-86AC-000D93C8BE28: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, source.css
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Refresh Running Browser(s)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: B8651C6E-A05E-11D9-86AC-000D93C8BE28
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        ###	Refresh All Active Browsers - OmniWeb, Safari, Firefox & IE
        ### v1.0. 2005-03-29
        ###
        
        # Check if Internet Explorer is running, if so refresh
        ps -xc|grep -sq "Internet Explorer" && osascript -e 'tell app "Internet Explorer"' -e 'activate' -e 'OpenURL "JavaScript:window.location.reload();" toWindow -1' -e 'end tell'
        
        # Check if OmniWeb is running, if so refresh
        ps -xc|grep -sq OmniWeb && osascript -e 'tell app "OmniWeb"' -e 'activate' -e 'reload first browser' -e 'end tell'
        
        # Check if Firefox is running, if so refresh
        ps -xc|grep -sqi firefox && osascript <<'APPLESCRIPT'
           tell app "Firefox" to activate
           tell app "System Events"
              if UI elements enabled then
                 keystroke "r" using command down
                 -- Fails if System Preferences > Universal access > "Enable access for assistive devices" is not on 
              else
                 tell app "Firefox" to Get URL "JavaScript:window.location.reload();" inside window 1
                 -- Fails if Firefox is set to open URLs from external apps in new tabs.
              end if
           end tell
        APPLESCRIPT
        
        # Check if Safari is running, if so refresh
        ps -xc|grep -sq Safari && osascript -e 'tell app "Safari"' -e 'activate' -e 'do JavaScript "window.location.reload();" in first document' -e 'end tell'
        
        # Check if Camino is running, if so refresh 
        ps -xc|grep -sq Camino && osascript -e 'tell app "Camino"' -e 'activate' -e 'tell app "System Events" to keystroke "r" using {command down}' -e 'end tell'

      :input: none
0E901597-FFB6-4D81-A57D-821A9B5089A5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: LaTeX Template
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0E901597-FFB6-4D81-A57D-821A9B5089A5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: temp
      :capture_pattern: 
      :command: |-
        #!/usr/bin/ruby
        # This command is meant to be used for quick insertion of your LaTeX template files. They should be placed
        # in the directory ~/Library/Application Support/LaTeX/Templates. A pop-up is provided, letting you pick
        # the template file you want inserted, and then it gets inserted as a snippet. See
        # http://macromates.com/textmate/manual/snippets#snippets for what this implies.
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        path = ENV['HOME'] + '/Library/Application Support/LaTeX/Templates/'
        unless FileTest.directory?(path) then
          TextMate.exit_show_tool_tip "You need to create the directory #{path} first and\n populate it with your favorite LaTeX template files before using this command."
        else
          files = `ls "#{path}"`.split("\n")
          TextMate.exit_show_tool_tip "You need to populate the template directory with some template files!" if files.empty?
          file_choice = TextMate::UI.menu(files)
          TextMate.exit_discard if file_choice.nil?
          text = File.read(path + files[file_choice]).scan(/\n|.+\n?/)
          first_line = text[0]
        # The user can force the template to be interpreted as a snippet, by
        # adding this line: #!TEX style=snippet
          if first_line.match(/^%!TEX\s+style\s*=\s*snippet\s*/) then
            print text[1..-1]
          else
            print(e_sn(text.join("")))
          end
        end
      :input: none
0CE0800F-C66A-476A-B67A-5B22087D4E70: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Cleanup
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: 0CE0800F-C66A-476A-B67A-5B22087D4E70
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        myFile = ENV['TM_SELECTED_FILE']
        
        myText = File.open(myFile)
        re = /\s/
        myText.each do |line|
          #myTest = re.match(line)
          #if (myTest.pre_match != "+" and myTest.pre_match.length > 0)
          if line.length > 1
            puts line
          end
        end
      :input: document
52991D39-38F1-4A33-9C7D-5D39EB289889: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: ctrl-shift-1
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "!"
        modifiers: 
        - :control
      :uuid: 52991D39-38F1-4A33-9C7D-5D39EB289889
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd ${TM_PROJECT_DIRECTORY}
        "${TM_RUBY:=ruby}" <<'EOF'
        
        num = 1
        
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" --check`
        if($? == 0)
          print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`
          exit()
        end
        
        output = `CocoaDialog inputbox --title Input --informative-text 'What command should be run?' --button1 Record --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        # update the command
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" -u '#{output[1].strip.gsub(/'/, '\\\\1')}'`
        
        # run the command
        print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`

      :input: none
17B2F39B-5CCB-4B0E-B305-8C27BED56887: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 17B2F39B-5CCB-4B0E-B305-8C27BED56887
      :disable_output_auto_indent: 
      :bundle_uuid: 79741B2E-271D-4CBC-A61A-380C83D36863
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Blogging Bundle Help" "Blogging"
        "$TM_SUPPORT_PATH/lib/markdown_to_help.rb" "$TM_BUNDLE_SUPPORT/help.markdown"
        html_footer

      :input: selection
F20AD964-3C68-4940-91B1-8A99B8E2A375: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: comment.line
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Comment
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: F20AD964-3C68-4940-91B1-8A99B8E2A375
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $LOAD_PATH << "#{ENV["TM_SUPPORT_PATH"]}/lib"
        require "escape"
        require "exit_codes"
        
        ctext = STDIN.read
        if ctext =~ /^\s*(.[^\s\w\\]*\s*)/
          cstring = $1
        else
          TextMate.exit_show_tool_tip("Unable to determine comment character.")
        end
        
        flags = %Q{-p "#{cstring}"}
        flags += " --retabify" unless ENV["TM_SOFT_TABS"] == "YES"
        
        command = "ruby #{e_sh(ENV["TM_BUNDLE_SUPPORT"])}/bin/rubywrap.rb #{flags}"
        text    = open("| #{command}", "r+") do |wrapper|
          wrapper << ctext
          wrapper.close_write
          wrapper.read
        end
        
        print e_sn(text)

      :input: selection
5A08E461-05CC-4C03-9DC8-BF118594EA3E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: markup.underline.link - markup.underline.link.relative
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Current URL
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 5A08E461-05CC-4C03-9DC8-BF118594EA3E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        open "$(cat)"

      :input: selection
D6EEB6EA-77E9-11D9-B36F-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Add Numbers in Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: D6EEB6EA-77E9-11D9-B36F-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        print \" = \" + $stdin.read.gsub(/[$\xE2\x82\xAC\xC2\xA3]/, '').scan(/((?:\\b|-)[0-9]+(?:\\.[0-9]+)?)\\b/).inject(0.0) { |t,s| t + s[0].to_f() }.to_s.sub(/.0+\\z/, '')"
      :input: selection
08741F60-A1F1-4294-B9A9-FFF43253A687: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Complete Local Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 08741F60-A1F1-4294-B9A9-FFF43253A687
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require 'rexml/streamlistener'
        require 'rexml/parsers/baseparser'
        require 'rexml/parsers/streamparser'
        
        
        $noparens = ['source.ocaml']
        $nocommas = ['source.ocaml']
        
        
        class FunctionExtractor
        	include REXML::StreamListener
        	
        	def initialize(findfunction)
        		@findfunction = findfunction
        		@functiontagregex = /^declaration\.function|^meta\.(method|function)/
        		@functionnameregex = /^entity\.name\.function/
        		@argumentregex = /^variable/
        		@infunction = false
        		@currenttag = ""
        		@currentfunction = ""
        		@args = []
        	end
        	
        	
        	def tag_start(name, attrs)
        		if !@infunction and @functiontagregex.match(name)
        			@infunction = name
        		elsif @infunction
        			@currenttag = name
        		end
        	end
        	
        	
        	def text(txt)
        		if @infunction
        			if @functionnameregex.match(@currenttag)
        				@currentfunction = txt.strip()
        			elsif @argumentregex.match(@currenttag)
        				@args << txt.strip()
        			end
        		end
        	end
        	
        	
        	def tag_end(name)
        		if @infunction
        			if name == @infunction
        				if @currentfunction == @findfunction
        					print "#{make_args()}$0"
        					exit(0)
        				end
        				
        				@args = []
        				@infunction = false
        			elsif name == @currenttag
        				@currenttag = ""
        			end
        		end
        	end
        
        	
        	private
        	
        	def make_args()
        		scope = ENV['TM_SCOPE'].split(/ /)[0]
        		joinstr = ", "
        		if $nocommas.include?(scope)
        			joinstr = " "
        		end
        
        		if !$nocommas.include?(scope)
        			@args = @args.map { |s| s.split(/,/) }.flatten.map { |s| s.strip() }
        		else
        			@args = @args.map { |s| s.split(/\s+/) }.flatten.map { |s| s.strip() }
        		end
        		
        		final = []
        		@args.each_index() do |i|
        			final << "${#{i+1}:#{@args[i]}}"
        		end
        
        		final = final.join(joinstr)
        		if $noparens.include?(scope)
        			final = " #{final}"			
        		else
        			final = "(#{final})"
        		end
        		
        		final
        	end
        	
        end
        
        begin
        	listener = FunctionExtractor.new(ENV['TM_CURRENT_WORD'].strip())
        	parser = REXML::Parsers::StreamParser.new($stdin, listener)
        	parser.parse()
        rescue
        	# if we fail for any reason, we want to fail silently to avoid cluttering up the document
        end
      :input: document
8FCB4C8F-23CD-4D2E-A9F2-C4564DFFEB2A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: 8FCB4C8F-23CD-4D2E-A9F2-C4564DFFEB2A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVK:=svk}" "If you have installed svk, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVK</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -z $TM_SELECTED_FILES ]]
        	then
        	TM_SELECTED_FILES="'$TM_FILEPATH'"
        fi
        "$TM_BUNDLE_SUPPORT/revert_file.rb" $TM_SELECTED_FILES

      :input: none
AAAB7E78-7F66-488F-9727-CF9817353380: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.pascal
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: AAAB7E78-7F66-488F-9727-CF9817353380
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat "${TM_BUNDLE_PATH}/README.html"
      :input: none
985F56D4-82ED-4C45-8250-2ECCFC71957E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Migrate to Current
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 985F56D4-82ED-4C45-8250-2ECCFC71957E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:migrate

      :input: none
39AD9681-039A-400F-BBBA-C5B4D57A0C3E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Reload Firefox and Return
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 39AD9681-039A-400F-BBBA-C5B4D57A0C3E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.reload_firefox(5)  # Return in 5 secs
      :input: none
C78ECFD8-DABE-4E2C-B628-0DDF2A3A3B21: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Actions for Context (Text)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: C78ECFD8-DABE-4E2C-B628-0DDF2A3A3B21
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $:<< ENV['TM_BUNDLE_SUPPORT'] << ENV['TM_SUPPORT_PATH']
        require "lib/GTD.rb"
        require "lib/ui"
        include GTD
        word = STDIN.read
        case word
        when /^@?(\w+)$/
          w = $1
        when /\s+@(\w+)\s*.*/
          w = $1
        end
        if GTD.get_contexts.include?(word) then
        	context = word
        else
          context = TextMate::UI.request_item(:title => 'Listing actions for context', :prompt =>  'Choose the new context', :items => GTD.contexts)
          exit unless context
        end
        actions = GTD.actions_for_context(context).map{|r| [r[0],r[1].to_s,r[2]]}
        puts prettify(actions)

      :input: selection
5263FCE3-C32A-11D9-BFEF-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: 5263FCE3-C32A-11D9-BFEF-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat "${TM_BUNDLE_SUPPORT}/README.html"
      :input: none
5AED5DFA-F084-4F12-8A06-D51C78E91D05: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Outline
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: O
        modifiers: 
        - :super
      :uuid: 5AED5DFA-F084-4F12-8A06-D51C78E91D05
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/web_preview.rb'
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/options.rb'
        html_header "LaTeX Document Outline", "LaTeX"
        REGEX = /\\(part|chapter|section|subsection|subsubsection|paragraph|subparagraph)\*?(?:%.*\n[ \t]*)?(?:(?>\[(.*?)\])|\{([^{}]*(?:\{[^}]*\}[^}]*?)*)\})/
        INCLUDE_REGEX = /\\(?:input|include)(?:%.*\n[ \t]*)?(?>\{(.*?)\})/
        class String
          def adjust_end(new_piece)
            new_form = self.sub(/[^\/]*$/,new_piece)
            new_form += ".tex" unless new_form.match(/\.tex$/)
            new_form
          end
        end
        class Section < String
          def <=>(other_part)
            parts = ["root","part","chapter","section","subsection","subsubsection","paragraph","subparagraph"]
            return parts.index(self) <=> parts.index(other_part)
          end
          def <(other_part)
            (self<=>other_part) == -1
          end
        end
        def outline_points(filename)
          points = []
          if filename.is_a?(String) then
            data = File.read(filename)
            name = "url=file://" + e_url(filename) + "&"
          else
            data = filename.read
            name = ""
          end
          data.split("\n").each_with_index do |line, i|
            points << [name,i+1,$1,$2 || $3] if line.match(REGEX)
            points += outline_points(filename.adjust_end($1)) if line.match(INCLUDE_REGEX)
          end
          points
        end
        file = LaTeX.master(ENV['TM_LATEX_MASTER'] || ENV['TM_FILEPATH'])
        if file.nil?
          file = STDIN
        else
          file = File.expand_path(file, File.dirname(ENV['TM_FILEPATH']))
        end
        require 'pp'
        points = outline_points(file)
        # sec = Section.new("section")
        current = [Section.new("root")]
        string = []
        points.each do |file,line,part,title|
          # pp [part,sec <=> part]
          case current.last <=> part
          when 1
        (current.pop; string << "\t" * current.length + "</ol>") while current.last > part
          when -1
            string << "\t" * current.length + "<ol>"
            current << Section.new(part)
          end
          string << "\t" * current.length + "<li><a href=\"txmt://open?#{file}line=#{line}\">#{title}</a></li>"
        end
        (current.pop; string << "\t" * current.length + "</ol>") while current.last != "root"
        puts string.join("\n")
        html_footer
      :input: document
A0F5745D-6DC1-4D2B-B638-8A38AB18EE68: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A0F5745D-6DC1-4D2B-B638-8A38AB18EE68
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\n\
        html_header \"Widget Creator Bundle Help\" \"Widget Creator\"\n\n\
        Markdown.pl <<\"EOF\"|SmartyPants.pl\n\n\
        ## Widget Creator Bundle Help\n\n\
        The Widget Creator Bundle provides an interface to scripts normally accessed through Terminal.app through the Dashboard layer of OS X.\n\n\
        The bundle includes a Dashboard widget, which will be installed automatically when the command \"*Create Widget With Contents of Document*\" or \"*Create Widget Calling Current Document*\" are called within Textmate.\n\n\
        ### \"Create Widget With Contents of Document\"\n\n\
        When editing a script which would usually be executed in a shell terminal such as Terminal.app, calling the \"*Create Widget With Contents of Document*\" command will copy the contents of the current document to a new file created in ~/Application Settings/Textmate/Widget Scripts/ and a new instance of a widget will appear on the Dashboard layer of OS X.\n\n\
        When this widget is clicked on the copied script will run, and any output to STDOUT or STDERR will be accessable by clicking on the green or red icons which should appear on the widget respectively.\n\n\
        Addtionally, if any files or a URL is dragged on to the widget then arguments are passed to the script with either the full path and filename of each file, or the URL itself.\n\n\
        ### \"Create Widget Calling Current Document\"\n\n\
        If the \"*Create Widget Calling Current Document*\" command is invoked in Textmate whilst editing a saved script, then a new widget is created which will call the already existing script, passing any arguments in the process (i.e. any files/URL dropped).\n\n\
        This is useful feature if you plan on calling the script used by the widget in a shell terminal as well as through Dashboard, so any changes you make to the original script are also reflected when called by both methods.\n\n\
        ### \"Insert Loop to Handle Multiple Arguments\"\n\n\
        The only snippet in this bundle will allow a bash script to deal with multiple arguments, this is useful when applying the same action to multiple files when they are dragged on to the widget.\n\n\
        When the snippet is inserted a loop will appear in the edit window, and any commands nested within the loop with be performed as many times as there are arguments (i.e. files) passed to the script. Each time the loop iterates a new argument will be assigned to $ARG, so for example 'rm \"$arg\"' within the loop will delete every file dragged on to the widget.\n\n\
        ### Hints\n\n\
        This document can be printed using *Print\xE2\x80\xA6* (\xE2\x8C\x98P) from the *File* menu.\n\
        EOF\n\n\
        html_footer\n"
      :input: none
627E8652-2B23-4E68-ADF9-103BA2B16074: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 627E8652-2B23-4E68-ADF9-103BA2B16074
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd "$TM_DIRECTORY"
        echo "Index: changes in working copy of $TM_FILENAME"
        darcs whatsnew -u "$TM_FILENAME"

      :input: none
A1DAE610-1E05-4174-BB6D-A51E22DB0764: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.xml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tidy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: A1DAE610-1E05-4174-BB6D-A51E22DB0764
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        result=`xmllint --format - 2>&1`
          if [[ $? > 0 ]];
          then
            exit_show_tool_tip "Errors: $result"
          else
            echo "$result"
          fi
      :input: selection
C958CCC3-109D-40E0-ADB5-DFAA1A9DE8AF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Edit Reminders
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: C958CCC3-109D-40E0-ADB5-DFAA1A9DE8AF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        mate ~/.reminders

      :input: none
873BDE02-80C9-44F4-910B-234EF7702D01: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mediawiki
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Syntax Cheat Sheet
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 873BDE02-80C9-44F4-910B-234EF7702D01
      :disable_output_auto_indent: 
      :bundle_uuid: D99E8C0C-792F-11D9-A212-000D93B3A10E
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Mediawiki Cheat Sheet\"\n\
        Markdown.pl <<MARKDOWN\n\
        ## Paragraphs ##\n\n    Two line breaks\n    will signify\n    a paragraph.\n    \n    New paragraph starts\n    here.\n    \n    For a linebreak, just\n    use <br/> the html tag\n\n\
        ## Phrase Emphasis ##\n\n\
        \t''italics''\n\
        \t'''bold'''\n\n\
        ## Links ##\n\n\
        External:\n\n\
        \tAn [http://url.com/ example].\n\n\
        Wiki-links:\n\n\
        \tAn [[example]] wikilink, possibly even\n\
        \tfrom another namespace: [[talk:example]].\n\
        \tRenaming [[hyperlink|links]] is easy.\n\n\
        Categories:  add the page to a category as follows:\n\n    [[category:example]]\n\n\
        ## Images ##\n\n\
        Not floated:\n\n\
        \t[[Image:example.png]]\n\n\
        Thumbnail, with a caption, floated left, 200 pixels wide:\n\n    [[Image:example.png|left|200px|Floating!]]\n\n\
        Link to the image, but don't show it on the page:\n\n    [[:Image:example.png|example.png]]\n\n\
        ## Headers ##\n\n\n\
        \t== Header 2 ==\n\n\
        \t=== Header 3 ===\n\n\
        \t====== Header 6 ======\n\n\n\
        ## Lists ##\n\n\
        Ordered:\n\n\
        \t#  Foo\n\
        \t#  Bar\n\n\
        Unordered:\n\n\
        \t* A list item. <br> With a line break.\n\
        \t* Bar\n\n\
        Definition:\n\n    ; a term\n    : some defining\n    : and more defining\n    ; and another term : definition\n\n\
        They can be nested:\n\n\
        \t* Abacus\n    ** answer\n\
        \t* Bubbles\n\
        \t*# bunk\n    *# bupkis\n    *#; BELITTLER : one who belittles\n\
        \t*# burper\n\
        \t* Cunning\n\n\
        Definitions, without the word they are defining, are used\n\
        to indent talk pages:\n\n    Delete this article! [[user:spam]]\n    : No, it's great! [[user:eggs]]\n\n\
        ## Signatures ##\n\n\
        Comments should be signed:\n\n    ~~~ is my signature\n    ~~~~ is my signature with datestamp\n    ~~~~~ is just the datestamp\n\n\
        ## Use HTML for other formatting ##\n\n\
        For a monospaced font:\n\n    use the <tt>tt</tt> tag.\n\n\
        To center text:\n\n    <center>put me in the middle</center>\n\n\
        For a blockquote:\n\n    <blockquote>To be or not to be\xE2\x80\xA6</blockquote>\n\n\n\
        ## Prevent wiki formatting ##\n\n    Use the <nowiki>'''tag'' to write\n    '''about''</nowiki> mediawiki code\n    itself, or suppress rendering for\n    some other reason.\n\n\
        ## Templates ##\n\n\
        One page can be transcluded in another page\n\
        by using a template:\n\n    {{templates}} go in curly braces\n\n\
        ## Horizontal Rules ##\n\n\
        Four or more dashes:\n\n\
        \t----\n\n\
        MARKDOWN\n\
        html_footer"
      :input: none
D2EF8647-6586-464B-B759-6F2A8A50E542: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: "meta.paragraph.restructuredtext "
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Extend Title
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
      :uuid: D2EF8647-6586-464B-B759-6F2A8A50E542
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TPY=${TM_PYTHON:-pythonw}
        "$TPY" "$TM_BUNDLE_SUPPORT/extend_title.py"
      :input: selection
CFC80127-ED10-465E-9CCE-D9282FD7893D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Log -v
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: CFC80127-ED10-465E-9CCE-D9282FD7893D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_DIRECTORY"
        fi
              
        : ${TM_RUBY:=ruby}
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log.rb"
        HG_STYLE="${TM_BUNDLE_SUPPORT}/map-log.changelog"
        
        if [[ $TM_HG_LOG_LIMIT != 0 ]]
        	then HG_LIMIT="-l ${TM_HG_LOG_LIMIT:=10}"
        fi
        
        HG_STYLE_TMP='"$HG_STYLE"'
        TM_HG_TMP='"$TM_HG"'
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_HG" log --debug $HG_LIMIT --style "$HG_STYLE" "$TM_FILEPATH" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG"
        else
           eval "$TM_HG_TMP" log --debug $HG_LIMIT --style "$HG_STYLE_TMP" "$TM_SELECTED_FILES" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG"
        fi
      :input: none
D1C3D420-2DC5-4C61-9586-00E76A6C054B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Script (PyMate)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: D1C3D420-2DC5-4C61-9586-00E76A6C054B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        export TM_RUBY=$(which "${TM_RUBY:-ruby}")
        "$TM_RUBY" -- "$TM_BUNDLE_SUPPORT/PyMate/pymate.rb"
      :input: document
4B6A441D-8307-11D9-A10F-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to HTML UL
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: 4B6A441D-8307-11D9-A10F-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "perl \"$TM_BUNDLE_SUPPORT/t2h.pl\"\n\n\
        # Yes, this actually validates as HTML 4.01 Transitional. It is surprisingly annoying to get a nested list to validate. "
      :input: selection
011517D7-AA14-46B6-9141-51411F33E6E8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Wiki
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 011517D7-AA14-46B6-9141-51411F33E6E8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        FILE=`"$TM_BUNDLE_SUPPORT/bin/linkify.rb" 2>/dev/console "$TM_BUNDLE_SUPPORT/pages/intro.mdown"`
        echo "<meta http-equiv='Refresh' content='0;URL=tm-file://$FILE'>"
        
      :input: none
000B399B-FB71-49EF-B799-A1200A3865AB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown markup.list
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: New Subitem
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 000B399B-FB71-49EF-B799-A1200A3865AB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $: << ENV['TM_BUNDLE_SUPPORT']
        $: << ENV['TM_SUPPORT_PATH']
        
        require 'lib/markdown'
        require 'lib/escape'
        
        # get the list itself
        listtxt = $stdin.read()
        list = Markdown::List.parse(listtxt)
        
        # now we need to figure out where we were when we hit enter
        offsetline = ENV['TM_LINE_NUMBER'].to_i() - ENV['TM_INPUT_START_LINE'].to_i()
        index = ENV['TM_LINE_INDEX'].to_i()
        
        list.break(offsetline, index, "$0", true) { |l| e_sn(l) }
        print list.to_s()

      :input: selection
28D28F3B-C59B-4387-A67E-65CFF1CBC62B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 28D28F3B-C59B-4387-A67E-65CFF1CBC62B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "AppleScript Runner" "${TM_FILENAME:-}"
        
        "${TM_RUBY:-ruby}" -e '
          require "iconv"
          require "open3"
          require "#{ENV["TM_SUPPORT_PATH"]}/lib/escape"
        
          scrpt = STDIN.read
          scrpt = Iconv.conv("macroman//TRANSLIT", "utf-8", scrpt)
        
          stdin, stdout, stderr = Open3.popen3("osascript", "-ss")
          Thread.new { stdin.write scrpt; stdin.close }
        
          res = stdout.read
          puts "<pre style=\"white-space:normal\">#{htmlize res}</pre>" unless res.empty?
        
          if stderr.read =~ /^(\d+):(\d+): (.*?): (.*) \((-?\d+)\)$/ then
            start, stop, err, msg, status = $1.to_i, $2.to_i, $3, $4, $5
        
            err = err.gsub(/\b\w(?=\w{3,})/) { |m| m.upcase }
            puts "<h2>#{htmlize err}</h2>"
            puts "<p>#{htmlize msg}</p>"
        
            from = scrpt[0..start].rindex(/^/)
            to = start + scrpt[start..-1].index(/$/)
            src = Iconv.conv("utf-8", "macroman", scrpt[from...to])
        
            line = scrpt[0...start].count("\n") + 1
            column = start - from + 1
        
            link = "txmt://open?line=#{line}&column=#{column}"
            puts "<blockquote><a href=\"#{link}\">line #{line}, column #{column}</a>: <code>#{src}</code></blockquote>"
        
            puts "<p>Error #{status}.</p>"
          else
            puts "<p>Program terminated.</p>"
          end'
        
        html_footer
      :input: document
3F26240E-6E4A-11D9-B411-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax (W3C)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: 3F26240E-6E4A-11D9-B411-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        STDOUT.sync = true
        
        page = STDIN.read
        page.gsub!(/<\?(php|=).*?\?>|<%.*?%>/m, '')
        
        open('|curl -sF uploaded_file=@-\;type=text/html http://validator.w3.org/check', 'r+') do |io|
          io << page; io.close_write
          while line = io.gets
            line.gsub!(/<\/title>/, '\&<base href="http://validator.w3.org/">')
            line.gsub!(/Line (\d+) column (\d+)/) do
              "<a href='txmt://open?line=#$1&column=#{$2.to_i + 1}'>#$&</a>"
            end
            puts line
          end
        end

      :input: document
35DFB6D6-E48B-4907-9030-019904DA0C5B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.css meta.property-value
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: CodeCompletion CSS Property Values
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 35DFB6D6-E48B-4907-9030-019904DA0C5B
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        preference = 'Property Value Completions'
        choices = []
        
        parsed_choices = TextmateCompletionsParser.new(nil, :scope => :css_values).to_ary
        choices += parsed_choices if parsed_choices
        
        choices += ['--']
        
        plist_choices = TextmateCompletionsPlist.new( "#{ENV['TM_BUNDLE_PATH']}/Preferences/#{preference}.tmPreferences" ).to_ary
        choices += plist_choices if plist_choices
        
        print TextmateCodeCompletion.new(choices,STDIN.read).to_snippet

      :input: selection
83560C23-63E2-4920-8E26-7EAC5FE86B2F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Block Comment
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: /
        modifiers: 
        - :alt
        - :super
      :uuid: 83560C23-63E2-4920-8E26-7EAC5FE86B2F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes.rb'
        
        def find_markers
          10.times do |n|
            start = ENV["TM_COMMENT_START#{"_#{n}" if n > 0}"].to_s.strip
            stop  = ENV["TM_COMMENT_END#{"_#{n}"   if n > 0}"].to_s.strip
            return start, stop if not start.empty? and not stop.empty?
          end
          TextMate.exit_show_tool_tip "No block comment markers found for this language."
        end
        
        start, stop = find_markers
        input = STDIN.read.to_s
        
        STDOUT << e_sn(start) << (input.empty? ? "\n\t$0\n" : e_sn(input)) << e_sn(stop)

      :input: selection
51C9C27A-D931-49F9-B6D8-C0E7ABEC992D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.ruby, source.ruby.rails.embedded.html, meta.rails.controller, meta.rails.unit_test
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Helper
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: 51C9C27A-D931-49F9-B6D8-C0E7ABEC992D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" helper
      :input: none
F68A0A7A-75AF-4471-A9F8-3A618DD81306: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Whats New
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: F68A0A7A-75AF-4471-A9F8-3A618DD81306
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        # Source some support functions we need.
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        cd "${TM_PROJECT_DIRECTORY:=$TM_DIRECTORY}";
        htmlHeader "Summary of Changes"
        echo "<h3>Summary of Changes in ${TM_PROJECT_DIRECTORY}</h3>"
        "${TM_PYTHON:=python}" <<'EOF'
        import os
        import re
        from struct import *
        cl = {'a':'unknown', 'M':'modified', 'D':'deleted', 'C':'conflict', '?':'unknown', 'A':'added'}
        def percent_escape(str):
        	return re.sub('[\x80-\xff /&]', lambda x: '%%%02X' % unpack('B', x.group(0))[0], str)
        
        def make_link(file):
        	return 'txmt://open?url=file:%2F%2F' + percent_escape(file)
        
        def removeNums(s):
            l = re.compile('^(.*?)(\s+[-]\d+)?(\s+[+]\d+\s*)?$')
            x = l.match(s)
            if x:
               return x.group(1)
            else:
               return s
           
        res = os.popen('darcs whatsnew -s -l')
        print '<table cellpadding="3"><tr>'
        for line in  res:
            statClass = ""
            if cl.has_key(line[0]):
                statClass = cl[line[0]]
            print '<tr>',
            print '<td class="'+statClass+'\">', 
            print line[0], '</td><td><a href="',
            fname = removeNums(line[1:-1])
            # FIXME we should treat fname as relative to the first
            # parent holding the _darcs directory rather than os.getcwd()
            print make_link(os.getcwd()+fname[2:]),'">',fname, '</a></td></tr>'
        
        
      :input: none
331791FA-7335-45B9-865E-760D52294D01: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Sort Keys Alphabetically
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          iA==

        modifiers: []

      :uuid: 331791FA-7335-45B9-865E-760D52294D01
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        print (s = STDIN.read).split(/^#{indent = s.scan(/^(\s*)\b/).flatten.first}(?=\w)/).sort.join(indent)
      :input: selection
970EE6B4-A091-11D9-A5A2-000D93C8BE28: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Open Document in Running Browser(s)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 970EE6B4-A091-11D9-A5A2-000D93C8BE28
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        ### Preview in All Active Browsers
        ### v1.0. 2005-03-29
        ### v1.1. 2005-12-04
        ### v2.2. 2006-11-03
        ###
        ###	CONFIG OPTION:: Set TM_PROJECT_SITEURL in your TM Project Window Info Button in the following form: [ http://your.site.ext/ ]
        ###
        
        # 1. Check if we have a SITE_URL
        if [[ -n "$TM_PROJECT_SITEURL" ]]
            then activeURL="$TM_PROJECT_SITEURL${TM_FILEPATH##$TM_PROJECT_DIRECTORY}"
            else activeURL="file://$TM_FILEPATH"
        fi
        
        osascript <<"APPLESCRIPT" - "$activeURL"
        on run(argv)
            set activeURL to item 1 of argv
            tell app "System Events" to set proclist to name of every application process
            if proclist contains "Webkit" then
                run script "on run(argv)" & return & "tell app \"Webkit\" to make new document with properties {URL: item 1 of argv}" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "Safari" then
                run script "on run(argv)" & return & "tell app \"Safari\" to make new document with properties {URL: item 1 of argv}" & return & "end run" with parameters {activeURL}
            end if
            
            if proclist contains "$1" then
            run script "on run(argv)" & return & "tell app \"$1\" to `pbpaste`" & return & "end run" with parameters {activeURL}
        end if
            
            if proclist contains "Shiira" then
                run script "on run(argv)" & return & "tell app \"Shiira\" to make new document with properties {URL: item 1 of argv}" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "Firefox" then
                run script "on run(argv)" & return & "tell app \"Firefox\" to Get URL (item 1 of argv) inside window 1" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "Internet Explorer" then
                run script "on run(argv)" & return & "tell app \"Internet Explorer\" to activate OpenURL (item 1 of argv) toWindow 0 Flags 1" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "OmniWeb" then
                run script "on run(argv)" & return & "tell app \"OmniWeb\" to GetURL (item 1 of argv)" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "Camino" then
                run script "on run(argv)" & return & "tell app \"Camino\" to Get URL (item 1 of argv)" & return & "end run" with parameters {activeURL}
            end if
            if proclist contains "Xyle scope" then
                run script "on run(argv)" & return & "tell app \"Xyle scope\" to Get URL (item 1 of argv)" & return & "end run" with parameters {activeURL}
            end if
        end run
        APPLESCRIPT
      :input: none
7F79BC8D-8A4F-4570-973B-05DFEC25747F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Add ! to Method in Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "!"
        modifiers: 
        - :control
      :uuid: 7F79BC8D-8A4F-4570-973B-05DFEC25747F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        res=$(ruby "$TM_BUNDLE_SUPPORT/bin/make_destructive.rb")
        
        if [ "$res" = "" ]
          then exit_show_tool_tip "Retry this command without a selection."
          else echo -n "$res"
        fi
      :input: selection
67EB96A4-4213-42C9-9C47-B886A4B8AC93: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to LaTeX
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 67EB96A4-4213-42C9-9C47-B886A4B8AC93
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_BUNDLE_SUPPORT"
        MultiMarkdown.pl|SmartyPants.pl|xsltproc -novalid -nonet "$TM_BUNDLE_SUPPORT/xhtml2article.xslt"  -
      :input: selection
3463E85F-F500-49A0-8631-D78ED85F9D60: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html -entity.other.attribute-name -string.quoted, invalid.illegal.incomplete.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: CodeCompletion HTML Tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 3463E85F-F500-49A0-8631-D78ED85F9D60
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        TextmateCodeCompletion.plist('Tag Completions')

      :input: selection
46DBB57A-D7F8-4049-9BE8-4ACABFF5F056: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: configtest
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 46DBB57A-D7F8-4049-9BE8-4ACABFF5F056
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: apachectl configtest
      :input: none
FCBE2215-19CA-470A-8D92-BB0D00491D62: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Align Assignments
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "]"
        modifiers: 
        - :alt
        - :super
      :uuid: FCBE2215-19CA-470A-8D92-BB0D00491D62
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        #
        # Assignment block tidier, version 0.1.
        #
        # Copyright Chris Poirier 2006.
        # Licensed under the Academic Free License version 3.0.
        #
        # This script can be used as a command for TextMate to align all 
        # of the equal signs within a block of text.  When using it with
        # TextMate, set the command input to "Selected Text" or "Document",
        # and the output to "Replace Selected Text".  Map it to a key 
        # equivalent, and any time you want to tidy up a block, either 
        # select it, or put your cursor somewhere within it; then hit the
        # key equivalent.  Voila.
        #
        # Note that this is the first version of the script, and it hasn't
        # been heavily tested.  You might encounter a bug or two. 
        #
        # Per the license, use of this script is ENTIRELY at your own risk.
        # See the license for full details (they override anything I've 
        # said here).
        
        lines = STDIN.readlines()
        selected_text = ENV.member?("TM_SELECTED_TEXT")
        
        relevant_line_pattern = /^[^=]+=/
        column_search_pattern = /[\t ]*=/
        
        
        #
        # If called on a selection, every assignment statement
        # is in the block.  If called on the document, we start on the 
        # current line and look up and down for the start and end of the
        # block.
        
        if selected_text then
           block_top    = 1
           block_bottom = lines.length
        else
         
           #
           # We start looking on the current line.  However, if the
           # current line doesn't match the pattern, we may be just
           # after or just before a block, and we should check.  If
           # neither, we are done.
        
           start_on      = ENV["TM_LINE_NUMBER"].to_i
           block_top     = lines.length + 1
           block_bottom  = 0
           search_top    = 1
           search_bottom = lines.length
           search_failed = false
        
           if lines[start_on - 1] !~ relevant_line_pattern then
              if lines[start_on - 2] =~ relevant_line_pattern then
                 search_bottom = start_on = start_on - 1
              elsif lines[start_on] =~ relevant_line_pattern then
                 search_top = start_on = start_on
              else
                 search_failed = true
              end 
           end
        
           #
           # Now with the search boundaries set, start looking for
           # the block top and bottom.
           
           unless search_failed
              start_on.downto(search_top) do |number|
                 if lines[number-1] =~ relevant_line_pattern then
                    block_top = number
                 else
                    break
                 end
              end
              
              start_on.upto(search_bottom) do |number|
                 if lines[number-1] =~ relevant_line_pattern then
                    block_bottom = number
                 else
                    break
                 end
              end
           end
        end
        
        
        #
        # Now, iterate over the block and find the best column number
        # for the = sign.  The pattern will tell us the position of the
        # first bit of whitespace before the equal sign.  We put the
        # equals sign to the right of the furthest-right one.  Note that
        # we cannot assume every line in the block is relevant.
        
        best_column = 0
        block_top.upto(block_bottom) do |number|
           line = lines[number - 1]
           if line =~ relevant_line_pattern then
              m = column_search_pattern.match(line)
              best_column = m.begin(0) if m.begin(0) > best_column
           end
        end
        
           
        #
        # Reformat the block.  Again, we cannot assume all lines in the 
        # block are relevant.
        
        block_top.upto(block_bottom) do |number|
           if lines[number-1] =~ relevant_line_pattern then
              before, after = lines[number-1].split(/[\t ]*=[\t ]*/, 2)
              lines[number-1] = [before.ljust(best_column), after].join(after[0,1] == '>' ? " =" : " = ")
           end
        end
        
        
        #
        # Output the replacement text
        
        lines.each do |line|
           puts line
        end

      :input: selection
45FFA4DA-C84A-4D1F-862B-F249C24941EF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: C Library Completions
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 45FFA4DA-C84A-4D1F-862B-F249C24941EF
      :disable_output_auto_indent: 
      :bundle_uuid: 4675A940-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        line = ENV['TM_CURRENT_LINE']
        
        def candidates_or_exit(methodSearch="")
          zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/CLib.txt.gz }
          candidates = zGrepped.split("\n")
          TextMate.exit_show_tool_tip "No completion available" if candidates.empty?
          return candidates
        end
        
        def prettify(candidate)
          ca = candidate.split("\t")
          ca[0]+ca[1]
        end
        
        def snippet_generator(cand, s)
          	c = cand.split"\t"
          i = 0
          middle = c[1][1..-2].split(",").collect do |arg|
        	 "${"+(i+=1).to_s+":"+ arg.strip + "}" 
        	end.join(", ")
          c[0][s..-1]+"("+middle+")$0"
        end
        
        def pop_up(candidates, searchTerm)
          start = searchTerm.size
          prettyCandidates = candidates.map { |candidate| [prettify(candidate), candidate] }.sort
          if prettyCandidates.size > 1
            require "enumerator"
            pruneList = []  
        
            prettyCandidates.each_cons(2) do |a| 
              pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
            end
            pruneList << true
            ind = -1
            prettyCandidates = prettyCandidates.select do |a| #remove duplicates
              pruneList[ind+=1]  
            end
          end
        
          if prettyCandidates.size > 1
            #index = start
            #test = false
            #while !test
            #  candidates.each_cons(2) do |a,b|
            #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
            #  end
            #  break if test
            #  searchTerm << candidates[0][index].chr
            #  index +=1
            #end
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            pl = {'menuItems' => prettyCandidates.map { |pretty, full | { 'title' => pretty, 'cand' => full} }}
            io = open('|"$DIALOG" -u', "r+")
            io << pl.to_plist
            io.close_write
            res = OSX::PropertyList.load(io.read)
            if res.has_key? 'selectedMenuItem'
              snippet_generator( res['selectedMenuItem']['cand'], start )
            else
              ""
            end
          else
            snippet_generator( candidates[0], start )
          end
        end
        
        if ENV['TM_INPUT_START_LINE_INDEX']
          caret_placement =ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
        else
          caret_placement =ENV['TM_LINE_INDEX'].to_i - 1
        end
        
        backContext = line[1+caret_placement..-1].match /^[a-zA-Z0-9_]/
        
        if backContext
          TextMate.exit_discard
        end
        
        
        alpha_and_caret = /[a-zA-Z_][_a-zA-Z0-9]*\(?$/
        if k = line[0..caret_placement].match(alpha_and_caret)
          candidates = candidates_or_exit(k[0])
          res = pop_up(candidates, k[0])
        else
          res = ""
        end
        print res

      :input: none
8AF46225-833C-473E-8EEC-F21C581636F6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.bracketed.objc
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Selector
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 8AF46225-833C-473E-8EEC-F21C581636F6
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        line = STDIN.read
        caret_placement = 0
        tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
        if tmp > 0
        class String
          def index_of_nth_occurrence_of(n, ch)
            self.unpack("U*").each_with_index do |e, i|
              return i if e == ch && (n -= 1) == 0
            end
            return -1
          end
        end
          caret_placement += line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
        else
          caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
        end
        
        def match_iter(rgxp,str)
          offset = 0
          while m = str.match(rgxp)
            yield [m[0], m.begin(0) + offset, m[0].length]
            str = m.post_match
            offset += m.end(0)
          end
        end
        
        def loadHTMLPage(url,className,methodName)
          m = open(url).read.match(/(\#\/\/apple_ref\/[^"]+?\/#{className}\/#{methodName})"/)
          url += m[1] if m
          TextMate.exit_show_html "<meta http-equiv='Refresh' content='0;URL=tm-file://#{url}'>"
        end
        
        pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
        
        up = 0
        start = [0]
        #Count [
        match_iter(pat , line[0..caret_placement]) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            start << beg
          elsif t == "]"
            start.pop
          end
        end
        
        up = 0
        last = line.length
        match_iter(pat , line[caret_placement+1..line.length]) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            up +=1
          elsif t == "]"
            if up == 0
              last = beg + caret_placement
              break
            end
            up -=1
          end
        end
        
        up =-1
        list = ""
        
        match_iter(pat , line[start[-1]..last]) do |tok, beg, len|
          t = tok[0].chr
          if t == "["
            up +=1
          elsif t == "]"
            up -=1
          elsif t !='"' and t !='@' and up == 0
            list << tok
          end
        end
        
        if list == ""
          m = line[start[-1]..last].match(/([a-zA-Z][a-zA-Z0-9]*:?)\s*$/)
          if m
            list = m[1]
            last = m.begin(0)
          end
        end
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        zGrepped = %x{ zgrep ^#{e_sh list + "[[:space:]]"} #{e_sh ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz }
        candidates = zGrepped.split("\n") #.map{|e| e.split[1]}
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
        TextMate.exit_show_tool_tip "No documentation found for:\n#{list}" if candidates.empty?
        if candidates.size > 1 # if more than 1 candidate disambiguate
          m = line[start[-1]..last].match(/^(\[\s*)+([A-Z][a-zA-Z0-9]*)/)
          old = candidates
          if m
            candidates = candidates.select{|e| e.split("\t")[2] == m[2] }
        
          end
          candidates = old if candidates.empty?
        end
        
        if candidates.size > 1
          require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
          dialog_path = "#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog"
        #pl = {'menuItems' => prettyCandidates.map { |pretty, full | { 'title' => pretty, 'cand' => full} }}  
        plist = { 'menuItems' => candidates.map do |cand|
                                {'title' => "[#{cand.split("\t")[3].match /[^;]+/} #{cand.split("\t")[0]}]", 'full' => cand} 
                              end
                  }.to_plist
        lk = candidates.map do |cand|
                                {'title' => "[#{cand.split("\t")[3]} #{cand.split("\t")[0]}]", 'full' => cand} 
                              end
        
        
          res = OSX::PropertyList::load(%x{#{e_sh dialog_path} -up #{e_sh plist} })
          if res.has_key? 'selectedMenuItem'
        	result = res['selectedMenuItem']['full']
          else
           TextMate.exit_discard  
          end
        else
          result = candidates[0]
        end
        
        #file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/ApplicationKit/Classes/NSApplication_Class/Reference/Reference.html#//apple_ref/c/data/NSApplicationDidFinishLaunchingNotification
        #file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/clm/NSObject/alloc
        #file:///Developer/ADC%20Reference%20Library/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIColor_Class/Reference/Reference.html#//apple_ref/occ/clm/CIColor/colorWithRed:green:blue:alpha:
        #file:///Developer/ADC%20Reference%20Library/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/NSObject/autorelease
        
        methodName, framework,behaviors,nsClass, methodType = result.split("\t")
        semi = nsClass.index(";")
        if semi.nil?
          className = nsClass
        else
          className = nsClass[0..semi-1]
        end
        
        t = {"AK" => "/Developer/ADC Reference Library/documentation/Cocoa/Reference/ApplicationKit/",
          "F"  => "/Developer/ADC Reference Library/documentation/Cocoa/Reference/Foundation/", 
          "CI" => "/Developer/ADC Reference Library/documentation/GraphicsImaging/Reference/QuartzCoreFramework/",
        "WK" => "/Developer/ADC Reference Library/documentation/Cocoa/Reference/WebKit/",
          "CD" => "/Developer/ADC Reference Library/documentation/Cocoa/Reference/CoreDataFramework/",
          "Cl" => "Classes/#{className}_Class/Reference/",
          "Pr" => "Protocols/#{className}_Protocol/Reference/", 
        }
        unless t[framework].nil?
          url=t[framework] + t[behaviors]
          if File.exist?(url + "Reference.html")
            url += "Reference.html"
            loadHTMLPage(url,className,methodName)
        
          elsif File.exist?(url + "#{className}.html")
            url += "#{className}.html"
            loadHTMLPage(url,className,methodName)
          end
        end
        TextMate.exit_discard

      :input: selection
797A6B84-49BB-4BBD-8F51-9A225433CA9C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Command Usage
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :alt
        - :control
      :uuid: 797A6B84-49BB-4BBD-8F51-9A225433CA9C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #! /usr/bin/ruby
        text = STDIN.read
        file = `find "${R_HOME:-/Library/Frameworks/R.framework/Resources}"/library -name #{text}.tex -print 2>/dev/null`
        unless file.empty?
               tex = `cat #{file}`
               tex.scan(/\\begin\{Usage\}\n((?:.|\n)*)\\end\{Usage\}/) do |usage|
                 usage[0].scan(/\\begin\{verbatim\}\n((?:.|\n)*)\\end\{verbatim\}/) do |terms|
                   puts terms
                   puts
                 end
               end
        end
      :input: selection
AD9B4CB8-7577-11D9-A32D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add to Depot
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: AD9B4CB8-7577-11D9-A32D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_P4:=p4}" add "$TM_FILEPATH"

      :input: none
A7240D98-3452-42FC-A3D8-960F1E992AD2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.plist -source.plist.binary
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preprocess and Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: A7240D98-3452-42FC-A3D8-960F1E992AD2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Xcode 2.1 supports preprocessed plist files
        # CPP's authors couldn't be bothered to support stdin
        TEMP_FILE1=`mktemp /tmp/TextMate_plist.XXXXXX`
        TEMP_FILE2=`mktemp /tmp/TextMate_plist_pre.XXXXXX`
        if [[ -n $TEMP_FILE1 ]]; then
        	cat > "$TEMP_FILE1"
        	cpp -P "$TEMP_FILE1" "$TEMP_FILE2"
        	plutil -lint "$TEMP_FILE2"
        	rm "$TEMP_FILE1"
        	rm "$TEMP_FILE2"
        else
        	echo "Error: Temporary file could not be created"
        fi
      :input: document
97D13B6C-9CC2-4CAD-8CD3-80DC9CBC1968: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Declaration to Implementation (with Doxygen)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: u
        modifiers: 
        - :super
      :uuid: 97D13B6C-9CC2-4CAD-8CD3-80DC9CBC1968
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Converts method declarations to their
        # out-of-class-declaration implementations
        # with Doxygen placeholders in place.
        #
        # Could be applied to bunch of methods in
        # selection.
        #
        # It's possible to override Doxygen placeholders
        # after specifying name of the class.
        
        ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/declaration_to_implementation.rb" doxygen
      :input: selection
EC271DAE-BEC9-11D9-8856-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: EC271DAE-BEC9-11D9-8856-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + '/lib/textmate'
        result = `#{ENV['TM_PHP'] || 'php'} -l`
        puts result
        TextMate.go_to :line => $1 if result =~ /line (\d+)/
      :input: document
DF2093BA-EA37-4546-9ADA-C17A13CEBDA9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.single.scope.tm-grammar -punctuation.definition.string.begin, string.quoted.single.scope.root.tm-grammar -punctuation.definition.string.begin,  string.quoted.single.include.tm-grammar -punctuation.definition.string.begin, string.quoted.double.scope.tm-grammar -punctuation.definition.string.begin, string.quoted.double.scope.root.tm-grammar -punctuation.definition.string.begin,  string.quoted.double.include.tm-grammar -punctuation.definition.string.begin
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Scope Completion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: []

      :uuid: DF2093BA-EA37-4546-9ADA-C17A13CEBDA9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/current_word"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/ui"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes"
        
        partial_scope = Word.current_word('a-zA-Z._#+-', :left)
        matches = []
        
        # Only if we are in an empty include rule, otherwise use the main scope completion.
        if ENV['TM_SCOPE'] =~ /string\.quoted\.(single|double)\.include/ && partial_scope == ""
          options = []
          options << { 'title' => "Selected Grammar ($base)", 'string' => "\\$base" }
          options << { 'title' => "This Grammar ($self)", 'string' => "\\$self" }
          options << { 'title' => "Repository Item", 'string' => "\#${0:repository_item}" }
          options << { 'separator' => 1 }
          options << { 'title' => "source", 'string' => "source." }
          options << { 'title' => "text", 'string' => "text." }
          res = TextMate::UI.menu(options)
          print res['string'] if res
          exit 204
        end
        
        if ENV['TM_SCOPE'] =~ /string\.quoted\.(single|double)\.scope\.root/
          $scopes = "source.\ntext.html.\ntext.plain.\ntext.xml."
        else
          $scopes = DATA.read
        end
        
        $scopes.each_line do |line|
          matches << $1 if line =~ /(^#{Regexp.escape partial_scope}[-a-zA-Z._#+]*?\.)/
        end
        
        matches.uniq!
        
        options = Array.new(matches)
        
        matches.collect! { |m| m.sub(/#{Regexp.escape partial_scope}(.*)/, '\1') }
        options.collect! { |m| m.sub(/^(.*)\.$/, '\1') }
        
        if matches.empty?
          print ""
        elsif matches.length == 1
          print matches.first
        elsif index = TextMate::UI.menu(options)
          print matches[index]
        end
        
        __END__
        
        comment.block.documentation.
        comment.block.empty.
        comment.block.preprocessor.
        comment.line.apostrophe.
        comment.line.asterisk.
        comment.line.at-sign.
        comment.line.backtick.
        comment.line.double-backslash.
        comment.line.double-dash.
        comment.line.double-dash.
        comment.line.double-dot.
        comment.line.double-number-sign.
        comment.line.double-slash.
        comment.line.exclamation.
        comment.line.number-sign.
        comment.line.parentheses.
        comment.line.percent.
        comment.line.percentage.
        comment.line.semicolon.
        comment.line.slash.
        constant.character.entity.
        constant.character.escape.
        constant.language.boolean.
        constant.language.null.
        constant.numeric.base64.
        constant.numeric.float.
        constant.numeric.integer.binary.
        constant.numeric.integer.decimal.
        constant.numeric.integer.hexadecimal.
        constant.numeric.integer.long.
        constant.numeric.integer.octal.
        constant.other.placeholder.
        constant.other.reference.
        constant.other.symbol.
        entity.name.function.
        entity.name.section.
        entity.name.tag.block.
        entity.name.tag.form.
        entity.name.tag.inline.
        entity.name.tag.localname.
        entity.name.tag.meta.
        entity.name.tag.object.
        entity.name.type.class.
        entity.name.type.module.
        entity.other.attribute-name.
        entity.other.inherited-class.
        invalid.deprecated.obsolete.
        invalid.deprecated.trailing-whitespace.
        invalid.illegal.whitespace
        keyword.control.def.
        keyword.control.directive.
        keyword.control.exception.
        keyword.control.import.
        keyword.operator.arithmetic.
        keyword.operator.assignment.
        keyword.operator.comparison.
        keyword.operator.logical.
        keyword.other.directive.
        keyword.other.documentation.
        markup.bold.
        markup.deleted.
        markup.heading.
        markup.italic.
        markup.list.numbered.
        markup.list.unnumbered.
        markup.other.
        markup.quote.
        markup.raw.block.
        markup.raw.inline.
        markup.underline.link.
        meta.array.
        meta.block.
        meta.class.
        meta.definition.
        meta.directive.
        meta.element.
        meta.embedded.block.
        meta.embedded.expression.
        meta.embedded.line.
        meta.expression.
        meta.function.
        meta.group.
        meta.header.
        meta.link
        meta.module.
        meta.paragraph.
        meta.preprocessor.
        meta.property.
        meta.scope.
        meta.section
        meta.separator.
        meta.structure.
        meta.tag.block.
        meta.tag.form.
        meta.tag.inline.
        meta.tag.meta.
        meta.tag.object.
        meta.tag.preprocessor.
        meta.toc-list.
        punctuation.definition.arguments.begin.
        punctuation.definition.arguments.end.
        punctuation.definition.array.begin.
        punctuation.definition.array.end.
        punctuation.definition.comment.
        punctuation.definition.constant.
        punctuation.definition.entity.
        punctuation.definition.function.
        punctuation.definition.heading.
        punctuation.definition.keyword.
        punctuation.definition.parameters.begin.
        punctuation.definition.parameters.end.
        punctuation.definition.preprocessor.
        punctuation.definition.string.begin.
        punctuation.definition.string.end.
        punctuation.definition.tag.
        punctuation.definition.variable.
        punctuation.section.array.
        punctuation.section.class.
        punctuation.section.embedded.begin.
        punctuation.section.embedded.end.
        punctuation.section.function.
        punctuation.section.group.
        punctuation.section.scope.
        punctuation.separator.arguments.
        punctuation.separator.array.
        punctuation.separator.continuation.
        punctuation.separator.key-value.
        punctuation.separator.parameters.
        punctuation.terminator.expression.
        punctuation.terminator.function.
        punctuation.terminator.rule.
        punctuation.terminator.statement.
        punctuation.whitespace.comment.leading.
        punctuation.whitespace.comment.trailing.
        punctuation.whitespace.embedded.leading.
        punctuation.whitespace.embedded.trailing.
        source.
        storage.modifier.extends.
        storage.modifier.global.
        storage.modifier.implements.
        storage.type.class.
        storage.type.function.
        storage.type.method.
        storage.type.module.
        string.interpolated.
        string.other.
        string.quoted.double.
        string.quoted.other.
        string.quoted.single
        string.quoted.triple.
        string.regexp.
        string.unquoted.heredoc.
        support.class.
        support.constant.
        support.function.
        support.other.
        support.type.
        support.variable.
        text.html.
        text.plain.
        text.xml.
        variable.language.
        variable.other.predefined.
        variable.other.readwrite.global.
        variable.other.register.
        variable.parameter.

      :input: none
5F225755-5840-44CF-BC26-2D484DE833A0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Record
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: s
        modifiers: 
        - :alt
        - :control
      :uuid: 5F225755-5840-44CF-BC26-2D484DE833A0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat > ${TMP:-/tmp}/TextMate-ScratchSnippet.txt
      :input: selection
9656317E-73EB-11D9-9848-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Build
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 9656317E-73EB-11D9-9848-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_BUNDLE_SUPPORT}/bin/run_xcodebuild.sh"

      :input: none
473C6519-F164-4496-A699-F9DE2CAB56DD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Merge from tag...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 473C6519-F164-4496-A699-F9DE2CAB56DD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'versioned_file'
        
        tag=`CocoaDialog inputbox --title Merge --informative-text 'Which tag?' --button1 Update --button2 'Cancel'`
        
        accept, tag = *tag.to_a.map {|l| l.chomp}
        
        exit unless accept =~ /1/
        
        file = CVS::VersionedFile.new(ENV['TM_FILEPATH'])
        file.update(:tag => tag, :sticky => false)
        
        puts "Merged #{file.basename} from #{tag}."
        
        END

      :input: none
A33BD582-D5BB-4C5B-A14C-5E47A90B01E3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: graceful
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A33BD582-D5BB-4C5B-A14C-5E47A90B01E3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Use this for a simple solution..
        RESPONSE=`exec osascript <<EOF | tr "\r" "\n"
         	
         	--To be asked for your password each time then use:
         	do shell script "apachectl graceful" with administrator privileges
         	
         	--To skip password vaildation then change this... not for the security conscious.
         	--do shell script "apachectl graceful" password "the_password" with administrator privileges
         	
        EOF`
         
        echo $RESPONSE
        
        # Otherwise, to store your password in the Keychain check this script in the Bundle Support folder.
        #
        # To use the Keychain to store the admin password then open /Applications/Utilities/Keychain Access.app
        # Add a new keychain called "TextMate" 
        # Add a Key with the name "ApacheBundle" to the new Keychaing then store your admin password in it.
        
        #"${TM_BUNDLE_SUPPORT}/apachectlUsingKeychain.sh" graceful
      :input: none
B797AE83-EABD-4BB7-AD20-0FB24F824343: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Update
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: B797AE83-EABD-4BB7-AD20-0FB24F824343
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"
        fi
        
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/hg_update.rb"
        
        
        
        # will cause current file to be re-loaded
        rescan_project
      :input: none
0EC28386-027E-49E4-AEDE-B212796B5AD8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Convert to Default Target
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 0EC28386-027E-49E4-AEDE-B212796B5AD8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags "$TM_FILEPATH"
      :input: none
DA5AD0D9-F7C0-4010-9FDC-FF01B0434F9A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Distill Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DA5AD0D9-F7C0-4010-9FDC-FF01B0434F9A
      :disable_output_auto_indent: 
      :bundle_uuid: B7BC3FFD-6E4B-11D9-91AF-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        res=$(CocoaDialog inputbox --title "Distill Text" \
            --informative-text "Enter a pattern:" \
            --button1 "Filter" --button2 "Cancel")
        
        [[ $(head -n1 <<<"$res") == "2" ]] && exit_discard
        export pattern=$(tail -n1 <<<"$res")
        
        # This could be done with grep, but Python's RE is closer to oniguruma
        "${TM_PYTHON:-python}" -c '
        import sys, os, re, traceback
        try:
          pattern = re.compile(os.environ["pattern"])
        except re.error, e:
          sys.stderr.write("Invalid pattern: %s" % e)
          sys.exit(1)
        mate = "\"%s/bin/mate\" -a" % os.environ["TM_SUPPORT_PATH"]
        pb = os.popen(mate, "w")
        for line in sys.stdin:
          if pattern.search(line):
            pb.write(line)
          else:
            sys.stdout.write(line)
        pb.close()
        ' || exit_show_tool_tip
        
      :input: selection
50A08D59-18D6-48C1-938D-6644906F5C83: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Yahoo Video Search
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Y
        modifiers: 
        - :control
      :uuid: 50A08D59-18D6-48C1-938D-6644906F5C83
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        SUPPORT = ENV['TM_SUPPORT_PATH']
        DIALOG = ENV['DIALOG']
        require SUPPORT + '/lib/escape'
        require SUPPORT + '/lib/osx/plist'
        require SUPPORT + '/lib/exit_codes'
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/yahoo"
        require 'erb'
        
        input = STDIN.read
        query = e_url(input)
        yahoo = VideoSearch.new('TM_YAHOO', query, 'all', 10, 1, nil, 1)
        ysuggest = []
            yahoo.parse_results.each {|result| 
                ysuggest << { 
                  'title' => result['Title'].gsub('"','&raquo;'),
                  'url' => result['Url']}
            }
            plist = { 'menuItems' => ysuggest }.to_plist
        
            res = OSX::PropertyList.load(`#{e_sh DIALOG} -up #{e_sh plist}`)
            TextMate.exit_show_tool_tip "No matches found" unless res.has_key? 'selectedMenuItem'
            url = res['selectedMenuItem']['url']
            title = res['selectedMenuItem']['title']
        
            print ERB.new(ENV['TM_LINK_FORMAT']).result
      :input: selection
DFE393BE-0764-49FE-B464-6350A50921E6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.rails.controller
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Functional Test
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: DFE393BE-0764-49FE-B464-6350A50921E6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" functional_test
      :input: none
FE9FF936-7E32-11D9-B7C6-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.sql
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FE9FF936-7E32-11D9-B7C6-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: AAB4CBF7-73F9-11D9-B89A-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env bash\n\n\
        . \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"SQL Bundle Help\" \"SQL\"\n\n\
        \"$TM_SUPPORT_PATH/lib/markdown_to_help.rb\" <<'MARKDOWN'\n\
        <script type=\"text/javascript\" charset=\"utf-8\">\n\
        \tfunction launchConfig() {\n\
        \t    TextMate.system('\"$TM_BUNDLE_SUPPORT\"/bin/configure.sh 2>&1', null);\n\
        \t    window.close();\n\
        \t}\n\
        </script>\n\
        The SQL bundle allows you to browse MySQL/PostgreSQL databases and execute queries.\n\n\
        # Configuration\n\n\
        Before you can use the SQL bundle you must configure at least one SQL connection using the <a href=\"javascript:launchConfig()\">*Configure*</a> command.\n\
        You must provide at least a username and a hostname (note that if you wish to connect locally bypassing a socket, you must use `127.0.0.1` rather than `localhost`).\n\n\
        You can store multiple connections \xE2\x80\x93 use the \xE2\x80\x98+\xE2\x80\x99 button to add another connection. Whichever profile is selected when you close the dialog will be used when connecting.\n\n\
        # Execute Line / Selection as Query\n\n\
        The _Execute Line / Selection as Query_ command takes the selected text or current line and submits it as a query to either MySQL or PostgreSQL.\n\n\
        You will need to setup a database connection via the <a href=\"javascript:launchConfig()\">*Configure*</a> command. Pressing \xE2\x8C\x83\xE2\x87\xA7Q on an empty line will open the database browser.\n\n\
        # Database Browser\n\n\
        The database browser command displays a list of tables in whatever database you are currently working in using either PostgreSQL or MySQL. Click on the name of a database on the left to view the tables in that database.\n\n\
        The connection to your server is setup with the <a href=\"javascript:launchConfig()\">*Configure*</a> command.\n\n\
        MARKDOWN\n\n\
        html_footer\n"
      :input: none
9BF6E13C-C31A-11D9-820C-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Log
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: 9BF6E13C-C31A-11D9-820C-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # XXX: svk log doesn't support multiple paths
        #      so if multiple files are selected, it will
        #      only do the first one!
        
        TM_SVK="${TM_SVK:=svk}"
        TM_RUBY="${TM_RUBY:=ruby}"
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log.rb"
        TM_SVK_LOG_RANGE="${TM_SVK_LOG_RANGE:=BASE:1}"
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_SVK" log -vr"$TM_SVK_LOG_RANGE" "$TM_FILEPATH" \
           2>&1| "$TM_RUBY" -- "$FORMAT_LOG"
        else
           eval "$TM_SVK" log -vr"$TM_SVK_LOG_RANGE" $TM_SELECTED_FILES \
           2>&1| "$TM_RUBY" -- "$FORMAT_LOG"
        fi
      :input: none
F56EB32C-F574-4865-83BF-976D8A826FC1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff with Newest (Tip)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: F56EB32C-F574-4865-83BF-976D8A826FC1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
        fi
        
        "${TM_RUBY:=ruby}" -I "$TM_BUNDLE_SUPPORT/" <<END
        	require 'hg_diff'
        	Mercurial::diff_active_file("-r tip", "Diff With Tip")
        END

      :input: none
31614C02-1FED-4644-9518-2C2DEF0D7A2C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown -meta.disable-markdown
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Bold
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 31614C02-1FED-4644-9518-2C2DEF0D7A2C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require 'escape'
        def esc(str)
          e_sn(str).gsub(/\}/, '\\}') # escaping inside a placeholder
        end
        
        s = STDIN.read
        if s.empty? then
          print "**$1**"
        elsif s =~ /^\*{2}(.*)\*{2}$/ then
          print "${1:#{esc $1}}"
        elsif ENV.has_key? 'TM_SELECTED_TEXT'
          print "${1:**#{esc s}**}"
        else
          print "**#{e_sn s}**"
        end
      :input: selection
3AE7D1AD-8300-11D9-B216-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to Markdown
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: 3AE7D1AD-8300-11D9-B216-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/^(\t*)/$1* /;'
      :input: selection
7D88D67B-C562-41DB-B25B-0AA8EAF3DC36: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Diff with Revision\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 7D88D67B-C562-41DB-B25B-0AA8EAF3DC36
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        if [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"\n\
        fi\n\n\
        revs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Diff Revisions\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Diff '$(basename \"$TM_FILEPATH\")' with older revision:\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\n\
        revs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\n\
        revs=( $revs )\n\n\
        \"${TM_RUBY:=ruby}\" -I \"$TM_BUNDLE_SUPPORT/\" <<END\n\
        \trequire 'hg_diff'\n\
        \tMercurial::diff_active_file(\"-r${revs[0]#r}\", \"Diff With Revision\xE2\x80\xA6\")\n\
        END\n"
      :input: none
521C9FC0-0B61-48C8-A76B-60A4AE8DF449: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Environment Based on Current Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "{"
        modifiers: 
        - :super
      :uuid: 521C9FC0-0B61-48C8-A76B-60A4AE8DF449
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\
        SUPPORT = ENV['TM_BUNDLE_SUPPORT']\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui'\n\
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'\n\
        require SUPPORT + '/lib/config_helper.rb'\n\
        @plist = Config.load\n\
        shortcuts = @plist['environments']\n\
        lshortcuts = @plist['labeled_environments']\n\
        if ENV['TM_SCOPE'].match('beamer') then\n  shortcuts.update(@plist['environments_beamer'])\n  lshortcuts.update(@plist['labeled_environments_beamer'])\n\
        end\n\
        name = STDIN.read\n\
        cmd = nil\n\
        if name == \"\" then\n  arr = [\"custom\xE2\x80\xA6\",nil] + (shortcuts.keys+lshortcuts.keys).sort\n  ind = TextMate::UI.menu(arr)\n  TextMate.exit_discard if ind.nil?\n  if ind == 0 then\n\
        \tname = \"\"\n  else\n     name = arr[ind]\n  end\n\
        end\n\
        for key in shortcuts.keys do\n  if shortcuts[key]['triggers'].index(name) then\n    cmd = key\n    setting = :no_label\n    dict = shortcuts\n  end\n\
        end\n\
        for key in lshortcuts.keys do\n  if lshortcuts[key]['triggers'].index(name) then\n    cmd = key\n    setting = :label\n    dict = lshortcuts\n  end\n\
        end\n\
        if !cmd.nil? then\n  print \"\\\\begin{#{cmd}}\"\n  print \"\\n\" if setting == :no_label\n  print dict[cmd][\"content\"] || \"\\t$0\"\n  print \"\\n\\\\end{#{cmd}}\"\n\
        elsif name == \"\"\n  print \"\\\\begin{${1:env}}\\n\\t$0\\n\\\\end{${1:env}}\"\n\
        else\n  print \"\\\\begin{#{name}}\\n\\t$0\\n\\\\end{#{name}}\"\n\
        end\n"
      :input: selection
32E15B26-B444-11D9-8D63-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Diff With Revision\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 32E15B26-B444-11D9-8D63-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        ruby >& /tmp/tm_svn_debug <<END &\n\
        begin\n\
        \trequire 'tempfile'\n\
        \trequire \"$TM_BUNDLE_SUPPORT/svn_revision_chooser\"\n\
        \trequire \"$TM_BUNDLE_SUPPORT/svn_diff\"\n\n\
        \tfile = ENV['TM_FILEPATH']\n\
        \trevisions = Subversion::choose_revision(file, \"Diff #{File.basename(file)} working copy?\")\n\
        \t\n\
        \tunless revisions.nil?\n\
        \t\tdiff_text = Subversion::diff_working_copy_with_revision(:paths => [file], :revision => revisions[0], :command_name => \"Diff With Revision\xE2\x80\xA6\")\n\
        \t\tTempfile.open(\"svndiff #{File.basename(file)}\") do |tempfile|\n\
        \t\t\ttempfile.write(diff_text)\n\
        \t\t\ttempfile.flush\n\
        \t\t\t%x{\"#{ENV['TM_SUPPORT_PATH']}/bin/mate\" -w #{e_sh(tempfile.path)}}\n\
        \t\tend\n\
        \tend\n\n\
        rescue Exception => error\n\
        \tTextMate::UI.alert(:warning, \"You\xE2\x80\x99ve discovered a bug\", \"Please report the following text: #{error}\\n\\n#{error.backtrace.join(%Q{\\n})}\")\n\
        end\n\
        END\n"
      :input: none
E8EE6110-2DBA-4FC1-807B-9B19B5DE6737: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Resolve Conflicts With FileMerge\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: E8EE6110-2DBA-4FC1-807B-9B19B5DE6737
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/bin/bash
        #
        # Wrapper script to use FileMerge to resolve Subversion conflicts
        # [modified slightly from http://ssel.vub.ac.be/svn-gen/bdefrain/fmscripts/fmresolve]
        #
        
        conflictfile="$TM_FILEPATH"
        FM="/Developer/Applications/Utilities/FileMerge.app/Contents/MacOS/FileMerge"
        
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd "$FM" "You must install the Apple developer tools to run FileMerge"
        
        function lookup {
        	local info=$1
        	local wantedkey=$2
        	local key
        	local value
        	# Split lines in info through word splitting
        	local IFS=$'\n'
        	for line in $info; do
        		key=${line%%: *}
        		value=${line#*: }
        		if [ $key == $wantedkey ]; then
        			RETVAL=$value
        			return 0
        		fi
        	done
        	return 1
        }
        
        filedir=`dirname "$conflictfile"`
        info=`"$TM_SVN" info "$conflictfile"`
        lookup "$info" "Conflict Current Base File" && leftfile=$RETVAL
        lookup "$info" "Conflict Previous Working File" && rightfile=$RETVAL
        lookup "$info" "Conflict Previous Base File" && ancestorfile=$RETVAL
        mergefile=`basename "$conflictfile"`
        
        if [ -z "$leftfile" ] || [ -z "$rightfile" ] || [ -z "$ancestorfile" ]; then
        	echo "Can't obtain conflict info for $conflictfile" 1>&2
        	exit 2
        fi
        
        #echo Starting FileMerge... 1>&2
        "$FM" -left "${filedir}/${leftfile}" -right "${filedir}/${rightfile}" -ancestor "${filedir}/${ancestorfile}" -merge "${filedir}/${mergefile}" &>/dev/null &
        
      :input: none
6F2AB859-46E3-4FF5-A9A7-E9A813AB5DE1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Clone Development DB to Test DB
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 6F2AB859-46E3-4FF5-A9A7-E9A813AB5DE1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:test:clone

      :input: none
565860C4-A665-4C64-81B0-CA7848B181A2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy URL Encoded Script
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
        - :super
      :uuid: 565860C4-A665-4C64-81B0-CA7848B181A2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -KA -rcgi
        src = CGI.escape(STDIN.read)
        src = src.gsub('+', '%20')
        src = 'applescript://com.apple.scripteditor?action=new&script=' + src
        open('|pbcopy', 'w') { |io| io.write src }
        print "The URL encoded AppleScript was copied to the clipboard"
      :input: selection
BA930D7C-7B5E-4BFE-9293-6B8FAF962990: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Latest Revision (HEAD)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
        - :super
      :uuid: BA930D7C-7B5E-4BFE-9293-6B8FAF962990
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #
        # $Id: Latest Revision (HEAD).plist 3075 2006-04-22 20:20:01Z aparajita $
        #
        
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd opendiff "You must install the Apple developer tools to run FileMerge."
        
        # See if the current file is under svn control
        FILE=`basename "$TM_FILEPATH"`
        INFO_LINES=`svn info "$FILE" 2>&1 | grep "^Path\: .*\$" | wc -l`
        
        if [ $INFO_LINES -eq 0 ]; then
        	echo "The current file is not under subversion control"
        	exit_show_tool_tip
        fi
        
        "$TM_BUNDLE_SUPPORT/bin/filemerge.sh" HEAD -

      :input: none
FA5DC73E-AAE0-4C69-86E1-87B9E0390FD0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Fetch Post
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FA5DC73E-AAE0-4C69-86E1-87B9E0390FD0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging.rb"
        Blogging.new.fetch
      :input: none
D8C78EA6-68A7-4625-826A-C64E51EF0724: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff with Working Copy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: D8C78EA6-68A7-4625-826A-C64E51EF0724
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
        fi
        
        "${TM_RUBY:=ruby}" -I "$TM_BUNDLE_SUPPORT/" <<END
        	require 'hg_diff'
        	Mercurial::diff_active_file("", "Diff With Working Copy")
        END
      :input: none
779DEA3C-D310-4B66-9531-DF9007434878: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 779DEA3C-D310-4B66-9531-DF9007434878
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        PROJECT=$(ruby -- "${TM_BUNDLE_SUPPORT}/bin/find_xcode_project.rb")
        if [[ -f "${PROJECT}/project.pbxproj" ]]; then
           "${TM_BUNDLE_SUPPORT}/bin/run_xcode_target.rb" -project_dir="$PROJECT"
        else
           echo "Didn't find an Xcode project file."
           echo "You may want to set TM_XCODE_PROJECT."
        fi

      :input: none
882B5FB7-D233-4D92-80C3-2D00D55CAB29: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Monthly Archive
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 882B5FB7-D233-4D92-80C3-2D00D55CAB29
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\" -a=m"
      :input: document
B94A2DF9-FC40-4281-80FB-35FB2917CDE7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Lookup Word / Selection on Wikipedia and link
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: B94A2DF9-FC40-4281-80FB-35FB2917CDE7
      :disable_output_auto_indent: 
      :bundle_uuid: 1BF76350-AB8F-4FC8-9512-1129CEEE0A3E
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/progress.rb"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes.rb"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/ui.rb"
        require 'cgi'
        require 'open-uri'
        require 'erb'
        
        def cap_all_words(string)
        	return string.split(" ").map{|w| w.capitalize}.join(" ")
        end
        
        def follow_redirect(page)
          pagename = page.match(/var\swgPageName\s\=\s\"(.*?)\";/).to_a[1]
          url = %{http://en.wikipedia.org/wiki/#{pagename}}
          content = open(url).read
          return url, content, pagename
        end #follow_redirect
        
        def select_link(links)
            linklist = links.map { |p| p[0] }
            item = TextMate::UI.request_item :title => "Multiple Definitions", :prompt => "Please select a definition", :items => linklist
            TextMate.exit_discard if item.nil?
            return links[linklist.index(item)]
        end # select_link
        
        def check_for_search(page)
          TextMate.exit_show_tool_tip "No definition found" if page.match(/<title>([^<>]*)<\/title>/i).to_a[1].include? "Search"
          return page
        end # check_for_search
        
        def check_for_multiple_results(page,phrase,pagename)
          if page.match(/(<\/b>\scan\sbe:<\/p>)|(<\/b>\smay\srefer\sto:<\/p>)/i) then
            open("http://en.wikipedia.org/wiki/Special:Export/#{pagename}") {|body|
        	      links = []
        	      body.read.scan(/\[\[([^|\]]*)[|]?[^\]]*\]\]/) { |link| 
                links.push(link) }
               choice = select_link(links)
               TextMate.exit_discard if choice.nil?
               TextMate.exit_replace_text(%{<a href="http://en.wikipedia.org/wiki/#{CGI.escape(choice[0]).gsub('+','_')}" title="Wikipedia Entry: #{choice[0]}">#{phrase}</a>})        
                }
          end
        end #check_for_multiple_results
        
        def check_for_disambiguation(page,phrase,pagename)
        #  if page.match(/#{phrase}[\s]?\(disambiguation\)/i) then
          if page.include? "(disambiguation)"
        	    # findlink = page.match(/\"(\/wiki\/#{pagename}_%28disambiguation%29)\"/i) 
        	    # open("http://en.wikipedia.org#{findlink[1]}") {|body|
        		open("http://en.wikipedia.org/wiki/Special:Export/#{pagename}_%28disambiguation%29") {|body|
        	      content = body.read
        	      links = []
        	      content.scan(/\[\[([^|\]]*)[|]?[^\]]*\]\]/) { |link| 
                   links.push(link) }
               choice = select_link(links)
               TextMate.exit_discard if choice.nil?
               TextMate.exit_replace_text(%{<a href="http://en.wikipedia.org/wiki/#{CGI.escape(choice[0]).gsub('+','_')}" title="Wikipedia Entry: #{choice[0]}">#{phrase}</a>})        
                }
        	end
        end #check_for_disambiguation
        
        def getWikiDef(phrase)
          TextMate.call_with_progress(:title => "Contacting Wikipedia", :message => "Looking for definition of #{phrase}") do
            @response = open("http://en.wikipedia.org/wiki/Special:Search?search=#{CGI.escape(phrase)}",
                "User-Agent" => "TextMate 1.5.5")
            content = @response.read
            if content.scan(/Redirected\sfrom/)
              url, content, pagename = follow_redirect(content)
          #    confirmed = TextMate::UI.request_confirmation :button1 => "Accept", :button2 => "Cancel", :title => "Redirected to \"#{pagename}\"", :prompt => "Accept Redirection?"
          #    TextMate.exit_discard unless confirmed
            else
              url = @response.base_uri
              pagename = phrase
            end
            check_for_search(content)
            check_for_multiple_results(content,phrase,pagename)
            check_for_disambiguation(content,phrase,pagename)
            title = "Wikipedia Entry: " + pagename.gsub(/_/, ' ')
            return url, title, phrase
          end
        end
        
        url, title, input = getWikiDef(STDIN.read)
        print ERB.new(ENV['TM_LINK_FORMAT']).result

      :input: selection
30E93FBA-5A81-4D94-8A03-9CD46FCA3CFA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.function.objc - (meta.argument-type.objc | meta.return-type.objc)
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: "Completion: Partial Method Signature"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 30E93FBA-5A81-4D94-8A03-9CD46FCA3CFA
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        line = ENV['TM_CURRENT_LINE']
        
        def construct_arg_name(arg)
        	a = arg.match(/(NS|AB|CI|CD)?(Mutable)?(([AEIOQUYi])?[A-Za-z_0-9]+)/)
        	unless a.nil?
        		(a[4].nil? ? "a": "an") + a[3].sub!(/\b\w/) { $&.upcase }
        	else
        		""
        	end
        end
        
        def prettify(cand, call)
          stuff = cand.split("\t")
          if stuff[0].count(":") > 0
            name_array = stuff[0].split(":")
            out = ""
            begin
              stuff[-(name_array.size)..-1].each_with_index do |arg,i|
                if arg == "SEL"
                  out << name_array[i] +  ":(SEL)"+ "aSelector "
                else
                  out << name_array[i] +  ":("+ arg.gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)+")"+ "#{construct_arg_name(arg)} "
                end
              end
            rescue NoMethodError
              out << stuff[0]
            end
          else
            out = stuff[0]
          end
          out = "(#{stuff[5].gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)})#{out}" unless call || (stuff.size < 4)
        
          return [out.chomp.strip, stuff[0], cand]
        end
        
        def snippet_generator(cand, start, call)
        start = 0
          stuff = cand[start..-1].split("\t")
          if stuff[0].count(":") > 0
        
            name_array = stuff[0].split(":")
            name_array = [""] if name_array.empty? 
            out = ""
            begin
              stuff[-(name_array.size)..-1].each_with_index do |arg,i|
                  if arg == "SEL"
                    out << name_array[i] + ":(#{arg})${#{(i+1).to_s}:aSelector} " 
                  else
                    out << name_array[i] + ":(#{arg.gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)})${#{(i+1).to_s}:#{construct_arg_name(arg)}} "
                  end
              end
            rescue NoMethodError
              out << stuff[0]
            end
          else
            out = stuff[0]
          end
        out = "(#{stuff[5].gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)})#{out}" unless (stuff.size < 4)
          if ENV['TM_SCOPE'].include? "meta.scope.implementation.objc"
            rv = "\treturn nil;\n" unless stuff[5].match(/^void$/) || stuff[5].match(/IBAction/)
            
            out = out.chomp.strip + "\n\{$0\n#{rv}\}"
          else
            out = out.chomp.strip + "$0;"
          end
          return out
        end
        
        def pop_up(candidates, searchTerm, call = true)
          start = searchTerm.size
          prettyCandidates = candidates.map { |candidate| prettify(candidate,call) }.sort
        
        if prettyCandidates.size > 1
            require "enumerator"
            pruneList = []  
        
            prettyCandidates.each_cons(2) do |a| 
              pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
            end
            pruneList << true
            ind = -1
            prettyCandidates = prettyCandidates.select do |a| #remove duplicates
              pruneList[ind+=1]  
            end
          end
          prettyCandidates = prettyCandidates.sort {|x,y| x[1].downcase <=> y[1].downcase }
          if prettyCandidates.size > 1
            #index = start
            #test = false
            #while !test
            #  candidates.each_cons(2) do |a,b|
            #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
            #  end
            #  break if test
            #  searchTerm << candidates[0][index].chr
            #  index +=1
            #end
            
            show_dialog(prettyCandidates,start) do |c,s|
        			snippet_generator(c,s, call)
        		end
          else
            snippet_generator( candidates[0], start, call )
          end
        end
        
        def show_dialog(prettyCandidates,start,&snip_gen)
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            pl = {'menuItems' => prettyCandidates.map { |pretty,junk, full | { 'title' => pretty, 'cand' => full} }}
            io = open('|"$DIALOG" -u', "r+")
            io <<  pl.to_plist
            io.close_write
            res = OSX::PropertyList::load(io.read)
            if res.has_key? 'selectedMenuItem'
              snip_gen.call( res['selectedMenuItem']['cand'], start )
            else
              "$0"
            end
        end
        
        def candidates_or_exit(methodSearch, list, fileNames, notif = false)
        	x = candidate_list(methodSearch, list, fileNames, notif)
          TextMate.exit_show_tool_tip "No completion available" if x.empty?
          return x
        end
        
        def candidate_list(methodSearch, list, fileNames, notif = false)
          candidates = []
          fileNames.each do |fileName|
            zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/#{fileName} }
            candidates += zGrepped.split("\n")
          end
          # strip notifications
          if notif
        	  candidates = candidates.select {|cand| cand.match(/\tno\t/) }
        	else
            candidates = candidates.reject {|cand| cand.match(/\tno\t/) }
          end
          return [] if candidates.empty?
          if list.nil?
            return candidates
          else
            n = []
            candidates.each do |cand|
              n << cand if list.include?(cand.split("\t")[0])
            end
            n = (n.empty? ? candidates : n)
        
            return n
          end
        end
        
        methodDeclaration = /^((?:\+|-)\s*)([a-zA-Z][a-zA-Z0-9:]*)$/
        
        if k = line.match(methodDeclaration)
          candidates = candidates_or_exit( k[2], nil, "cocoa.txt.gz")
          res =pop_up(candidates, k[2])
          TextMate.exit_discard if res == "$0"
          print k[1] + res
        else
          TextMate.exit_discard
        end

      :input: selection
70BCF12B-C35D-11D9-AB2C-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Info
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: 70BCF12B-C35D-11D9-AB2C-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TM_SVK="${TM_SVK:=svk}"
        TM_RUBY="${TM_RUBY:=ruby}"
        FORMAT_INFO="${TM_BUNDLE_SUPPORT}/format_info.rb"
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_SVK" info "$TM_FILEPATH" \
           2>&1| "$TM_RUBY" -- "$FORMAT_INFO"
        else
           eval "$TM_SVK" info $TM_SELECTED_FILES \
           2>&1| "$TM_RUBY" -- "$FORMAT_INFO"
        fi
      :input: none
A5E76858-928F-47F9-9A18-DE9E281364AC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.pascal.vectorscript
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Lookup
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: A5E76858-928F-47F9-9A18-DE9E281364AC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        VW_MANPATH=$TM_VSCRIPT_MANUAL
        
        pushd "${VW_MANPATH}" > /dev/null
        FILE=`grep -o "<A name = \"${TM_CURRENT_WORD}" *.html | cut -f 1 -d :`
        popd > /dev/null
        FILEPATH="${VW_MANPATH}/${FILE}"
        LINES=`cat "${FILEPATH}" | tr '\r' '\n' | wc -l`
        STARTLINE=`cat "${FILEPATH}" | tr '\r' '\n' | grep -n "<\!-- ${TM_CURRENT_WORD}" | cut -f 1 -d :`
        TAILLINES=$((LINES-STARTLINE))
        HEADLINES=`cat "${FILEPATH}" | tr '\r' '\n' | tail -n $TAILLINES | grep -n "^<\!--" | cut -f 1 -d : | head -n 1`
        cat "${FILEPATH}" | tr '\r' '\n' | tail -n $TAILLINES 2> /dev/null | head -n $((HEADLINES-1))
      :input: selection
C6EBDA90-DEEF-43B8-BE1C-78759877BA35: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: OCaml Completion - disabled
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: C6EBDA90-DEEF-43B8-BE1C-78759877BA35
      :disable_output_auto_indent: 
      :bundle_uuid: F80D3822-6EE8-11D9-BF2D-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        line = STDIN.read
        
        def candidates_or_exit(methodSearch="")
          zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/OCamlSnippets.txt.gz }
          candidates = zGrepped.split("\n")
          TextMate.exit_show_tool_tip "No completion available" if candidates.empty?
          return candidates
        end
        
        def prettify(candidate)
          candidate.gsub(/\$\{\d+:|\}|\$0/,"")  
        end
        
        def snippet_generator(cand, start)
          cand[start..-1]  
        end
        
        def pop_up(candidates, searchTerm)
          start = searchTerm.size
          prettyCandidates = candidates.map { |candidate| [prettify(candidate), candidate] }.sort
          if prettyCandidates.size > 1
            require "enumerator"
            pruneList = []  
        
            prettyCandidates.each_cons(2) do |a| 
              pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
            end
            pruneList << true
            ind = -1
            prettyCandidates = prettyCandidates.select do |a| #remove duplicates
              pruneList[ind+=1]  
            end
          end
        
          if prettyCandidates.size > 1
            #index = start
            #test = false
            #while !test
            #  candidates.each_cons(2) do |a,b|
            #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
            #  end
            #  break if test
            #  searchTerm << candidates[0][index].chr
            #  index +=1
            #end
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            dialog_path = "#{ENV['TM_SUPPORT_PATH']}/bin/tm_dialog"
            pl = {'menuItems' => prettyCandidates.map { |pretty, full | { 'title' => pretty, 'cand' => full} }}
            plist = pl.to_plist
            res = OSX::PropertyList::load(%x{ #{e_sh dialog_path} -up #{e_sh plist} })
            if res.has_key? 'selectedMenuItem'
              snippet_generator( res['selectedMenuItem']['cand'], start )
            else
              ""
            end
          else
            snippet_generator( candidates[0], start )
          end
        end
        
        caret_placement =ENV['TM_LINE_INDEX'].to_i - 1
        backContext = line[1+caret_placement..-1].match /^[a-zA-Z0-9_]/
        
        if backContext
          print line[0..caret_placement]+ "$0"+ line[caret_placement+1..-1]
          TextMate.exit_discard
        end
        
        
        alpha_and_caret = /[a-zA-Z_][_a-zA-Z0-9]*\(?$/
        if k = line[0..caret_placement].match(alpha_and_caret)
          candidates = candidates_or_exit(k[0])
          res = pop_up(candidates, k[0])
        else
          res = ""
        end
        print line[0..caret_placement] + res + "$0"+ line[caret_placement+1..-1]
      :input: selection
DAD33E78-4FEF-43EB-A672-790E7140855A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: DAD33E78-4FEF-43EB-A672-790E7140855A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Similiar to entering query in the Qt Assistant's
        # "Look For:" field, and pressing enter. If 
        # there are multiple matches, there's an option
        # to select one of them.
        
        ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/search.rb"
      :input: selection
E91A719F-109D-4243-B943-A85F9FECEBE0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.qmake
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show qmake Manual
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: E91A719F-109D-4243-B943-A85F9FECEBE0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: echo "<meta http-equiv='Refresh' content='0;URL=tm-file://${TM_QT_DOC_DIR:=/usr/local/Trolltech/Qt-4.2.0/doc/html}/qmake-manual.html'>"
      :input: none
7B6716C8-A890-4803-8C61-5E31F1A4BE63: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.double.applescript, meta.data.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: "Toggle String / \xC2\xABdata utf8\xC2\xBB"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "\""
        modifiers: 
        - :control
      :uuid: 7B6716C8-A890-4803-8C61-5E31F1A4BE63
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        # AppleScript strings cannot handle Unicode text, so\n\
        # any Unicode characters entered in a string will\n\
        # simply be dropped when the script is run.  However,\n\
        # a Unicode text object obviously has no trouble\n\
        # accepting any characters.  This command toggles\n\
        # between raw unicode data and a \" delimited string,\n\
        # to simplify the creation of Unicode text objects.\n\n\
        case txt = STDIN.read\n  when /\\A\xC2\xABdata utxt([0-9A-F]+)\xC2\xBB(?: as Unicode text)?\\z/i then\n    decoded = $1.gsub(/([0-9A-F]{4})/i) { |m| [$1.hex].pack(\"U\") }\n    print '\"' + decoded + '\"'\n\n  when /\\A\xC2\xABdata utf8([0-9A-F]+)\xC2\xBB(?: as Unicode text)?\\z/i then\n    decoded = $1.gsub(/../) { |i| i.hex.chr }\n    print '\"' + decoded + '\"'\n\n  when /\\A\"(.*)\"\\z/ then\n    encoded = \"\"\n    $1.each_byte { |b| encoded << format(\"%02X\", b) }\n    print '\xC2\xABdata utf8' + encoded + '\xC2\xBB as Unicode text'\n\n  else\n    print txt\n\
        end\n"
      :input: selection
10B4E8D0-91DC-4764-9237-64009560BF3B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: "Line: $2 Error: \"$3\""
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveActiveFile
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: 10B4E8D0-91DC-4764-9237-64009560BF3B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: "^(.+):(\\d+): (.+)"
      :command: |-
        TRST=${TM_RST2HTML:=rst2html.py}
        # TRST = "/System/Library/Frameworks/Python.framework/Versions/2.3/bin/rst2html.py"
        # Send the current file through rst2html.py
        "$TRST" "$TM_FILEPATH" 1>/dev/null|pre
      :input: none
20D760B5-A127-11D9-A5A2-000D93C8BE28: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Strip HTML Tags from Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 20D760B5-A127-11D9-A5A2-000D93C8BE28
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        ## Strip HTML and PHP tags from the selected text
        php -r 'echo strip_tags( file_get_contents("/dev/stdin") );'
        
        ###  If you want to keep a particular tag, such as <p> comment the above line and uncomment the next line
        # php -r 'echo strip_tags( file_get_contents("/dev/stdin"), "<p>" );'
        ### end
      :input: selection
1EFE7452-E7BC-4662-874B-8E4C0FCCF45B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Script (Terminal)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 1EFE7452-E7BC-4662-874B-8E4C0FCCF45B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/bin/bash
        [[ -z "$TM_FILEPATH" ]] && TM_TMPFILE=$(mktemp -t pythonInTerm)
        : "${TM_FILEPATH:=$TM_TMPFILE}"; cat >"$TM_FILEPATH"
        
        TPY=${TM_PYTHON:-pythonw}
        
        esc () {
        STR="$1" ruby <<"RUBY"
           str = ENV['STR']
           str = str.gsub(/'/, "'\\\\''")
           str = str.gsub(/[\\"]/, '\\\\\\0')
           print "'#{str}'"
        RUBY
        }
        
        osascript <<- APPLESCRIPT
        	tell app "Terminal"
        	    launch
        	    activate
        	    do script "clear; cd $(esc "${TM_DIRECTORY}"); $(esc "${TPY}") $(esc "${TM_FILEPATH}"); rm -f $(esc "${TM_TMPFILE}")"
        	    set position of first window to { 100, 100 }
        	end tell
        APPLESCRIPT
        
      :input: document
DA0A5096-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.plist, text.xml.plist
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: DA0A5096-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TEMP_FILE=`mktemp /tmp/TextMate_plist.XXXXXX`
        if [[ -n $TEMP_FILE ]]; then
        	cat > "$TEMP_FILE"
        	plutil -lint "$TEMP_FILE"|perl -pe "s|\\Q$TEMP_FILE\\E:\s*||"
        	rm "$TEMP_FILE"
        else
        	echo "Error: Temporary file could not be created"
        fi
      :input: document
C316CEDC-A4E1-41DE-B102-CDF78845ACF3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Blog
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: C316CEDC-A4E1-41DE-B102-CDF78845ACF3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: blog
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging.rb"
        Blogging.new.choose_blog_endpoint
      :input: none
EE862691-A624-4797-90CF-EDD39EFB2D8E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.rails.controller, meta.rails.mailer, source.js, source.css, meta.rails.functional_test
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: EE862691-A624-4797-90CF-EDD39EFB2D8E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" view
      :input: none
3AA8A593-6E4C-11D9-91AF-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Transliterate Word / Selection to ASCII
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 3AA8A593-6E4C-11D9-91AF-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: iconv -c -f utf-8 -t ASCII//TRANSLIT
      :input: selection
65E842B0-D1A6-40E7-91C0-3215930AC0EA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Links in Line
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: l
        modifiers: 
        - :control
      :uuid: 65E842B0-D1A6-40E7-91C0-3215930AC0EA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        links = STDIN.read.scan(/<([^>]*)>/)
        links.each do |link|
          `open "#{link}"`
        end
      :input: selection
622F0B69-EB98-4EB9-8DC8-2AC56FF2501E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown markup.list
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: New Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 622F0B69-EB98-4EB9-8DC8-2AC56FF2501E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $: << ENV['TM_BUNDLE_SUPPORT']
        $: << ENV['TM_SUPPORT_PATH']
        
        require 'lib/markdown'
        require 'lib/escape'
        
        # get the list itself
        listtxt = $stdin.read()
        list = Markdown::List.parse(listtxt)
        
        # now we need to figure out where we were when we hit enter
        offsetline = ENV['TM_LINE_NUMBER'].to_i() - ENV['TM_INPUT_START_LINE'].to_i()
        index = ENV['TM_LINE_INDEX'].to_i()
        
        list.break(offsetline, index) { |l| e_sn(l) }
        print list.to_s()

      :input: selection
01F140D9-749F-11D9-8199-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Status
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 01F140D9-749F-11D9-8199-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        require_cmd "${TM_RUBY:=/usr/bin/ruby}" "We need Ruby to proceed."
        
        export TM_RUBY
        export TM_SVN
        export CommitWindow="$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        
        { if [[ -z $TM_SELECTED_FILES ]]
        	then
        	export WorkPath="${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        	export TM_SELECTED_FILES="'"${WorkPath//\'/\'\\\'\'}"'"
        	"$TM_SVN" status "$WorkPath" 2>&1| "${TM_RUBY:-ruby}" -KU -- "${TM_BUNDLE_SUPPORT}/format_status.rb" "--status"
        	else
        	eval "$TM_SVN" status "$TM_SELECTED_FILES" 2>&1 |"${TM_RUBY:-ruby}" -KU -- "${TM_BUNDLE_SUPPORT}/format_status.rb" "--status"
        fi; }

      :input: none
18D4CF4B-2363-412E-B396-6E33868B2EE4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff Selected Files With Working Copy (BASE)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 18D4CF4B-2363-412E-B396-6E33868B2EE4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if [[ -n "$TM_SELECTED_FILE" && -d "$TM_SELECTED_FILE" ]]
           then cd "$TM_SELECTED_FILE"
           else cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        fi
        
        "${TM_SVN:-svn}" diff --diff-cmd diff
      :input: none
2C5DB599-04DC-40CC-BBE8-0A73620BC42A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Check out Revision...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 2C5DB599-04DC-40CC-BBE8-0A73620BC42A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_CVS:=cvs}\" \"If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        cd \"$TM_DIRECTORY\"\n\
        revs=$(\"$TM_CVS\" log \"$TM_FILENAME\"|grep '^revision' \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Check out Revision\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=$(echo $revs|sed 's/revision //g')\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\" \"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Check out an older revision of '$(basename \"$TM_FILEPATH\")':\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \texit_discard\n\
        fi\n\n\
        export REVS=\"$revs\"\n\
        \"${TM_RUBY:-ruby}\" <<'END'\n\n\
        ENV['CVS_PATH'] = ENV['TM_CVS']\n\
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']\n\
        require 'versioned_file'\n\n\
        print CVS::VersionedFile.version(ENV['TM_FILEPATH'], ENV['REVS'])\n\
        END"
      :input: none
ED977BA9-3604-4EC9-999B-39C588CD4801: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Status
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: ED977BA9-3604-4EC9-999B-39C588CD4801
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_DIRECTORY"
        fi
        
        # show it..
        "$TM_HG" status --debug "$WorkPath" 2>&1 |"${TM_RUBY:-ruby}" -KU -- "${TM_BUNDLE_SUPPORT}/format_status.rb" "--status"
        
      :input: none
F4B2F9D2-09E8-4A8D-876B-0163A9AF3653: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create HTML Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: F4B2F9D2-09E8-4A8D-876B-0163A9AF3653
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2HTML:=rst2html.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2HTML</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        # Send the current file through rst2html.py
        $TRST "$TM_FILEPATH"
      :input: selection
F23D244D-E15F-4EC8-8DC0-FA196437C8C3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.fxscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run in FXBuilder
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: k
        modifiers: 
        - :super
      :uuid: F23D244D-E15F-4EC8-8DC0-FA196437C8C3
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # this takes the current selection in a TextMate document and runs it in FXBuilder. Anything in the existing FXBuilder window will be overwritten.
        
        # The keystroke command-K matches FXBuilder's Run keystroke in FCP, differing from TextMate's run = command-R convention
        
        
        echo "Sending current document to FXBuilder..."
        
        
        # create a temp file for getting the source into an AppleScript variable. This is such a hack...
        # Store the name for later cleanup:
        TEMPFILE=`date "+preview-temp%y%m%d-%H%M%S.fxscript"`	
        
        # send stdin (the contents of the TextMate window) to $TEMPFILE in /tmp
        cat <&0 >/tmp/$TEMPFILE 
        
        
        
        
        
        
        osascript << END
        property loopcount : 0
        
        on FCPdismissStartupWindows()
        	log "FCPdismissStartupWindows()"
        	--	set loopcount to loopcount + 1
        	-- this checks for every startup window I can find, closes one then calls itself again until it returns true
        	-- check for window "Offline Files"
        	tell application "Final Cut Pro" to activate -- bring FCP to front
        	
        	tell application "System Events"
        		tell process "Final Cut Pro"
        			
        			try
        				with timeout of 300 seconds
        					set windowList to name of every window
        					(* FCP will occasionally fail to respond to System Events during launch and restoration of exising projects. I've never had a 5 minute wait, but who knows... *)
        				end timeout
        				
        				if windowList contains "External A/V" then
        					(key code 53) -- press escape
        					my FCPdismissStartupWindows()
        				end if
        				
        				if windowList contains "Offline Files" then
        					click button "Continue" of window "Offline Files"
        					my FCPdismissStartupWindows()
        				end if
        				
        			on error the error_message number the error_number
        				-- i don't think is is ever getting called...
        				log "FAILED on: " & loopcount & ", " & error_number & " (" & error_number & ") retrying..."
        				
        				if loopcount < 100 then my FCPdismissStartupWindows() -- loopcount is a check to prevent runaway loops
        				
        			end try
        			
        		end tell
        	end tell
        	return true
        	
        end FCPdismissStartupWindows
        
        
        on FXBuilderBringToFront() -- makes sure frontmost window is FXBuilder
        	log "FXBuilderBringToFront()"
        	tell application "System Events"
        		log "*** GETTING PROCESSES ***"
        		log name of every process as list
        		log "FCP EXISTS? " & (exists process "Final Cut Pro")
        		
        		if not (exists process "Final Cut Pro") then
        			log "Restarting FCP"
        		end if
        	end tell
        	
        	FCPdismissStartupWindows()
        	
        	tell application "System Events"
        		tell process "Final Cut Pro"
        			set windowList to name of every window
        			set windowList to name of every window
        			if windowList contains "FXBuilder" then
        				set FXBcount to 0
        				repeat with theWindow from 1 to (count windowList)
        					
        					if name of window theWindow as string is "FXBuilder" then
        						if scroll bar 1 of window theWindow exists then -- this is a text entry window
        							perform action "AXRaise" of window theWindow -- bring window to front
        							return true -- end, we found a workable window
        						end if
        					end if
        					
        				end repeat
        			end if
        			
        			if value of attribute "AXEnabled" of menu item "FXBuilder" of menu "Tools" of menu bar 1 is false then
        				log "FXBuilder menu disabled. loopcount: " & loopcount
        				log "loopcount: " & loopcount
        				if loopcount < 200 then my FCPdismissStartupWindows()
        			end if
        			click menu item "FXBuilder" of menu "Tools" of menu bar 1
        		end tell
        	end tell
        	
        end FXBuilderBringToFront
        
        
        on FXBuilderPasteText(sourceText) -- places sourceText into an FXBuilder window
        	
        	FXBuilderBringToFront()
        	set the clipboard to sourceText as text
        	
        	tell application "System Events"
        		tell process "Final Cut Pro"
        			tell application "Final Cut Pro" to activate
        			keystroke "a" using command down -- select all
        			key code 51 -- (delete key) delete current selected text
        			keystroke "v" using command down -- paste and select all			
        		end tell
        	end tell
        end FXBuilderPasteText
        
        
        on FXBuilderRunScript(sourceText)
        	FXBuilderPasteText(sourceText)
        	tell application "System Events"
        		tell process "Final Cut Pro"
        			click menu item "Stop" of menu "FXBuilder" of menu bar 1
        			click menu item "Run" of menu "FXBuilder" of menu bar 1
        		end tell
        	end tell
        end FXBuilderRunScript
        
        tell application "System Events" to set UI elements enabled to true -- just do this gracelessly rather than gunking up the script with dialogs etc
        
        set theSource to do shell script "cat /tmp/$TEMPFILE"
        FXBuilderRunScript(theSource)
        
        END
        
        
        
        rm /tmp/$TEMPFILE  #cleanup the temp file

      :input: document
78F26F76-76B4-400E-84F0-E22DB05063CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.groovy
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Groovy JDK
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :alt
        - :control
      :uuid: 78F26F76-76B4-400E-84F0-E22DB05063CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        echo "<meta http-equiv='Refresh'
                content='0;URL=http://groovy.codehaus.org/groovy-jdk.html'>"

      :input: selection
A8C76535-C283-4C2C-8367-66368A3DBCFB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.active4d
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Include File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: A8C76535-C283-4C2C-8367-66368A3DBCFB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #
        # This command searches around the caret/selection for the nearest quotes and expands
        # the name to the full quoted text, then tries to open the file at the path described
        # by that text.
        #
        
        "$TM_BUNDLE_SUPPORT/bin/open_include.rb"
      :input: none
275BF397-2458-4F2F-B0CE-5CDF68256B69: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.xml.plist
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Changes (for XML Property List)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 275BF397-2458-4F2F-B0CE-5CDF68256B69
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # this will compare the current document against the last
        # version checked out from subversion, but will do it in
        # the pretty-printed format (via pl)
        
        pl|diff -u <("${TM_SVN:-svn}" cat "$TM_FILENAME"|pl) -

      :input: document
1CEC5F39-6479-4C96-BD24-EF49F0A19F9B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Tab Command
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 1CEC5F39-6479-4C96-BD24-EF49F0A19F9B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        # To use this function, type the desired key followed by "Enter"
        #
        # Note - the search for the tab command will stop at the first match,
        # so put longer commands before shorter, e.g., tw before t.
        
        # This is where the GTD files are kept
        $myPath = ENV['TM_DIRECTORY'] 
        tabCommand = ENV['TM_CURRENT_LINE']
        
        $contexts = [] #user defined contexts
        def readContexts(a)
          # processes contexts.gtd into script  
          context, tabCommand, tabString, regex, color = a.split(/\|/)
          $contexts.push({:context => tabCommand, :tabString => tabString})   
        end
        
        
        def reportContexts
          # a simple test
          $contexts.each do |tag|
            puts("Context: " + tag[:context])
            puts("tabCommand: " + tag[:tabCommand])
            puts("tabString: " + tag[:tabString])
            puts("Search String: " + tag[:regex])
            puts("Color: " + tag[:color])
            i = 0
            while i < tag[:tasks].length
              puts "Task: " + tag[:tasks][i]
              i = i + 1
            end
          end
        end
        
        def myParse tabCommand
          found = 0
          $contexts.each do |tag|
            re = tag[:context]
            if (tabCommand == re) and (found == 0) 
              print tag[:tabString]
              found = 1
            end
          end
          if found == 0 
            puts "failed"
          end
        end
        
        
        # the contexts.gtd file is read, and converted into $contexts
        file = File.open($myPath+"/contexts.gtd", "r")
        file.each do |line|
          readContexts(line)
        end    
        
        myParse tabCommand
      :input: selection
09834657-AF82-4CB6-8239-3894E9B7926E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.sweave text.tex.latex, source.r
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: SWeave in R
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 09834657-AF82-4CB6-8239-3894E9B7926E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        M=${TM_SWEAVE_WD:=${TM_DIRECTORY}}
        osascript -e 'tell application "R" to activate' -e "tell application \"R\" to cmd \"setwd('$M')\nSweave('$TM_FILEPATH')\ndate()\""
      :input: selection
F80F9C22-ABB8-11D9-957A-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.citation.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: BibDesk Completion
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: F80F9C22-ABB8-11D9-957A-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if [[ -z $TM_SELECTED_TEXT ]]
           then 
        # If the cursor is inside empty braces {}, then offer
        # a list of all bibliography items. In that case, 
        # the variable $phrase is not being set.
        	prev_ch=${TM_CURRENT_LINE:$TM_LINE_INDEX-1:1}
        	if [[ $prev_ch != '{' ]]
        		then phrase=$TM_CURRENT_WORD
        	fi
           else phrase=$TM_SELECTED_TEXT
        fi
        if [[ -z $phrase ]]
        	then 
        # Case where $phrase is not defined
        
        res=`osascript <<EOF
        tell application "Bibdesk"
        	set publist to get displayed publications of the first item of documents
        	set candidates to {}
        		repeat with anItem in publist
        		set candidates to candidates & ((cite key of anItem) & " % " & (last name of author of anItem) & ", " & (title of anItem))
        		end repeat
        	end tell
        	tell application "System Events"
        		activate
        		choose from list candidates
        	end tell
        EOF`
        	else 
        # Case where $phrase is defined
        
        res=`osascript <<EOF
        	tell application "Bibdesk" to set candidates to search for "$phrase" with for completion
        	tell application "System Events"
        		activate
        		choose from list candidates
        	end tell
        EOF`
        fi
        # If an error occurs, $? stores the return code.
        errorcode=$?
        # return control to TextMate
        osascript -e 'tell app "TextMate" to activate' &>/dev/null &
        # If user presses Cancel, then applescript returns false. 
        if [[ (${res:0:5} == false) || ($errorcode != 0) ]]
        	then exit_discard
        fi
        
        res=`perl -pe <<<$res 's/^(.*?)(\s*)%.*/$1/'` # strip comment
        res="${res//\\\\/\\\\}"                       # \ -> \\
        res="${res//$/\\$}"                           # $ -> \$
        
        echo -n $res
        #if [[ -z $TM_SELECTED_TEXT ]] && [[ -n $phrase ]]
        #   then echo -n ${res:${#TM_CURRENT_WORD}}
        #   else echo -n ${res}
        #fi
        #
      :input: selection
F86D90AC-AF81-48A7-9E04-BA4AA95668B1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: stop
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: F86D90AC-AF81-48A7-9E04-BA4AA95668B1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Use this for a simple solution..
        RESPONSE=`exec osascript <<EOF | tr "\r" "\n"
         	
         	--To be asked for your password each time then use:
         	do shell script "apachectl stop" with administrator privileges
         	
         	--To skip password vaildation then change this... not for the security conscious.
         	--do shell script "apachectl stop" password "the_password" with administrator privileges
         	
        EOF`
         
        echo $RESPONSE
        
        # Otherwise, to store your password in the Keychain check this script in the Bundle Support folder.
        #
        # To use the Keychain to store the admin password then open /Applications/Utilities/Keychain Access.app
        # Add a new keychain called "TextMate" 
        # Add a Key with the name "ApacheBundle" to the new Keychaing then store your admin password in it.
        
        #"${TM_BUNDLE_SUPPORT}/apachectlUsingKeychain.sh" stop
      :input: none
18819157-C273-4649-9013-3A2705993795: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run in SML
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 18819157-C273-4649-9013-3A2705993795
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SML:=sml}"
        "$TM_SML"|pre
      :input: selection
8EC9DC0F-5F86-4258-AC0B-304D90E1E126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Convert to HTML and Preview in Browser
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :control
        - :super
      :uuid: 8EC9DC0F-5F86-4258-AC0B-304D90E1E126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        HTML_FILE_PATH=$(txt2tags -t html "$TM_FILEPATH" | sed -n 's/^txt2tags wrote //p')
        test -z "$HTML_FILE_PATH" || open "$HTML_FILE_PATH"
      :input: none
ADEF8E57-BF21-487A-9115-E1D1146142CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown markup.list
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Select Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: 
        - :super
      :uuid: ADEF8E57-BF21-487A-9115-E1D1146142CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $: << ENV['TM_BUNDLE_SUPPORT']
        $: << ENV['TM_SUPPORT_PATH']
        
        require 'lib/markdown'
        require 'lib/escape'
        
        # get the list itself
        listtxt = $stdin.read()
        list = Markdown::List.parse(listtxt)
        
        # now we need to figure out where we were when we hit enter
        offsetline = ENV['TM_LINE_NUMBER'].to_i() - ENV['TM_INPUT_START_LINE'].to_i()
        index = ENV['TM_LINE_INDEX'].to_i()
        
        list.select(offsetline) { |l| e_sn(l) }
        print list.to_s()

      :input: selection
693C1CFB-85A8-4807-B7F6-41380BAE8B8C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.active4d
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Build Query
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "*"
        modifiers: 
        - :super
      :uuid: 693C1CFB-85A8-4807-B7F6-41380BAE8B8C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: qq
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        s = ENV['TM_CURRENT_LINE']
        
        # See if the current line is a query. If it is, process it.
        
        if s =~ /^(\s*)(query(?: selection)?\s*)\(\[([^\]]+)\]/i then
        	ws = $1
        	command = $2
        	table = $3
        
        	# See if ;* has been added to the end of the query. If not, add it.
        	if not s =~ %r{(^.*);\s*\*\s*\)\s*(`.*|//.*|.*)$}i then
        		s = s.gsub(%r{(^.*)(\s*\))(\s*(`.*|//.*|.*)$)}, '\1; *\2')
        	end
        
        	print s.gsub(/[\$`]/) { |s| "\\#{s}" }
        	print "\n#{ws}#{command}([${1:#{table}}]; ${2:conjunction}; [$1]${3:field})"
        else
        	# Current line is not a query, discard the output, which does nothing
        	exit(200)
        end

      :input: selection
037242FC-9D77-46A6-94B8-865052595B5A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.yaml
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Add list item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 037242FC-9D77-46A6-94B8-865052595B5A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        line = STDIN.read
        TAB = line.match(/^(\s+)/).to_s
        
        # first check to see if we have a
        # key on the current line, if so indent
        if ENV['TM_CURRENT_LINE'].match /^\s*.+:/
          $stdout.write "#{line}\n#{TAB}\t- " 
        
        # then to see if it's a one-liner list item,
        # in which case we don't indent
        elsif ENV['TM_CURRENT_LINE'].match /^\s*- /
          $stdout.write "#{line}\n#{TAB}- "
        
        # otherwise back up indent
        else 
          $stdout.write "#{line}\n#{TAB[(0..-3)]}- "
        end

      :input: selection
69189D22-7020-4A1D-AF4C-1A3A068D0ADA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Active Configuration
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 69189D22-7020-4A1D-AF4C-1A3A068D0ADA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        test -z $TM_FILENAME && title="Txt2tags" || title="${TM_FILENAME%.*}"
        
        html_header "$title - Active Configuration"
        
        cd "$TM_DIRECTORY" # needed to expand possible includes
        txt2tags -t txt --dump-config -i- -o- | pre
        
        html_footer
      :input: document
8B63721C-EDE4-42D4-8589-B6EA1D4F2D5B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.s5
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Theme to Document Location
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8B63721C-EDE4-42D4-8589-B6EA1D4F2D5B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\
        require 'fileutils'\n\n\
        src = ENV['TM_BUNDLE_SUPPORT'] + \"/ui\"\n\
        dst = ENV['TM_DIRECTORY']\n\n\
        abort \"This action only works for saved documents.\" if dst.nil?\n\
        abort \"The S5 \xE2\x80\x98ui\xE2\x80\x99 directory already exists.\"       if File.directory?(dst + \"/ui\")\n\n\
        begin\n  FileUtils.cp_r(src, dst)\n  puts \"Theme files copied successfully.\"\n\
        rescue Exception => e\n  puts \"Error copying files to \xE2\x80\x9C#{dst}\xE2\x80\x9D.\", e\n\
        end\n"
      :input: none
B3E79B47-40E9-4EF9-BAD9-11FEEE0D238F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Jump to Included File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :super
      :uuid: B3E79B47-40E9-4EF9-BAD9-11FEEE0D238F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # This command passes the script to Ruby via a heredoc, rather than using a shebang.
        # The reason for this is so that .textmate_init is sourced, which IMO is the nicest place to set PHP_INCLUDE_PAT
        # However passing the heredoc axes the document STDIN from TextMate, so here we redirect the original STDIN to
        # file descriptor 3, to be later read from the Ruby script
        ruby 3>&0 <<-'RUBY'
          require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
          require ENV["TM_SUPPORT_PATH"] + "/lib/textmate.rb"
        
          options = []
        
          if ENV['TM_CURRENT_LINE'] =~ /(?:include|require)(?:_once)?\s*\(?\s*?['"](.+)['"]\s*\)?/
            options << $1
          else
            IO.open(3, 'r') do |document| # This reads the TextMate document from file descriptor 3, as describe above
              document.read.scan(/(?:include|require)(?:_once)?\s*\(?\s*?['"](.+)['"]\s*\)?/).each do |path|
                options << path[0] unless path[0].include?('$') # Skip dynamic includes
              end
            end
          end
        
          abort "No includes found" if options.empty?
        
          file = ''
          if options.size > 1
            abort unless choice = TextMate::UI.menu(options)
            file = options[choice]
          else
            file = options.pop
          end
        
          paths = []
          if ENV['PHP_INCLUDE_PATH']
            paths = ENV['PHP_INCLUDE_PATH'].split(':')
          else
            paths = ['.']
          end
        
          paths.each do |path|
            expanded_path = File.expand_path(file, path)
            if File.exists?(expanded_path)
              TextMate.go_to :file => expanded_path
              exit
            end
          end
          puts "File not found: #{file}"
          puts "Set PHP_INCLUDE_PATH for best results" unless ENV['PHP_INCLUDE_PATH']
        RUBY

      :input: document
72DCB8FA-2DAF-46D2-A77C-3459EE982EF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.mail
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Unwrap Paragraphs
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Q
        modifiers: 
        - :control
      :uuid: 72DCB8FA-2DAF-46D2-A77C-3459EE982EF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        def quote_level (line)
          /^[> ]*/.match(line.to_s)[0].count ">"
        end
        
        def blank_line? (line)
          line.nil? || line.sub(/^[> ]*/, '').strip.empty?
        end
        
        def reformat_lines (lines)
          non_quoted = lines.collect { |line| line.sub(/^[> ]*/, '').strip }
          indent = /^[> ]*/.match(lines.first.to_s)[0]
          indent + non_quoted.join(" ")
        end
        
        lines = STDIN.read.to_a
        
        cur_qlevel = 0
        par_bounds = [ 0 ]
        
        lines.each_with_index do |line, i|
          if blank_line?(line) then
            par_bounds << i
            par_bounds << i+1
          elsif cur_qlevel != quote_level(line) then
            par_bounds << i
          end
          cur_qlevel = quote_level(line)
        end
        
        par_bounds.uniq!
        par_bounds.each_with_index do |i, idx|
          j = idx+1 < par_bounds.size ? par_bounds[idx+1] : lines.size
          puts reformat_lines(lines[i...j])
        end

      :input: selection
8DCA2782-E6DE-4E86-A7F0-C4DA2B93A655: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.prototype
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Prototype Documentation
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 8DCA2782-E6DE-4E86-A7F0-C4DA2B93A655
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/html.sh"
        
        redirect "http://prototypejs.org/api/"

      :input: none
71C47F5F-41FA-40E8-A13A-238BC30984D1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html, text.html.markdown, text.html.textile, text.bbcode, text.moinmoin, text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Basic Wikipedia
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 71C47F5F-41FA-40E8-A13A-238BC30984D1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/progress.rb"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/exit_codes.rb"
        require 'open-uri'
        require 'erb'
        
        
        def getWikiDef(input)
          TextMate.call_with_progress(:title => "Contacting Wikipedia", :message => "Looking for definition of #{input}") do
          	response = open("http://en.wikipedia.org/wiki/Special:Search?search=#{input}",
          	    "User-Agent" => "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.0.1) Gecko/20060111 Firefox/1.5.0.1",
          	    "Referer" => "http://www.ruby-lang.org/") {|f| $response = f }
          	url = response.base_uri
          	# borrowed from iamrice.org
          	fp = open(url)
          	title = "Wikipedia Entry: " + fp.read.match(/<title>([^<>]*)<\/title>/i).to_a[1]
          	if title.include? "Search"
          	   TextMate.exit_show_tool_tip "No definition found"
          	else
          	   return title.sub(/ - Wikipedia, the free encyclopedia/, ''), url
          	end
          end
        end
        input = STDIN.read
        title, url = getWikiDef(input)
        print ERB.new(ENV['TM_LINK_FORMAT']).result
      :input: selection
EA820F17-FD1D-4E7A-9961-E75F7D360968: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc, source.objc++
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: "Insert [[[\xE2\x80\xA6 alloc] init] autorelease]"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: EA820F17-FD1D-4E7A-9961-E75F7D360968
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: alloc
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        def e (str); str.gsub(/[$`\\]/, '\\\\\0'); end
        
        line = STDIN.read
        col = ENV['TM_LINE_INDEX'].to_i
        
        left, right = line[0...col], line[col..-1]
        
        if left =~ /(.*?)(\[)?(\w+)\s+$/ then
          lead, bracket, cl = $1, $2, $3
          right = line[col+1..-1] unless bracket.nil?
          print "#{e lead}${1/.+/[/}[[#{e cl} alloc] init$0]${1: autorelease]}"
          print right.empty? ? ";" : "#{e right}"
        else
          # this is only if we were not able to interpret the line
          print "#{e left}$0#{e right}"
        end

      :input: selection
D04AFBD3-8110-11D9-8E5B-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Selected Files in Project Drawer
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: D04AFBD3-8110-11D9-8E5B-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        eval arr=("$TM_SELECTED_FILES")
        if [[ ${#arr[@]} != 2 ]]; then
           echo -e "You need to select exactly two\nfiles in the project drawer."
           exit_show_tool_tip
        fi
        
        eval diff -u "$TM_SELECTED_FILES"
      :input: none
F1FD7DF4-975A-4832-8A52-873AA0D32C44: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: List Files in Active Target
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: X
        modifiers: 
        - :control
      :uuid: F1FD7DF4-975A-4832-8A52-873AA0D32C44
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        PROJECT_FILE=$(ruby -- "${TM_BUNDLE_SUPPORT}/bin/find_xcode_project.rb")
        #PROJECT_FILE=${PROJECT_FILE##*/}
        
        "${TM_BUNDLE_SUPPORT}/bin/xcode_project.rb" project=${PROJECT_FILE} list
      :input: none
3DD8406C-A116-11D9-A5A2-000D93C8BE28: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: character
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Character / Selection to Entities
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 3DD8406C-A116-11D9-A5A2-000D93C8BE28
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $KCODE = 'U'
        
        $char_to_entity = { }
        File.open("#{ENV['TM_BUNDLE_SUPPORT']}/entities.txt").read.scan(/^(\d+)\t(.+)$/) do |key, value|
          $char_to_entity[[key.to_i].pack('U')] = value
        end
        
        def encode (text)
          text.gsub(/[^\x00-\x7F]|["'<>&]/) do |ch|
            ent = $char_to_entity[ch]
            ent ? "&#{ent};" : sprintf("&#x%02X;", ch.unpack("U")[0])
          end
        end
        
        print encode(STDIN.read)

      :input: selection
ED204720-38FC-427C-B91E-D6AE866DAE3A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create CSS From Current Theme
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: ED204720-38FC-427C-B91E-D6AE866DAE3A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/doctohtml.rb"
        print generate_stylesheet_from_theme()
      :input: none
54D1CEF2-10AB-407B-AAB2-6AEA06B297B1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Apply Patch to Files\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 54D1CEF2-10AB-407B-AAB2-6AEA06B297B1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # patch may be the most brainfucked standard Unix tool ever. Make sure it doesn't try to access the network (it tends to ignore the -g option, I find) -- if you have Perforce installed, this can be a huge performance hit -- and it touches the network even for files that aren't controlled by Perforce. All files on the system get the lovely 'is this file locked'? treatment. Software tools, huh?
        
        export PATCH_GET=0
        
        path=$(osascript<<END
        tell application "TextMate"
        	set theFile to choose folder with prompt "Where should I look for files to be patched?"
        	set the result to POSIX path of theFile
        end tell
        END)
        
        if [[ -z $path ]]; then
        	exit_discard
        else
        	patch -d "$path" -p0
        fi

      :input: document
1F22884A-6702-4FB6-B4E7-D49B2431BD4E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Update with tag...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 1F22884A-6702-4FB6-B4E7-D49B2431BD4E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'versioned_file'
        
        tag=`CocoaDialog inputbox --title Tag --informative-text 'Which tag?' --button1 Update --button2 'Cancel'`
        
        accept, tag = *tag.to_a.map {|l| l.chomp}
        
        exit unless accept =~ /1/
        
        file = CVS::VersionedFile.new(ENV['TM_FILEPATH'])
        file.update(:tag => tag)
        
        puts "Tagged #{file.basename} with tag #{tag}."
        
        END

      :input: none
1194ED50-336C-45F8-9E73-C777FB3FAF88: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Offline Add to Depot
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 1194ED50-336C-45F8-9E73-C777FB3FAF88
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # record a file that we're editing offline for later
        # (presumably when access to Perforce is restored)
        
        # now record the file
        mkdir -p "$HOME/P4Cache"
        echo "$TM_FILEPATH" >> "$HOME/P4Cache/OfflineAdds.txt";

      :input: none
D663259E-0526-11DB-A7A9-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Doc Lookup
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: D663259E-0526-11DB-A7A9-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_SUPPORT_PATH']+'/lib/exit_codes'
        
        word = (ENV['TM_SELECTED_TEXT'] or ENV['TM_CURRENT_WORD'] or '')
        dir  = (ENV['TM_QT_DOC_DIR'] or '/usr/local/Trolltech/Qt-4.2.0/doc/html')
        
        word.strip! unless word.frozen?
        
        if word.nil?
          puts "Nothing given to search for."
          
        else
          doc_file = "#{dir}/#{word.downcase}.html"
          
          if File.exists? doc_file
            TextMate::exit_show_html "<meta http-equiv='Refresh' content='0;URL=tm-file://#{doc_file}'>"
          else
            spotted = `mdfind #{word}`
            files   = spotted.grep %r{^#{Regexp::escape dir}/.+\.html$}
            
            unless files.any?
              puts "No Documentation found for '#{word}'."
            else
              puts %{
              <html>
              <head><title>Spotlight results for '#{word}'</title>
              <style>
                a:link { color: #004faf; text-decoration: none }
                a:visited { color: #672967; text-decoration: none }
                h1 { text-align: center }
                span.intro { color: #999 }
                div.navi img {
                  vertical-align: -35%;
                  margin-right: 4px;
                }
              </style>
              <body>
              
              <div class="navi">
                <img src="tm-file://#{dir}/images/qt-logo.png">
                <a href="tm-file://#{dir}/index.html">Home</a> &middot;
                <a href="tm-file://#{dir}/classes.html">All Classes</a> &middot;
                <a href="tm-file://#{dir}/mainclasses.html">Main Classes</a> &middot;
                <a href="tm-file://#{dir}/groups.html">Grouped Classes</a> &middot;
                <a href="tm-file://#{dir}/modules.html">Modules</a> &middot;
                <a href="tm-file://#{dir}/functions.html">Functions</a>
              </div>
              
              <h1>Spotlight results for '#{word}'</h1><ul>}
              
              files.each do |file|
                head  = File.open(file.chop).read(4000)
                title = head.scan(/<title>Qt \d\.\d: (.+)<\/title>/).first.first
                intro = head.scan(/<p>(.{16,})<\/p>/).first
                
                unless intro.nil?
                  intro = intro.first.gsub(/<.+?>/, '')[0..(107-title.size)]+'&hellip;'
                end
                
                puts %{<li><a href="tm-file://#{file.chop}">#{title}</a>
                       <span class="intro">#{intro}</span></li>}
              end
              puts "</ul></body></html>"
              
              TextMate::exit_show_html
            end
          end
          
        end
      :input: none
E5F0DC32-D1AB-4CF0-8028-CC1972BEAECA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Gecko DOM Element
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: E5F0DC32-D1AB-4CF0-8028-CC1972BEAECA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://developer.mozilla.org/en/docs/DOM:element#Properties'>"
      :input: none
ADCD4FCD-D39D-41B3-88D0-84C5BE115535: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add to Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: ADCD4FCD-D39D-41B3-88D0-84C5BE115535
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
          cvs = ENV['TM_CVS'] || "cvs"
          TextMate.selected_paths_array.each do |path|
            puts %x{cd "#{File.dirname path}" && #{cvs} add "#{File.basename path}"}
          end
        END
      :input: none
338A3670-DA8E-4036-87E0-DF2E212254C8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Annotate
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 338A3670-DA8E-4036-87E0-DF2E212254C8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        cd "$TM_DIRECTORY" &&
        "$TM_CVS" annotate "$TM_FILENAME"
      :input: none
05283F87-438D-45C1-ADFD-B8BF1CD17429: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.java
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Compile & Run Single File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 05283F87-438D-45C1-ADFD-B8BF1CD17429
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Compiling \xE2\x80\x9C${TM_FILENAME}\xE2\x80\x9D\xE2\x80\xA6\"\n\n\
        cd \"$TM_DIRECTORY\"\n\
        javac -encoding UTF8 \"$TM_FILENAME\" &> >(\"${TM_RUBY:-ruby}\" -rtm_parser -eTextMate.parse_errors)\n\
        if (($? >= 1)); then exit; fi\n\n\
        { java -Dfile.encoding=utf-8 \"${TM_FILENAME%.java}\"\n  echo -e \"\\nProgram exited with status $?.\"; }|pre\n\n\
        # # if you want to run the program in Terminal.app\n\
        # osascript <<EOF\n\
        #    tell application \"Terminal\"\n\
        #       activate\n\
        #       do script \"cd '$TM_DIRECTORY'; java '${TM_FILENAME%.java}'\"\n\
        #    end tell\n\
        # EOF\n\n\
        html_footer\n"
      :input: none
21AF6BCC-5AD2-4B47-8A6B-0EB7F27BD97C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.fortran
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Compile Single File
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 21AF6BCC-5AD2-4B47-8A6B-0EB7F27BD97C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # Source some support functions we need.
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        
        cd ${TM_DIRECTORY}
        
        htmlHeader "Compiling Fortran"
        echo "<h1>Starting Fortran Compile</h1>"
        echo
        
        # Check if we actually have a fortran compiler
        : ${TM_FORTRAN:=gfortran}
        require_cmd "$TM_FORTRAN" "You must set the <tt>TM_FORTRAN</tt> variable to the full path of your Fortran compiler (e.g. <tt>/usr/local/bin/gfortran</tt>). You may also set <tt>TM_FFLAGS</tt> for any Fortran compiler options."
        
        "$TM_FORTRAN" $TM_FFLAGS "$TM_FILEPATH"
        status=$?
        if [[ "${status}" -ne "0" ]]; then
        	echo "<h1>Compilation Failed</h1>"
        else
        	echo "<h1>Successfully compiled a.out</h1>"
        	closeWindow
        fi
        htmlFooter

      :input: none
D15DAF9D-80EF-4636-885A-74F64808060A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Invert HEX Colors
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: D15DAF9D-80EF-4636-885A-74F64808060A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/invert_colors.rb"

      :input: selection
F0B1A94F-3FC5-47B8-8771-FFF4EF230156: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Revision...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
        - :super
      :uuid: F0B1A94F-3FC5-47B8-8771-FFF4EF230156
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#\n\
        # $Id: Revision....plist 3075 2006-04-22 20:20:01Z aparajita $\n\
        #\n\n\
        require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        require_cmd opendiff \"You must install the Apple developer tools to run FileMerge.\"\n\n\
        # See if the current file is under svn control\n\
        FILE=`basename \"$TM_FILEPATH\"`\n\
        INFO_LINES=`svn info \"$FILE\" 2>&1 | grep \"^Path\\: .*\\$\" | wc -l`\n\n\
        if [ $INFO_LINES -eq 0 ]; then\n\
        \techo \"The current file is not under subversion control\"\n\
        \texit_show_tool_tip\n\
        fi\n\n\
        revs=$(\"$TM_SVN\" log -q \"$TM_FILEPATH\"|grep -v '^-*$' \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Diff Revision\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Diff '$(basename \"$TM_FILEPATH\")' with older revision:\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\
        REV=`echo \"$revs\" | tr '\\r' '\\n' | awk -F '|' '{ print substr($1, 2) }'`\n\
        \"$TM_BUNDLE_SUPPORT/bin/filemerge.sh\" $REV -"
      :input: none
D1E96B26-25A1-4525-873C-417598FB8814: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Remove Completed Tasks
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :alt
        - :control
      :uuid: D1E96B26-25A1-4525-873C-417598FB8814
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        myFile = ENV['TM_SELECTED_FILE']
        
        myText = File.open(myFile)
        re = /\s/
        myText.each do |line|
          myTest = re.match(line)
          if (myTest.pre_match != "+" and myTest.pre_match.length > 0)
            puts line
          end
        end  

      :input: document
86A99A45-C6B6-4F46-BBB5-04351FD5E3B1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 86A99A45-C6B6-4F46-BBB5-04351FD5E3B1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        TO_OCAML=${TM_OCAML:=ocamlc}
        TMPDIR=${TMPDIR:=/tmp}
        
        require_cmd "$TO_OCAML"
        
        # get a tempfile and fill it with the contents of our file
        SRCFILE=`/usr/bin/mktemp $TMPDIR/ocamlXXXXXX` || exit 1
        mv "$SRCFILE" "$SRCFILE".ml
        
        DSTFILE=`/usr/bin/mktemp $TMPDIR/ocamlXXXXXX` || exit 1
        
        cat > "$SRCFILE".ml
        
        # compile it to a new tempfile
        cd "$TMPDIR"
        
        # run it and clean up after ourselves
        "$TM_BUNDLE_SUPPORT/OCamlMate/run_script.rb" "$TO_OCAML" "$SRCFILE".ml "$DSTFILE"
        
        rm -f "$SRCFILE".*
        rm -f "$DSTFILE"
        
      :input: selection
90B93795-AC8C-41C1-8C41-786C1A113D43: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Man Page
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 90B93795-AC8C-41C1-8C41-786C1A113D43
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t man "$TM_FILEPATH"
      :input: none
392068ED-4C79-42D8-9DE8-53867928B3B0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Clean
      :auto_scroll_output: false
      :activated_by_value: 
      :uuid: 392068ED-4C79-42D8-9DE8-53867928B3B0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        XCODE_BUILD_VERB="clean"
        export XCODE_BUILD_VERB
        "${TM_BUNDLE_SUPPORT}/bin/run_xcodebuild.sh"

      :input: none
0D4F5C42-210C-4C03-8378-D92FB5D323AF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Selection to Table
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
        - :super
      :uuid: 0D4F5C42-210C-4C03-8378-D92FB5D323AF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        def escape(str)
          esc_str = str.gsub(/\t/," & ") + "\\\\"
          esc_str.gsub(/(\d)E([+-]?)(\d{1,2})/) do |m|
            "#{$1} $\\times 10^{#{$2 =="-" ? "-" : ""}#{$3.to_i}}$"
          end
        end
        # First we change all space sequences of length $TM_TAB_SIZE to tabs.
        data=STDIN.read.strip.gsub(/ {#{ENV['TM_TAB_SIZE'].to_i}}/,"\t").split("\n")
        first_line = data.shift
        count=first_line.scan(/\t/).length+1;
        result=["\\begin{tabular}{#{"c" * count}}"];
        hl = "\\hline"
        result << hl << escape(first_line) << hl 
        result += data.map{|line| escape(line.strip)}
        result << hl << "\\end{tabular}"
        puts result.join("\n")
      :input: selection
BBA04431-8960-4017-A684-7FBACB0F7FFF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt - meta.action - meta.line.project - meta.note
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: New
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "@"
        modifiers: 
        - :super
      :uuid: BBA04431-8960-4017-A684-7FBACB0F7FFF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTDUtils.rb'
        require ENV['TM_SUPPORT_PATH'] + '/lib/ui.rb'
        contextList = GTDContexts.contexts
        choice = TextMate::UI.menu(contextList)
        if choice then
          print "@#{contextList[choice]} "
        else
        require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes.rb'
          TextMate.exit_discard
        end

      :input: none
59700A78-7CB7-11D9-875B-000A95E13C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.tcl
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 59700A78-7CB7-11D9-875B-000A95E13C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_TCLSH:=tclsh} "$TM_FILEPATH"|pre
      :input: none
A6254651-3866-4F78-8774-10FA1C1D7A6B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Commit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: A6254651-3866-4F78-8774-10FA1C1D7A6B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        export TM_HG
        export CommitWindow="$TM_SUPPORT_PATH/bin/CommitWindow.app/Contents/MacOS/CommitWindow"
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/hg_commit.rb"
      :input: none
1FE7E10E-70B4-44D7-924D-879C54F19289: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Reset sticky tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 1FE7E10E-70B4-44D7-924D-879C54F19289
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_CVS:=cvs}" "If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        
        ENV['CVS_PATH'] = ENV['TM_CVS']
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']
        require 'versioned_file'
        
        file = CVS::VersionedFile.new(ENV['TM_FILEPATH'])
        file.update(:reset_tags => true)
        
        puts "All sticky tags reset"
        
        END

      :input: none
D03092A5-DED1-4527-9FF0-00E7EC10A0E0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.logo
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: D03092A5-DED1-4527-9FF0-00E7EC10A0E0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        /usr/bin/env logo "$TM_FILEPATH"

      :input: none
DC188528-1C29-47BA-9DBB-29A0C97C5655: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create Project List
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: P
        modifiers: 
        - :control
      :uuid: DC188528-1C29-47BA-9DBB-29A0C97C5655
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby  
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
        
        $myPath = ENV['TM_DIRECTORY']
        
        myFiles = Dir.entries($myPath)
        myProjects = []
        myFiles.each do |fileName|
          if fileName[-3,3]  == "gtd"
            myProjects.push fileName
          end
        end
        
        puts myProjects
      :input: none
6416A49F-8B3E-47EE-81B4-F2F7F19C6B41: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Revision...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 6416A49F-8B3E-47EE-81B4-F2F7F19C6B41
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_CVS:=cvs}\" \"If you have installed cvs, then you need to either update your <tt>PATH</tt> or set the <tt>TM_CVS</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        cd \"$TM_DIRECTORY\"\n\
        revs=$(\"$TM_CVS\" log \"$TM_FILENAME\"|grep '^revision' \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"Diff Revision\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=$(echo $revs|sed 's/revision //g')\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\" \"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"Diff '$(basename \"$TM_FILEPATH\")' with older revision:\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\
        export REVS=\"$revs\"\n\
        \"${TM_RUBY:-ruby}\" <<'END'\n\n\
        ENV['CVS_PATH'] = ENV['TM_CVS']\n\
        $LOAD_PATH << ENV['TM_BUNDLE_SUPPORT']\n\
        require 'cvs_diff'\n\n\
        CVS::diff_active_file(ENV['REVS'], \"Diff With Revision...\")\n\
        END"
      :input: none
E3DD341F-94E6-460C-8EDA-D1184B67866F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Compile in Script Editor
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: E3DD341F-94E6-460C-8EDA-D1184B67866F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        content () {
        	iconv -cs -f utf-8 -t macroman//TRANSLIT | perl -pe 's/["\\]/\\$&/g'
        }
        
        osascript <<-APPLESCRIPT
        	tell application "Script Editor"
        	    activate
        	    set theDocument to make new document
        	    tell theDocument
        	        set contents of selection to "$(content)"
        	        try
        	            check syntax
        	            compile
        	        on error error_message number the error_number
        	            display dialog "Error: " & the error_number & ". " & the error_message buttons {"OK"} default button 1
        	        end try
        	    end tell
        	end tell
        APPLESCRIPT
      :input: selection
0BB34044-0A2C-4D11-A2DE-30107D622ECF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Open Config for User\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 0BB34044-0A2C-4D11-A2DE-30107D622ECF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #To select a specific user from all available.
        "${TM_BUNDLE_SUPPORT}/EditUserConf.sh"
        
        #To open all users as a tmproj.
        #open -a TextMate "/private/etc/httpd/users"
        
        
      :input: none
B2B2A814-DE60-11D9-823F-000A95A51A76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Push to Default Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: B2B2A814-DE60-11D9-823F-000A95A51A76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "cd \"${TM_PROJECT_DIRECTORY:=$TM_DIRECTORY}\"\n\n\
        darcs push -a "
      :input: none
41481AFE-8B7C-4B7F-AECA-6725DADC0B27: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Line
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 41481AFE-8B7C-4B7F-AECA-6725DADC0B27
      :disable_output_auto_indent: false
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_BUNDLE_SUPPORT}/wrap\""
      :input: selection
80BD96D6-C41C-45F3-8CAE-E6D88B9D7339: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 80BD96D6-C41C-45F3-8CAE-E6D88B9D7339
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        html_header "Perforce Bundle Help" "Perforce"
        
        Markdown.pl <<"EOF"|SmartyPants.pl
        
        ## Perforce Bundle Help
        
        The Perforce bundle contains commands to allow one to work with the [Perforce Software Configuration Management System](http://perforce.com/) from within TextMate.
        
        This document assumes that the reader has already installed and is familiar with Perforce.  For help with Perforce, see [http://perforce.com/perforce/technical.html](http://perforce.com/perforce/technical.html).
        
        ### Setup
        
        You probably already have the following environment variables defined (in a file such as .bash_profile or .p4config) in order to use the `p4` shell command:
        
         *  P4PORT
         *  P4USER
         *  P4CLIENT
        
        The Perforce bundle commands that don't use the shell (such as "Diff With Base") don't have access to environment variables (such as those defined in .bash_profile), so they need to be defined in TextMate.
        
         1.  Select the TextMate->Preferences... menu item
         2.  Click on Advanced (the gear icon)
         3.  Click on Shell Variables
         4.  Click on '+', and change "MY_VARIABLE" to "P4PORT" and change "some value" to the appropriate P4PORT value for your Perforce server
         5.  Repeat step 4 for P4USER and P4CLIENT 
        
        EOF
        
        html_footer

      :input: none
33CB105E-A303-49CC-8F69-9F832D6CD8F4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: restart
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 33CB105E-A303-49CC-8F69-9F832D6CD8F4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Use this for a simple solution..
        RESPONSE=`exec osascript <<EOF | tr "\r" "\n"
         	
         	--To be asked for your password each time then use:
         	do shell script "apachectl restart" with administrator privileges
         	
         	--To skip password vaildation then change this... not for the security conscious.
         	--do shell script "apachectl restart" password "the_password" with administrator privileges
         	
        EOF`
         
        echo $RESPONSE
        
        # Otherwise, to store your password in the Keychain check this script in the Bundle Support folder.
        #
        # To use the Keychain to store the admin password then open /Applications/Utilities/Keychain Access.app
        # Add a new keychain called "TextMate" 
        # Add a Key with the name "ApacheBundle" to the new Keychaing then store your admin password in it.
        
        #"${TM_BUNDLE_SUPPORT}/apachectlUsingKeychain.sh" restart
      :input: none
5EFA9FF4-2246-4AF4-ABD6-2B7ADB4E9B80: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown markup.list
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "{"
        modifiers: 
        - :control
      :uuid: 5EFA9FF4-2246-4AF4-ABD6-2B7ADB4E9B80
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $: << ENV['TM_BUNDLE_SUPPORT']
        $: << ENV['TM_SUPPORT_PATH']
        
        require 'lib/markdown'
        require 'lib/escape'
        
        # get the list itself
        listtxt = $stdin.read()
        list = Markdown::List.parse(listtxt)
        
        print list.to_s()

      :input: selection
40EF180F-B8AE-40F7-8237-40A53314B57C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Remove From Repository\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 40EF180F-B8AE-40F7-8237-40A53314B57C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -z "$TM_SELECTED_FILES" && -z $TM_FILEPATH ]]; then
           exit_show_tool_tip "No files selected."
        fi
        
        file_list () {
           if [[ -n "$TM_SELECTED_FILES" ]]; then
              eval arr=("$TM_SELECTED_FILES")
              for (( i = 0; i < ${#arr[@]}; i++ )); do
                 FILE="${arr[$i]}"
                 echo "${FILE##$TM_PROJECT_DIRECTORY/}"
              done
           else
              echo "$TM_FILENAME"
           fi
        }
        
        rv=$(CocoaDialog textbox --float --title "Remove from Repository" \
           --string-output --no-newline --informative-text \
           "These files will be scheduled for deletion during the next commit." \
           --text "$(file_list|sort -f)" --button1 "Delete" --button2 "Cancel")
        
        if [[ "$rv" == "Delete" ]]; then
           if [[ -n "$TM_SELECTED_FILES" ]];
              then eval "$TM_SVN" rm "$TM_SELECTED_FILES"
              else      "$TM_SVN" rm "$TM_FILEPATH"
           fi
        fi

      :input: none
DAA69A0C-FC1E-4509-9931-DFFB38B4D6AE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby comment
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Italic
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: i
        modifiers: 
        - :super
      :uuid: DAA69A0C-FC1E-4509-9931-DFFB38B4D6AE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        s = STDIN.read
        case s
        when /^\w+$/
          print "_#{s}_$0"
        when ""
          print "_$1_$0"
        else
          print "<em>#{s}</em>"
        end
      :input: selection
79EBE164-2318-4563-83E5-F337588AAC73: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Command Based on Current Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "}"
        modifiers: 
        - :super
      :uuid: 79EBE164-2318-4563-83E5-F337588AAC73
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/config_helper.rb"
        @plist = Config.load
        shortcuts = @plist['commands']
        if ENV['TM_SCOPE'].match('beamer') then
          shortcuts.update(@plist['commands_beamer'])
        end
        name = STDIN.read
        if (shortcuts.has_key?(name)) then
          print shortcuts[name]
        elsif name.nil?
          print "\\${1:cmd}{$2} "
        else
          print "\\" + name + "{$1} "
        end

      :input: selection
DA0A5D89-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.perl
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: DA0A5D89-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        word=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}
        (perldoc -u "$word" 2>/dev/null || perldoc -u -f "$word" 2>/dev/null) | pod2html --q --title "Perl Documentation - $word" 2>/dev/null | sed -E 's|<a href="#(item_)?([^"]+)">|<a href="http://perldoc.perl.org/search.html?q=\2">|g'
        if [[ -e "${TM_DIRECTORY}/pod2htmd.tmp" ]]
          then unlink "${TM_DIRECTORY}/pod2htmd.tmp"
        fi
        if [[ -e "${TM_DIRECTORY}/pod2htmi.tmp" ]]
          then unlink "${TM_DIRECTORY}/pod2htmi.tmp"
        fi
      :input: selection
3050DE46-2337-476A-B733-8063B61ECB63: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Comment Header
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 3050DE46-2337-476A-B733-8063B61ECB63
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: head
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        #\n\
        # Notes:\n\
        #\n\
        # '(c)' is legally ambiguous. '\xC2\xA9' is not ambiguous, but may cause problems for some compilers.\n\
        # The copyright symbol is redundant if the word 'Copyright' is present, so it's safe to omit it\n\
        # entirely.\n\
        #\n\n\
        file_placeholder = '${1:\xC2\xABfile\xC2\xBB}'\n\
        project_placeholder = '${2:\xC2\xABproject\xC2\xBB}'\n\n\
        tm_filename\t\t= ENV['TM_FILENAME']\t\t\t|| file_placeholder\n\
        tm_project_dir\t= ENV['TM_PROJECT_DIRECTORY']\t|| ''\n\
        comment_start \t= ENV['TM_COMMENT_START']\t\t|| ''\n\
        comment_end\t\t= ENV['TM_COMMENT_END'] \t\t|| ''\n\
        copyright_holder\t= ENV['TM_ORGANIZATION_NAME']\n\n\
        project = case tm_project_dir\n\
        when /.*\\/(.*)/\n\
        \tproject = Regexp.last_match(1)\n\
        else\n\
        \tproject_placeholder\n\
        end\n\n\
        # use line comments?\n\
        line_comment\t= ''\n\
        indent\t\t= ' ' * (comment_start.length + 1)\n\n\
        if comment_end.empty?\n\
        \tline_comment = comment_start\n\
        \tcomment_start = ''\n\
        \tcomment_end = ''\n\
        \tindent = ' '\n\
        end\n\n\
        # Leopard doesn't have niutil\n\
        username\t= `dscl -raw . read /Users/#{ENV['USER']} realname | ruby -e 'puts STDIN.read.sub(/.*realname:\\s*(.*)$/, \"\\\\\\\\1\")'`.strip\n\
        date\t\t= `date +%Y-%m-%d`.chomp\n\n\
        # Default to username if no organization name\n\
        copyright_holder ||= username\n\n\
        print %Q{#{line_comment}#{comment_start}\n\
        #{line_comment}#{indent}#{tm_filename}\n\
        #{line_comment}#{indent}#{project}\n\
        #{line_comment}#{indent}\n\
        #{line_comment}#{indent}Created by #{username} on #{date}.\n\
        #{line_comment}#{indent}Copyright #{`date +%Y`.chomp} #{copyright_holder}. All rights reserved.\n\
        #{line_comment}#{comment_end}\n\
        $0}\n"
      :input: none
FBA5B6EB-2516-4940-9C8B-70645917F8BB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: List Installed Bundles
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: FBA5B6EB-2516-4940-9C8B-70645917F8BB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Installed Bundles" "GetBundle"
        require_cmd svnversion
        
        cat <<'HTML'
          <table class="pro_table" cellspacing="0" cellpadding="5">
          <tr><th>Bundle Name</th><th>Revision</th></tr>
        HTML
        
        cd ~/Library/Application\ Support/TextMate/Pristine\ Copy/Bundles
        for f in *.tmbundle; do
          echo "<tr><td>${f%.tmbundle}</td><td>"
          svnversion "$f"
          echo "</td></tr>"
        done
        
        cat <<'HTML'
          </table>
        HTML
        html_footer

      :input: none
BFD08AAF-3AB2-4C55-9A57-2EB75ECD9CD1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Class (with Doxygen)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BFD08AAF-3AB2-4C55-9A57-2EB75ECD9CD1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: qclassdoxy
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/insert_class.rb" doxygen
      :input: none
F216B838-965F-11D9-9561-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.xml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Validate Syntax
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :control
      :uuid: F216B838-965F-11D9-9561-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: xmllint --htmlout --valid - 2>&1|perl -pe 's|^((?:</?[^>]+>)*)(.*?):(\d+):(.*error.*)|$1<a href="txmt://open?line=$3">$4</a>|'
      :input: document
A1DEEFE4-7E3A-11D9-81A1-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Update Selected Files to Newest (HEAD)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A1DEEFE4-7E3A-11D9-81A1-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -n "$TM_SELECTED_FILE" && -d "$TM_SELECTED_FILE" ]]
           then WorkPath="$TM_SELECTED_FILE"
           else WorkPath="${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        fi
        
        export TM_SVN
        export WorkPath
        
        "$TM_SVN" update "$WorkPath" 2>&1 \
        |"${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/format_status.rb"
        
        # force TM to refresh the current file..
        rescan_project

      :input: none
05B145C3-6D67-4E63-8163-FE161E9CA4EB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 05B145C3-6D67-4E63-8163-FE161E9CA4EB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t html "$TM_FILEPATH"
      :input: none
D1DFE75D-EAAD-4662-8F1F-F5556402054B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Evaluate and Replace Expression
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: D1DFE75D-EAAD-4662-8F1F-F5556402054B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: printf "%s" `{ tr -d ,; echo; } | bc -l`| perl -pe 's/(\.[^0]+)0+$|\.0+$/$1/'
      :input: selection
BED3AE43-7F29-4F92-B2F1-3361B4ACC71A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Paste Filepath
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: BED3AE43-7F29-4F92-B2F1-3361B4ACC71A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export SHELL_NAME=${SHELL_NAME:="TextMate Shell"}
        "$TM_BUNDLE_SUPPORT/new.sh"
        PASTE=$(echo "$TM_FILEPATH" | sed s/\"/\\\\\"/g)
        osascript << END
        tell application "iTerm"
        	tell first terminal
        		tell session named "$SHELL_NAME"
        			write text "$PASTE"
        		end tell
        	end tell
        end tell
        END

      :input: none
0987069A-C370-11D9-AAA6-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Working Copy (BASE)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: 0987069A-C370-11D9-AAA6-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        TMPFILE=`mktemp /tmp/tm-svk.XXXXXX` || exit 1
        
        mv "$TMPFILE" "$TMPFILE.diff"
        TMPFILE="$TMPFILE.diff"
        
        # -rBASE is the same as specifying no revision -- it's the version that you have checked out.
        "${TM_SVK:=svk}" diff -rBASE "$TM_FILEPATH" &> "$TMPFILE"
        
        open -a TextMate "$TMPFILE" &
        
        #rm "$TMPFILE" # ideally, we'd do this, but it creates a race condition, because 'open' is asynchronous.

      :input: none
C688B837-D48A-4088-9374-F93E7B4CCD3C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Hex to Decimal
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: C688B837-D48A-4088-9374-F93E7B4CCD3C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: bc <<<"ibase=16;$(tr '[a-z]' '[A-Z]')"|tr -d \\n
      :input: selection
02F6DE2C-3334-4DCE-9FBB-6F8906653E5C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.plist.tm-grammar meta.dictionary.captures
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: New Captures Rule
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 02F6DE2C-3334-4DCE-9FBB-6F8906653E5C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        scope   = STDIN.read\n\n\
        # If we are working on a selection, exit\n\
        if ENV['TM_SELECTED_TEXT'] then\n  if scope =~ /\\A\\d+\\Z/ then\n    print scope\n    exit\n  end\n  print \"\\n\"\n  exit\n\
        end\n\n\
        snippet = \"\"\n\
        rules   = []\n\
        before_caret = 0\n\n\
        type = scope.match(/((beginC|endC|c)aptures)/)[0]\n\
        # Compute position of the caret.\n\
        caretpos = ENV['TM_LINE_NUMBER'].to_i() - ENV['TM_INPUT_START_LINE'].to_i() + 1\n\n\
        # Figure out how many rules come before the caret\n\
        scope.sub(/(\n              (.*\\n){#{caretpos}}     |   # Match normally.\n              (.*\\n)+                 |   # Match for if the caret is on the last line.\n              (.*)                        # Match for scope with no newline.\n           )/x) { |match|\n  match.gsub(/\\d\\s*=/) {|m| before_caret += 1 }\n\
        }\n\n\
        # Add each existing rule to the rules array and clean it up in the process.\n\
        scope.gsub(/(\\d+\\s*=\\s*\\{\\s*name\\s*=.*?\\};)/) { |match|\n  rules << match.gsub(/(\\d+)\\s*=\\s*\\{\\s*name\\s*=\\s*'((?:'(?=')|.)*?)'\\s*\\};/, \"\\1 = { name = '\\2' };\")\n\
        }\n\n\
        # Insert new rule, either in the middle or after other rules depending\n\
        # on previously determined caret position.\n\
        if rules.length >= before_caret\n  rules.insert(before_caret, \"${1:\xE2\x81\x8B} = { name = '$2'; };$0\")\n\
        else\n  rules << \"${1:\xE2\x81\x8B} = { name = '$2'; };$0\"\n\
        end\n\n\
        # Add each rule to the output\n\
        rules.each { |rule|\n  snippet << \"\\t\" + rule + \"\\n\"\n\
        }\n\n\
        # Use the first number that hasn't been used yet as the default.\n\
        1.upto(rules.length) { |capnum|\n  unless snippet =~ /\\b#{capnum.to_s}\\s*=/ then\n    snippet.gsub!(/\xE2\x81\x8B/) { |match| capnum.to_s }\n    break\n  end\n\
        }\n\n\
        # Add wrapper {}\n\
        if scope =~ /aptures\\s*=[^\\n]*\\{/ then\n  snippet = \"#{type} = {\\n#{snippet}};\"\n\
        else\n  snippet = \"#{type} =\\n{#{snippet}};\"\n\
        end\n\n\
        print snippet"
      :input: selection
AE00FFF1-C436-4826-808A-3AF6C2ABD18B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Smart Delete Brackets
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          fw==

        modifiers: 
        - :control
      :uuid: AE00FFF1-C436-4826-808A-3AF6C2ABD18B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        MARK = [0xFFFC].pack("U").freeze
        def snippet_escape (str); str.gsub(/[$`\\]/, '\\\\\0'); end
        
        def strip_bracket (txt)
          if idx = txt.index(/[\[("']/) then
            chr_map = { ?[ => ?], ?( => ?), ?" => ?", ?' => ?' }
            if ridx = txt.rindex(chr_map[txt[idx]]) then
              txt[ridx, 1] = ""
              txt[idx, 1] = ""
              txt.insert idx, " " if txt[idx - 1, 1] =~ /[^\[\]\(\)\{\}\s]/ && ENV['TM_SELECTED_TEXT'].nil?
            end
          end
          return txt
        end
        
        line = STDIN.gets
        unless ENV.has_key?('TM_SELECTED_TEXT') then
          line.insert(ENV['TM_LINE_INDEX'].to_i, MARK)
        end
        print snippet_escape(strip_bracket(line)).sub(/#{MARK}/, '${0}')

      :input: selection
674E54F5-065E-4224-9626-673903B7C0E0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Document / Selection With Clipboard
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 674E54F5-065E-4224-9626-673903B7C0E0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # set defaultCStringEncoding to UTF-8
        diff --strip-trailing-cr --label "${TM_FILENAME:-untitled}" --label "(clipboard)" -u - <(__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste)

      :input: selection
03E4CAA8-0F74-4394-8709-4EF0E22F908B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "\xE2\x80\xAFCheck Out\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 03E4CAA8-0F74-4394-8709-4EF0E22F908B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        # Setup Dialog asking for host
        url=$(CocoaDialog inputbox --float \
            --title "Subversion Checkout" \
            --informative-text "URL:" \
            --text "svn+ssh://" \
            --button1 "Checkout" \
            --button2 "Cancel")
        
        # If user canceled exit.
        [[ "${url:0:1}" == "2" ]] && exit_discard
        
        # skip the return code so we are left with just the url
        url="${url:2}"
        
        # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
        
        # Setup Dialog asking where to save
        location=$(CocoaDialog filesave --float \
            --text "Checking out $url" \
            --with-file "$(basename "$url")" )
        
        # If user canceled exit.
        [[ -z "$location" ]] && exit_discard
        
        # format the checkout output
        export WorkPath="$location" # format_status will show paths as relative to this value
        "$TM_SVN" checkout "$url" "$location" 2>&1 |"${TM_RUBY:-ruby}" -KU -- "${TM_BUNDLE_SUPPORT}/format_status.rb" --checkout
        
        open -b com.macromates.textmate "$location"

      :input: none
E435839A-880B-4E5F-9078-71BC595F2EA0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add to Active Target
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: X
        modifiers: 
        - :control
      :uuid: E435839A-880B-4E5F-9078-71BC595F2EA0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        PROJECT="project=$(find_xcode_project.rb)"
        
        if [[ -n "$TM_SELECTED_FILES" ]]; then
          eval arr=("$TM_SELECTED_FILES")
          xcode_project.rb "$PROJECT" "${arr[@]/#/add=}"
        elif [[ -n "$TM_FILEPATH" ]]; then
          xcode_project.rb "$PROJECT" add="$TM_FILEPATH"
        else
          exit_show_tool_tip "No files selected."
        fi

      :input: none
DF26FEB2-2E2C-4764-B766-869113AF6E00: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Log
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: DF26FEB2-2E2C-4764-B766-869113AF6E00
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"; cd "$TM_DIRECTORY"
        fi
              
        : ${TM_RUBY:=ruby}
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log.rb"
        HG_STYLE="${TM_BUNDLE_SUPPORT}/map-log.changelog"
        
        if [[ $TM_HG_LOG_LIMIT != 0 ]]
        	then HG_LIMIT="-l ${TM_HG_LOG_LIMIT:=10}"
        fi
        
        HG_STYLE_TMP='"$HG_STYLE"'
        TM_HG_TMP='"$TM_HG"'
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_HG" log $HG_LIMIT --style "$HG_STYLE" "$TM_FILEPATH" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG"
        else
           eval "$TM_HG_TMP" log $HG_LIMIT --style "$HG_STYLE_TMP" "$TM_SELECTED_FILES" 2>&1 |"$TM_RUBY" -- "$FORMAT_LOG"
        fi
      :input: none
296CC34F-72CA-4720-A77D-0452EEB3813C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 296CC34F-72CA-4720-A77D-0452EEB3813C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_RUBY:-ruby}\" \"$TM_BUNDLE_SUPPORT/hg_show_help.rb\""
      :input: none
5BBD932E-7BB0-11D9-8E83-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Module
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 5BBD932E-7BB0-11D9-8E83-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # This command takes the currently selected word and
        # displays the python documentation for the module
        # corresponding to said word.
        #
        # It falls back on the current word.
        
        # change to /tmp to avoid possibly overwriting
        # an html file in the working directory.
        cd /tmp
        
        : ${TM_SELECTED_TEXT:=$TM_CURRENT_WORD}
        pydoc -w "$TM_SELECTED_TEXT" >/dev/null
        if [[ -f "$TM_SELECTED_TEXT.html" ]]; then
        	cat "$TM_SELECTED_TEXT.html"
        	rm -f "$TM_SELECTED_TEXT.html"
        else
        	echo "<p>No documentation found for:<pre>$TM_SELECTED_TEXT</pre><p>This command only looks for Python modules."
        fi

      :input: none
273853DF-6E4F-11D9-A18D-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Sort Lines in Document / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          iA==

        modifiers: []

      :uuid: 273853DF-6E4F-11D9-A18D-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: sort -f
      :input: selection
4400BCE9-20E3-426E-B1D7-2C0BCA53BCF8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Update Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: u
        modifiers: 
        - :control
        - :super
      :uuid: 4400BCE9-20E3-426E-B1D7-2C0BCA53BCF8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_BUNDLE_SUPPORT']}/tminclude.rb"
        TextMate::Includes.instance.process_persistent_includes

      :input: document
0275EF39-9357-408F-AF20-79E415CA9504: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Method
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 0275EF39-9357-408F-AF20-79E415CA9504
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<SNIPPET
        def ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\${1/.+/(/}\${1:args}\${1/.+/)/}
        	\$0
        end
        SNIPPET
      :input: selection
9755F5E9-3919-4E82-AAAD-9ECB64FD718A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Continue Line (\xC2\xAC)"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 9755F5E9-3919-4E82-AAAD-9ECB64FD718A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/bin/bash\n\n\
        if head -n$((TM_LINE_NUMBER-1)) | tail -n1 | grep -sq '\xC2\xAC$'\n  then echo -en '\xC2\xAC\\n'\n  else echo -en '\xC2\xAC\\n\\t'\n\
        fi\n"
      :input: document
0CCC8443-40F3-4BAB-9440-D737562B5F45: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, text.html.ruby, source.ruby.rails.embedded.html
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Alternate File
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: 0CCC8443-40F3-4BAB-9440-D737562B5F45
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb"
      :input: none
4B22577B-BC8E-11D9-8946-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: "AES Decrypt Document / Selection With Password\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: E
        modifiers: 
        - :control
        - :super
      :uuid: 4B22577B-BC8E-11D9-8946-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        get_pw () {
          res=$(CocoaDialog 2>/dev/null secure-inputbox --float --no-newline \
            --title 'Decrypt AES 128 Encrypted Text' \
            --informative-text "$1" \
            --button1 "$2" --button2 Cancel)
          [[ ${res:0:1} == 1 ]] && echo -n "${res:2}"
        }
        
        pw=$(get_pw 'What is the password?' Decrypt)
        [[ -z "$pw" ]] && exit_discard
        
        if ! openssl enc -d -aes128 -base64 -pass "pass:$pw"; then
           exit_show_tool_tip
        fi

      :input: selection
14C1643E-7D51-11D9-859D-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Show TODO List
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
      :uuid: 14C1643E-7D51-11D9-859D-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_RUBY:-ruby}\" -r \"$TM_BUNDLE_SUPPORT/todo.rb\""
      :input: none
A8369DD4-4424-4A64-B0B1-FB8BD7D8E02C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Evaluate and Replace Expression (rounded)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: A8369DD4-4424-4A64-B0B1-FB8BD7D8E02C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: printf "%.0f" `{ tr -d ,; echo; } | bc -l`
      :input: selection
7C1AFFF2-BA6F-4AB7-AE1A-D60D737BBB14: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Keyboard Shortcuts
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :super
      :uuid: 7C1AFFF2-BA6F-4AB7-AE1A-D60D737BBB14
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "cat <<\"TEXT\"\n\
        \xE2\x8C\x98B\t\tBold\n\
        \xE2\x8C\x98I\t\tItalic\n\
        \xE2\x8C\x98U\t\tUnderline\n\
        \xE2\x8C\x98K\t\tMonospaced\n\
        \xE2\x8C\xA5\xE2\x8C\x98K\tVerbatim Block (code)\n\
        \xE2\x8C\x83\xE2\x87\xA7L\tLink\n\
        \xE2\x8C\x83\xE2\x87\xA7I\tImage\n\
        \xE2\x8C\x83\xE2\x87\xA7|\tTable\n\
        \xE2\x8C\x83\xE2\x87\xA7+\tNumbered Title\n\
        \xE2\x8C\x83=\t\tTitle\n\
        \xE2\x8C\x98]\t\tQuote (In)\n\
        \xE2\x8C\x98[\t\tQuote (Out)\n\
        \xE2\x8C\x98/\t\tComment Lines (On/Off)\n\
        TEXT\n"
      :input: none
6E70284B-1694-46F5-BA99-FC3CC22705C6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex  meta.data.environment.tabular.latex
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Remove Column
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gg==

        modifiers: 
        - :alt
        - :control
      :uuid: 6E70284B-1694-46F5-BA99-FC3CC22705C6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require 'pp'
        require ENV["TM_SUPPORT_PATH"] + "/lib/escape.rb"
        data=STDIN.readlines
        l,c = ENV['TM_LINE_NUMBER'].to_i-ENV['TM_INPUT_START_LINE'].to_i, ENV['TM_LINE_INDEX'].to_i
        col_no = data[l].slice(/^.{#{c}}/).scan("&").length
        if col_no == 0 then
          data.each do |line|
            if line =~ /^[^&]*&(.*)/ then
              print $1
            else
              print line
            end
          end
        else
          data.each do |line|
            if line =~ /^([^&]*&){#{col_no}}(?:[^&]*&)(.*\n?)/ then
              print $1 + $2
            else
              print line
            end
          end
        end
      :input: selection
E43BD9CC-90BB-49A0-9644-15300E2A097F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.yui
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: E43BD9CC-90BB-49A0-9644-15300E2A097F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/php
        <?php
        
        $func = preg_replace('/[\(\) ;]/', '',  $_ENV['TM_CURRENT_WORD']);
        $scope = trim(preg_replace('/source\.js\.yui support\.function\.(.*?)\.js\.yui/', '$1', $_ENV['TM_SCOPE']));
        $anchor = '#' . $func;
        
        if(preg_match('|support\.class\.js\.yui|', $scope)) {
        	$scope = $func;
        	$anchor = '';
        }
        
        switch($scope) {
        	case 'YAHOO':
        		$page = 'YAHOO.html'; break;
        	case 'YAHOO_config':
        		$page = 'YAHOO_config.html'; break;
        	case 'lang':
        		$page = 'YAHOO.lang.html'; break;
        	case 'DataSource':
        	case 'Column':
        	case 'ColumnEditor':
        	case 'ColumnSet':
        	case 'DataTable':
        	case 'Record':
        	case 'RecordSet':
        	case 'Sort':
        	case 'WidthResizer':
        		$page = $scope . '.html'; break;
        	case 'Dom':
        	case 'Point':
        	case 'Region':
        	case 'Event':
        	case 'CustomEvent':
        	case 'EventProvider':
        	case 'Subscriber':
        	case 'Connect':
        	case 'Anim':
        	case 'AnimMgr':
        	case 'Bezier':
        	case 'ColorAnim':
        	case 'Easing':
        	case 'Motion':
        	case 'Scroll':
        	case 'DD':
        	case 'DDProxy':
        	case 'DDTarget':
        	case 'DragDrop':
        	case 'DragDropMgr':
        	case 'History':
        		$page = 'YAHOO.util.' . $scope . '.html'; break;
        	case 'AutoComplete':
        	case 'DS_JSArray':
        	case 'DS_JSFunction':
        	case 'DS_XHR':
        	case 'Calendar':
        	case 'Calendar2up':
        	case 'Calendar_Core':
        	case 'CalendarGroup':
        	case 'DateMath':
        	case 'Module':
        	case 'Overlay':
        	case 'OverlayManager':
        	case 'Tooltip':
        	case 'Panel':
        	case 'Dialog':
        	case 'SimpleDialog':
        	case 'ContainerEffect':
        	case 'Logger':
        	case 'LogMsg':
        	case 'LogReader':
        	case 'LogWriter':
        	case 'Menu':
        	case 'MenuItem':
        	case 'Menubar':
        	case 'MenuBarItem':
        	case 'MenuManager':
        	case 'MenuModule':
        	case 'MenuModuleItem':
        	case 'ContextMenu':
        	case 'ContextMenuItem':
        	case 'Slider':
        	case 'SliderThumb':
        	case 'Tab':
        	case 'TabView':
        	case 'Element':
        	case 'TreeView':
        	case 'Node':
        	case 'HTMLNode':
        	case 'MenuNode':
        	case 'TextNode':
        	case 'RootNode':
        	case 'TVAnim':
        	case 'TVFadeIn':
        	case 'TVFadeOut':
        	case 'Button':
        	case 'ButtonGroup':
        		$page = 'YAHOO.widget.' . $scope . '.html'; break;
        	default:
        		$page = ''; $anchor = '';
        }
        
        $url = 'http://developer.yahoo.com/yui/docs/' . $page . $anchor;
        echo '<meta http-equiv="Refresh" content="0;URL' . $url . '">';
        
        ?>
      :input: selection
FBA48A05-6538-4F51-8D0E-D8E53486AE79: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Run Test Suite
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: FBA48A05-6538-4F51-8D0E-D8E53486AE79
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ${TM_PHP:=php} -f "$TM_FILEPATH"
      :input: none
DBF2B50A-8303-11D9-8C1E-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to OmniOutliner
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: DBF2B50A-8303-11D9-8C1E-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # Change the application name if you are using OmniOutliner or another program. You can edit this command or go to Prefs/Advanced/ShellVariables and set TM_OPML_APPLICATION to the name of your favorite program.
        
        if [ -z $TM_OPML_APPLICATION ] ; then
        	TM_OPML_APPLICATION="OmniOutliner"
        fi
        
        perl "$TM_BUNDLE_SUPPORT/t2o.pl" > /tmp/tm2oo.opml
        
        open -a "$TM_OPML_APPLICATION" /tmp/tm2oo.opml ||	echo "$TM_OPML_APPLICATION can't be found. Edit the command and replace TM_OPML_APPLICATION with an existing application."

      :input: selection
4E4A0404-8560-483A-B975-E53F6A6B7E25: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Find Tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "]"
        modifiers: 
        - :control
      :uuid: 4E4A0404-8560-483A-B975-E53F6A6B7E25
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # just to remind you of some useful environment variables
        # see Help / Environment Variables for the full list
        #echo File: "$TM_FILEPATH"
        #echo Word: "$TM_CURRENT_WORD"
        #echo Selection: "$TM_SELECTED_TEXT"
        
        exec "$TM_BUNDLE_SUPPORT/bin/tmctags"

      :input: none
88F36C61-F809-4FCE-97AF-D36019891F31: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c, source.objc, source.c++, source.objc++, source.python, source.d
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Build ...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 88F36C61-F809-4FCE-97AF-D36019891F31
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # TM_IGNORE_WARNINGS is a sequence of glob patterns of files in which to ignore
        # warnings.  Right now it doesn't support escaped ':" -- the separator character.
        # export TM_IGNORE_WARNINGS="mitchcode_*.h:*/MitchCode/*"
        
        # Look at other bundles to see if there are conventions for using 'defaults'.
        PREF_DOMAIN=com.macromates.textmate.scons_prefs
        lastTarget=`defaults read ${PREF_DOMAIN} last_target`
        
        res=$(CocoaDialog inputbox --title "Target" \
            --informative-text "Build Target:" \
            --text "${lastTarget}" \
            --button1 "Build" --button2 "Cancel")
        
        [[ $(head -n1 <<<"$res") == "2" ]] && exit_discard
        
        target=""
        reslines=`(wc -l <<<"$res")|sed -e 's/ //g'`
        [[ "${reslines}" == "2" ]] && target=$(tail -n1 <<<"$res")
        
        defaults write ${PREF_DOMAIN} last_target -string "${target}"
        defaults write ${PREF_DOMAIN} last_build_dir -string "${TM_DIRECTORY}"
        
        # Allow spaces to delimit arguments in ${target} -- bad idea?
        python -u "${TM_BUNDLE_SUPPORT}/bin/scons_html_wrapper.py" ${target}
      :input: none
48976460-B5A4-11D9-87C9-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Scope
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: P
        modifiers: 
        - :control
      :uuid: 48976460-B5A4-11D9-87C9-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: tr <<< "$TM_SCOPE" ' ' '\n'
      :input: none
1B1B0B59-A69B-4601-9884-23480A27914B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Plain Text
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 1B1B0B59-A69B-4601-9884-23480A27914B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t txt "$TM_FILEPATH"
      :input: none
4DB424EF-67FD-42A7-B27A-4705EAE1C5A4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Weekly Archive
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 4DB424EF-67FD-42A7-B27A-4705EAE1C5A4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\" -a=w"
      :input: document
740EC8D5-6590-4635-B76A-A032681898C8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.processing
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run in Processing
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 740EC8D5-6590-4635-B76A-A032681898C8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: osascript -e 'try' -e 'tell application "Processing"' -e 'activate' -e 'end tell' -e 'tell application "System Events"' -e 'tell process "Processing"' -e 'tell menu bar 1' -e 'tell menu bar item "Sketch"' -e 'tell menu "Sketch"' -e 'click menu item "Run"' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'return true' -e 'on error error_message' -e 'return false' -e 'end try'
      :input: none
320A9A37-5564-4AA3-AE09-99369B9D4CA1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "IRC: #javascript@Freenode"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 320A9A37-5564-4AA3-AE09-99369B9D4CA1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: open "irc://irc.freenode.net/javascript"
      :input: none
9AA55A9A-ED50-4494-B814-50FD21CDF535: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text -source, string -(string source)
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: English Completion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 9AA55A9A-ED50-4494-B814-50FD21CDF535
      :disable_output_auto_indent: 
      :bundle_uuid: 467B298F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        require "#{ENV['TM_SUPPORT_PATH']}/lib/codecompletion"
        
        def letsdoit(stdin)
          choices = TextmateCompletionsText.new(`cat /usr/share/dict/web2|grep ^#{Regexp.escape ENV['TM_CURRENT_WORD']}|head -n 500`).to_ary
          print TextmateCodeCompletion.new(choices,stdin).to_snippet
        end
        
        letsdoit(STDIN.read)

      :input: selection
42B1691B-DC28-4743-9B18-C8D51B70722C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc, source.objc++
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Index Headers for Completion
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 42B1691B-DC28-4743-9B18-C8D51B70722C
      :disable_output_auto_indent: 
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]; then
          find "$TM_PROJECT_DIRECTORY" -name \*.h | ruby "$TM_BUNDLE_SUPPORT/generateMethodList.rb" -c "$TM_PROJECT_DIRECTORY/.classes.TM_Completions.txt" -m "$TM_PROJECT_DIRECTORY/.methods.TM_Completions.txt";
          gzip -f "$TM_PROJECT_DIRECTORY/.methods.TM_Completions.txt";
          gzip -f "$TM_PROJECT_DIRECTORY/.classes.TM_Completions.txt";
            echo "indexing complete";
          else
            echo "no Project Path found";
        fi
      :input: none
D7FAB954-4DAB-4213-9023-CE52AD04BE46: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php.cake
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: "Paste Line / Selection to IRC\xE2\x80\xA6 (CakePHP Paste)"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :alt
        - :control
      :uuid: D7FAB954-4DAB-4213-9023-CE52AD04BE46
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "if [[ -z \"$TM_IRC_CHANNEL\" ]] && ps -xc|grep -sq 'Colloquy$'; then\n  channels=$(osascript \\\n    -e 'tell application \"Colloquy\"' \\\n      -e 'set names to \"\"' \\\n      -e 'repeat with p in panels' \\\n        -e 'set names to names & name of p & \" \"' \\\n      -e 'end repeat' \\\n    -e 'end tell')\n\n  result=$(CocoaDialog dropdown \\\n    --title 'Paste to IRC' \\\n    --text 'Choose a channel to paste into' \\\n    --button1 Paste --button2 Cancel \\\n    --string-output --no-newline \\\n    --items $channels)\n\n  if [[ \"${result:0:5}\" == \"Paste\" ]];\n    then TM_IRC_CHANNEL=\"${result:6}\"\n    else exit_discard\n  fi\n\
        fi\n\n \n\
        result=$(CocoaDialog textbox \\\n    --title 'Describe Paste' \\\n    --text 'This paste is about' \\\n    --button1 Ok --button2 Cancel \\\n    --selected --scroll-top top --editable)\n\n  if [[ \"${result:0:1}\" == \"1\" ]];\n    then NOTE=\"${result:2}\"\n    else exit_discard\n  fi\n\
        # set the language to one rafb.net supports\n\
        case $TM_MODE in\n  C89|C|C++|C\\#|Java|Pascal|Perl|PHP|PL/I|Python|Ruby|SQL|VB)\n    # do nothing\n  ;;\n  *)\n    TM_MODE=\"php\"\n  ;;\n\
        esac\n\n\
        : ${TM_PASTE_URL:=http://cakephp.org/pastes/add}\n\
        url=$(curl \"${TM_PASTE_URL}\" -F \"data[Paste][nick]\"=\"$USER\" -F cvt_tabs=\"$TM_TAB_SIZE\" -F data[Paste][paste]='<-' -F \"data[Paste][lang]\"=\"php\" -F \"data[Paste][note]\"=\"${NOTE}\" -s -L -o /dev/null -w \"%{url_effective}\" \\\n  2> >(CocoaDialog progressbar --indeterminate \\\n    --title \"Paste to #${TM_IRC_CHANNEL}\xE2\x80\xA6\" \\\n    --text \"Contacting Server \xE2\x80\x9C${TM_PASTE_URL}\xE2\x80\x9D\xE2\x80\xA6\" \\\n  ))\n\n\
        [[ -z \"$url\" ]] && exit_show_tool_tip \"Error: Got no URL back from pasting service.\"\n\n\
        if ps -xc|grep -sq 'Colloquy$'; then\n  osascript -e 'tell application \"Colloquy\" to send message \"pasted '\"$url\"'\" action tense yes to (get chat room \"#'\"$TM_IRC_CHANNEL\"'\" of first connection)'\n  echo \"The text was pasted to #$TM_IRC_CHANNEL.\"\n\
        else\n  echo -n \"$url\" | pbcopy\n  echo \"The text is available as $url\"\n  echo \"For your convenience, the URL was placed on the clipboard.\"\n\
        fi\n"
      :input: selection
C008E916-56AE-4310-9C05-D3070AAF1CF8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Close Module Decl
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: .
        modifiers: 
        - :alt
        - :super
      :uuid: C008E916-56AE-4310-9C05-D3070AAF1CF8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ruby -- "$TM_SUPPORT_PATH/bin/checknest.rb" '(?x) (functor|structure) (.+) = (?=\s*struct)' 'end' 'end (* $1 $2 *)' -n$TM_LINE_NUMBER
      :input: document
7A8587A6-743D-4449-A0E2-BFD9A97893BC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Fill Remind Files
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: +
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 7A8587A6-743D-4449-A0E2-BFD9A97893BC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        "$TM_BUNDLE_SUPPORT/bin/fill_remind_file.rb"
        echo "Your remind files are now filled!"
      :input: none
835FAAC6-5431-436C-998B-241F7226B99B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.embedded, source.ruby.rails.embedded, comment.block.erb
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle ERb Tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: ">"
        modifiers: 
        - :control
      :uuid: 835FAAC6-5431-436C-998B-241F7226B99B
      :disable_output_auto_indent: false
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -w
        
        require "#{ENV["TM_SUPPORT_PATH"]}/lib/escape"
        require "enumerator"
        
        TAGS = %w[<%= <%# <%- <%].freeze
        
        # locate caret (Allan's code)
        line = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
        col  = ENV['TM_LINE_INDEX'].to_i
        if ENV['TM_LINE_NUMBER'].to_i == ENV['TM_INPUT_START_LINE'].to_i
          col -= ENV['TM_INPUT_START_LINE_INDEX'].to_i
        end
        
        # read input
        input = $stdin.read
        
        # snippetize output
        lines       = input.to_a
        lines[line] = e_sn(lines[line][0...col]) + "${0}" + e_sn(lines[line][col..-1])
        output      = lines.enum_with_index.inject(String.new) do |out, (l, i)|
          i == line ? out + l : out + e_sn(l)
        end
        
        # swap ERb tags
        result = output.sub(/\A<%[-#=]?/) { |match| TAGS[TAGS.index(match) - 1] }
        if result[2] == ?-
          result.sub!(/%>\Z/, "-%>")
        else
          result.sub!(/-%>\Z/, "%>")
        end
        print result
      :input: selection
175D3D76-74CE-11D9-813D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Update to Newest (HEAD)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 175D3D76-74CE-11D9-813D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	svn = ENV['TM_SVN'] || "svn"
        	ruby = ENV['TM_RUBY'] || "ruby"
        	support = ENV['TM_BUNDLE_SUPPORT']
        	paths = TextMate.selected_paths_array
        	
        	# TODO: Ideally, we'd like to use a tooltip for one and not others, but we can't switch from a tooltip
        	# to dynamic HTML output (or maybe we could double-fork a process?)
        	# if ((paths.size == 1) and not (File.directory? paths[0]))
        	#	puts %x{#{svn} update #{TextMate.selected_paths_for_shell}}
        	# else
        		update = IO.popen("'#{svn}' update #{TextMate.selected_paths_for_shell}", 'r')
        		format = IO.popen("'#{ruby}' -- '#{support}/format_status.rb'", 'w')
        		update.each_line { |line| format.puts(line) }
        	# end	
        END
        
        # force TM to refresh the current file..
        rescan_project

      :input: none
55048B05-38AA-4B6C-A83C-7F6190F53B6C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Log
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 55048B05-38AA-4B6C-A83C-7F6190F53B6C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        : ${TM_RUBY:=ruby}
        : ${TM_SVN_LOG_RANGE:=HEAD:1}
        : ${TM_SVN_LOG_LIMIT:=15}
        FORMAT_LOG="${TM_BUNDLE_SUPPORT}/format_log_xml.rb"
        
        if [[ $TM_SVN_LOG_LIMIT -eq 0 ]]; then
        	LIMIT=""
        else
        	LIMIT="--limit $TM_SVN_LOG_LIMIT"
        fi
        
        if [[ -z $TM_SELECTED_FILES ]]; then
           "$TM_SVN" log --xml $LIMIT -vr "$TM_SVN_LOG_RANGE" \
           "$TM_FILEPATH" 2>&1 | "$TM_RUBY" -- "$FORMAT_LOG"
        else
           eval "$TM_SVN" log --xml $LIMIT -vr "$TM_SVN_LOG_RANGE" \
           "$TM_SELECTED_FILES" 2>&1 | "$TM_RUBY" -- "$FORMAT_LOG"
        fi
      :input: none
BD6E6210-F4A3-4821-BA43-A9DFF4178704: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.blog
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: View Online Version
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: BD6E6210-F4A3-4821-BA43-A9DFF4178704
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -rjcode -Ku
        require "#{ENV['TM_BUNDLE_SUPPORT']}/lib/blogging.rb"
        Blogging.new.view
      :input: document
8109F2C2-FF63-46F7-83F3-D2318290FC11: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Non-Matching Lines into New Document
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8109F2C2-FF63-46F7-83F3-D2318290FC11
      :disable_output_auto_indent: 
      :bundle_uuid: B7BC3FFD-6E4B-11D9-91AF-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        res=$(CocoaDialog inputbox --title "Filter Non-Matching Lines" \
            --informative-text "Enter a pattern:" \
            --button1 "Filter" --button2 "Cancel")
        
        [[ $(head -n1 <<<"$res") == "2" ]] && exit_discard
        export pattern=$(tail -n1 <<<"$res")
        
        # This could be done with grep, but Python's RE is closer to oniguruma
        "${TM_PYTHON:-python}" -c '
        import sys, os, re, traceback
        try:
          pattern = re.compile(os.environ["pattern"])
        except re.error, e:
          sys.stderr.write("Invalid pattern: %s" % e)
          sys.exit(1)
        for line in sys.stdin:
          if not pattern.search(line):
            sys.stdout.write(line)
        ' || exit_show_tool_tip

      :input: selection
3602A889-81F7-422B-BC0E-3FB0543CEA9C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.shell string.interpolated
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Toggle Backticks
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "\""
        modifiers: 
        - :control
      :uuid: 3602A889-81F7-422B-BC0E-3FB0543CEA9C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        print case str = STDIN.read
          when /\A`(.*)`\z/m     then '$(' + $1 + ')'
          when /\A\$\((.*)\)\z/m then '`' + $1 + '`'
          else str
        end

      :input: selection
1970AE74-3949-40B3-B263-727AA3FF167A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show DB Schema for Current Class
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: S
        modifiers: 
        - :control
        - :super
      :uuid: 1970AE74-3949-40B3-B263-727AA3FF167A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "#!/usr/bin/env ruby\n\n\
        require \"#{ENV['TM_SUPPORT_PATH']}/lib/progress\"\n\
        TextMate.call_with_progress(:title => \"Contacting SQL Server\", :message => \"Fetching database schema\xE2\x80\xA6\") do\n\n  project = ENV['TM_PROJECT_DIRECTORY']\n  word = ENV['TM_CURRENT_WORD']\n\n  require \"#{project}/config/boot\"\n  require \"#{project}/config/environment\"\n\n  klass = Object.const_get(word) rescue nil\n  if klass and klass.class == Class and klass.ancestors.include?(ActiveRecord::Base)\n    columns = klass.columns_hash\n\n    data = []\n    data += [%w[column primary sql_type default]]\n    data += [%w[------ ------- -------- -------]]\n    data += columns.collect { |col, attrs| [col, attrs.primary.to_s, attrs.sql_type.to_s, attrs.default.to_s] }\n\n    STDOUT << data.inject('') do |output, array| \n      output + array.inject('') { |row_str, value| row_str + value.ljust(20) } + \"\\n\"\n    end\n  elsif klass and klass.class == Class and not klass.ancestors.include?(ActiveRecord::Base)\n    STDOUT << \"#{word} is not an Active Record derived class\"\n  else\n    STDOUT << \"#{word} was not recognised as a class\"\n  end\n\n\
        end\n"
      :input: none
81229AD0-DE5C-11D9-823F-000A95A51A76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add File(s) to Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 81229AD0-DE5C-11D9-823F-000A95A51A76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_DIRECTORY"
        
        if [[ -z $TM_SELECTED_FILES ]]; then
        	DARCSPaths=`echo \'$TM_FILEPATH\'`;
        else
        	DARCSPaths="$TM_SELECTED_FILES";
        fi
        
        
        "${TM_RUBY:=ruby}" <<'EOF'
        require 'pathname'
        
        basedir = Pathname.new(ENV['TM_DIRECTORY']).realpath()
        addlist = Array.new()
        ENV['TM_SELECTED_FILES'].split(/' '/).each() { |addfile|
          addfile = addfile[/^'?(.*?)'?$/, 1]
          addlist << "'#{Pathname.new(addfile).realpath.relative_path_from(basedir).to_s.gsub(/(')/, "\\\1")}'"
        }
        output = `darcs add -r #{addlist.join(' ')}`
        puts(output)
      :input: none
DA0A6096-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $1 $3
      :scope: source.perl
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: nop
      :name: Perl to One-line
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DA0A6096-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: ^(.*)line (\d+)(.*)$
      :command: |
        require_cmd perltidy 'Perltidy is available <a href="javascript:TextMate.system(&quot;open http://perltidy.sourceforge.net/&quot;, null)">from here</a>.'
        
        perltidy -st -dac -mangle | perl -e '        local $/;$_=<>;s/^#(.*?)\n//;s/\n//g;print;'

      :input: selection
F60652D5-8316-11D9-8D63-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: View Outlines README
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: F60652D5-8316-11D9-8D63-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat "$TM_BUNDLE_PATH/README.html"
      :input: selection
F1541E0F-77EB-11D9-B807-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Subtract Numbers in Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: F1541E0F-77EB-11D9-B807-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: printf " = %s" `{ tr -d ,|tr -cs '[0-9.]' ' '|perl -pe 's/([0-9.]+) (?=[0-9.])/$1-/g'; echo; } | bc -l`| perl -pe 's/(\.[^0]+)0+$|\.0+$/$1/'
      :input: selection
67E7372F-C15F-4009-AE5B-975F2BC9DD91: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.xml
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Create XSL Generator for Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 67E7372F-C15F-4009-AE5B-975F2BC9DD91
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require 'rexml/document'
        
        def serialize(source, dest)
          if source.is_a? REXML::Text
            dest.add_text(source.dup)
            return dest
          end
        
          d2 = dest.add_element('xsl:element', 'name' => source.expanded_name)
          source.attributes.each { |(k,v)| d2.add_element('xsl:attribute', 'name' => k).text = v }
          source.children.each { |node| serialize(node, d2)}
          dest
        end
        
        source = REXML::Document.new(STDIN.read)
        dest   = REXML::Document.new
        
        print serialize(source.elements[1], dest).to_s
      :input: selection
CE8367B5-2C5D-4057-B1EE-9EB026173E31: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Definition List
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: CE8367B5-2C5D-4057-B1EE-9EB026173E31
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: ":"
      :capture_pattern: 
      :command: |-
        if test -z "$TM_SELECTED_TEXT"; then
        	echo
        	echo ": Term 1"
        	echo "Description 1"
        	echo ": Term 2"
        	echo "Description 2"
        	echo ":"
        else
        	echo "$TM_SELECTED_TEXT" | sed 's/^/: /'
        fi
      :input: selection
6EE297DB-83BF-11D9-AD5A-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Publish Movie
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 6EE297DB-83BF-11D9-AD5A-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # publishes the document which is open in flash
        
        echo "flash.getDocumentDOM().publish()" > /tmp/test.jsfl;
        open /tmp/test.jsfl;
      :input: none
A7AB0414-104A-4128-B16E-72094A1DD5EB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tail Access Log
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A7AB0414-104A-4128-B16E-72094A1DD5EB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #This script will open a terminal window and then attempt to tail the default apache access_log
        
        openTerminalWindow=`exec osascript <<EOF | tr "\r" "\n"
        tell application "Terminal"
        	activate
        	with timeout of 1800 seconds
        		do script with command "tail -f /var/log/httpd/access_log"
        		tell window 1
        			set title displays shell path to false
        			set title displays window size to false
        			set title displays device name to true
        			set title displays file name to true
        			set title displays custom title to true
        			set custom title to "httpd Access Log"
        			set number of columns to 80
        			set number of rows to 20
        		end tell
        	end timeout
        end tell
        EOF`
      :input: none
6DEF923E-2347-46EC-AFBE-183D08E63DC1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Load schema.rb to DB
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 6DEF923E-2347-46EC-AFBE-183D08E63DC1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:schema:load

      :input: none
4050A252-C604-4D0C-8545-E50B22E2715B: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Document With Arbitrary File\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 4050A252-C604-4D0C-8545-E50B22E2715B
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        path=$(osascript<<END
        tell application "TextMate"
        	set theFile to choose file
        	set the result to POSIX path of theFile
        end tell
        END)
        
        diff --strip-trailing-cr --label "$path" --label "${TM_FILENAME:-untitled}" -u "$path" -

      :input: document
395D5D13-1F9A-444C-A27E-3B98E268D9FE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Cancel
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 395D5D13-1F9A-444C-A27E-3B98E268D9FE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd moinedit
        moinedit -c
      :input: document
058B2171-37BF-4092-A28C-241AD16985D2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.active4d
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: New Circuit
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :super
      :uuid: 058B2171-37BF-4092-A28C-241AD16985D2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: /usr/bin/env ruby "${TM_BUNDLE_SUPPORT}/bin/new_circuit.rb"
      :input: selection
60838383-D23C-465B-9414-A1EC148F6D1D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Init
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 60838383-D23C-465B-9414-A1EC148F6D1D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_HG:=hg}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        cd "$TM_PROJECT_DIRECTORY"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	hg = ENV['TM_HG'] || "hg"
        	output = puts %x{#{hg} init}
        	puts output
        END
        
        # will cause current file to be re-loaded
        rescan_project
      :input: none
310C901C-EF32-4E88-938A-804ABBF8C428: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Dump DB to schema.rb
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 310C901C-EF32-4E88-938A-804ABBF8C428
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:schema:dump

      :input: none
2E0F350A-7B23-11D9-B084-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc, source.objc++, (source.objc support | source.objc++ support) - support.function.any-method
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 2E0F350A-7B23-11D9-B084-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "doc_path=\"/Developer/ADC Reference Library/documentation/Cocoa/Reference\"\n\
        doc_path2=\"/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference\"\n\n\
        if [[ -d \"$doc_path2\" ]]; then\n\
        \tdoc_path=$doc_path2\n\
        fi\n\n\
        word=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\n\n\
        # first check our doc_references.txt\n\
        reference=$(zgrep -w \"^$word\" \"$TM_BUNDLE_SUPPORT/doc_references.txt.gz\"|cut -f2)\n\
        if [[ -n \"$reference\" ]]; then\n\
        \tfile=\"$doc_path/$reference\"\n\
        \t[[ -f \"${file%#*}\" ]] && exit_show_html \"<meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'>\"\n\
        fi\n\n\
        # then see if there's a file named after the word (class)\n\
        folders=( \"Foundation\" \"ApplicationKit\" \"WebKit\" )\n\
        for (( i = 0; i < ${#folders[@]}; i++ )); do\n\
        \tfile=\"$doc_path/${folders[$i]}/ObjC_classic/Classes/$word.html\"\n\
        \t[[ -f \"$file\" ]] && exit_show_html \"<meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'>\"\n\
        done\n\n\
        # then see if there's a file named after the class in Xcode 2.3 or later\n\
        folders=( \"Foundation\" \"ApplicationKit\" \"WebKit\" )\n\
        for (( i = 0; i < ${#folders[@]}; i++ )); do\n\
        \tfile=\"$doc_path/${folders[$i]}/Classes/${word}_Class/index.html\"\n\
        \t[[ -f \"$file\" ]] && exit_show_html \"<meta http-equiv='Refresh' content='0;URL=tm-file://${file// /%20}'>\"\n\
        done\n\n\
        # finally try man (PolyglotMan)\n\
        try_man () {\n\
        \tRMAN='/Library/Application Support/Apple/Developer Tools/Plug-ins/DocViewerPlugIn.xcplugin/Contents/Resources/rman'\n\
        \tif [[ -x \"$RMAN\" ]] && man -w \"$word\" &>/dev/null; then\n\
        \t\tpage=$(\"$TM_SUPPORT_PATH/bin/html_man.sh\" -a \"$word\")\n\
        \t\techo \"<meta http-equiv='Refresh' content='0;URL=tm-file://$page'>\"\n\
        \t\texit_show_html\n\
        \tfi\n\
        }\n\n\
        MANSECT=${MANSECT:-2:3:4:5:6:7:8:9} try_man\n\
        try_man\n\n\
        echo \"Couldn\xE2\x80\x99t find documentation for \xE2\x80\x9C${word}\xE2\x80\x9D\"\n"
      :input: none
11D4D7C2-7665-11D9-B58C-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Working Copy (BASE)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 11D4D7C2-7665-11D9-B58C-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        #!/usr/bin/env ruby -w
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/svn_diff"
        
        Subversion::diff_active_file('BASE', "Diff With Working Copy")
        END
      :input: none
CB5FA82C-1287-4312-9407-E695AF16D966: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: start
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: CB5FA82C-1287-4312-9407-E695AF16D966
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # Use this for a simple solution..
        RESPONSE=`exec osascript <<EOF | tr "\r" "\n"
         	
         	--To be asked for your password each time then use:
         	do shell script "apachectl start" with administrator privileges
         	
         	--To skip password vaildation then change this... not for the security conscious.
         	--do shell script "apachectl start" password "the_password" with administrator privileges
         	
        EOF`
         
        echo $RESPONSE
        
        # Otherwise, to store your password in the Keychain check this script in the Bundle Support folder.
        #
        # To use the Keychain to store the admin password then open /Applications/Utilities/Keychain Access.app
        # Add a new keychain called "TextMate" 
        # Add a Key with the name "ApacheBundle" to the new Keychaing then store your admin password in it.
        
        #"${TM_BUNDLE_SUPPORT}/apachectlUsingKeychain.sh" start
      :input: none
1EA6E877-4B4E-44EC-9118-9295A0F1432D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Build CM
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :control
      :uuid: 1EA6E877-4B4E-44EC-9118-9295A0F1432D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SML:=sml}"
        echo "CM.make \"sources.cm\";"|"$TM_SML"|pre
      :input: none
253F6CF9-0E14-48C8-8468-005018E4E301: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: With Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :control
      :uuid: 253F6CF9-0E14-48C8-8468-005018E4E301
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        lines = STDIN.read.gsub(/\$/,"\\$").split("\n")
        currentTab = lines[0].scan(/^\s*/)[0]
        unless ENV['TM_SOFT_TABS'] == "YES" then
        	extraTab = "\t"
        else
        	extraTab = (" " * ENV['TM_TAB_SIZE'].to_i)
        end
        print lines.map{|i| extraTab + i}.unshift(currentTab + "project $0").push(currentTab + "end").join("\n") + "\n"
      :input: selection
2DDB6FE0-6111-4C40-A149-8E67E76F8272: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby comment
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Typewriter
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: k
        modifiers: 
        - :super
      :uuid: 2DDB6FE0-6111-4C40-A149-8E67E76F8272
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        s = STDIN.read
        case s
        when /^\w+$/
          print "+#{s}+$0"
        when ""
          print "+$1+$0"
        else
          print "<tt>#{s}</tt>"
        end
      :input: selection
1A12B844-4074-4655-A45C-18AC8D943267: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Package
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 1A12B844-4074-4655-A45C-18AC8D943267
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # View documentation for Latex package
        # take advantage of the texdoctk index as well as the texdoc catalog directory.
        . "${TM_SUPPORT_PATH}/lib/html.sh"
        . "${TM_SUPPORT_PATH}/lib/webpreview.sh"
        
        M=${TM_LATEX_MASTER:=$TM_FILEPATH}
        DIR=`dirname "$M"`
        FILE=`basename "$M"`
        
        TEXDOCTKDB=`kpsewhich --progname=texdoctk --format='other text files' texdoctk.dat`
        export TEXDOCTKDB
        
        TMTEXMAIN=`kpsewhich --expand-path '$TEXMFMAIN'`
        export TMTEXMAIN
        
        # May need to add more lines to accomodate different tex distros.
        [ -z $TM_LATEX_DOCBASE ] && TM_LATEX_DOCBASE=`kpsewhich --expand-path '$TEXMFTE'`   # teTeX
        [ -z $TM_LATEX_DOCBASE ] && TM_LATEX_DOCBASE=`kpsewhich --expand-path '$TEXMFTL'`   # gwTeX 
        [ -z $TM_LATEX_DOCBASE ] && TM_LATEX_DOCBASE=`kpsewhich --expand-path '$TEXMFDOCDIR'`  # TeXLive
        export TM_LATEX_DOCBASE
        
        TM_LATEX_HELP_CATALOG=`find $TMTEXMAIN/../ -name entries -print`
        export TM_LATEX_HELP_CATALOG
        
        TMTEXDOCDIRS=`kpsewhich --expand-path '$TEXDOCS'`
        export TMTEXDOCDIRS
        
        # Switch to the right directory.
        cd "$TM_PROJECT_DIRECTORY"
        cd "$DIR"
        
        html_header 'Package Documentation'
        echo '<p><small>Hint: Cursor on package name shows doc for package.  Otherwise show package doc browser.</small></p>'
        PyTeXdoc.py
      :input: none
4FC43675-E2B2-44AA-9EBC-AE2467D1D206: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Undo State Change
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4FC43675-E2B2-44AA-9EBC-AE2467D1D206
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: u
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python
        import sys, os
        
        oldtask = os.environ['TM_CURRENT_LINE']
        if (oldtask[0] != "+") and (oldtask[0] != "^"):
        	sys.stdout.write("-  " + oldtask[3:])
        else:
            sys.stdout.write(oldtask)
      :input: selection
F41366B2-C373-11D9-8A81-000A95BCAFA8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add to Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :alt
        - :control
      :uuid: F41366B2-C373-11D9-8A81-000A95BCAFA8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVK:=svk}" "If you have installed svk, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVK</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:=ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	svk = ENV['TM_SVK'] || "svk"
        	puts %x{#{svk} add #{TextMate.selected_paths_for_shell}}
        END
      :input: none
245B2739-B3C5-4BBD-9772-C97C3C790BB6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.sql
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Current Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 245B2739-B3C5-4BBD-9772-C97C3C790BB6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby -wKU
        
        require ENV['TM_BUNDLE_SUPPORT'] + '/bin/db_browser_lib.rb'
        
        options = OpenStruct.new
        get_connection_settings(options)
        
        if options.server == 'mysql'
          url = "http://dev.mysql.com/#{ENV['TM_CURRENT_WORD'].downcase}"
        elsif options.server == 'postgresql'
          url = "http://www.postgresql.org/docs/current/static/sql-#{ENV['TM_CURRENT_WORD'].downcase}.html"
          if `curl --silent -I "#{url}" | grep '200 OK'`.empty?
            url = "http://search.postgresql.org/search?q=#{ENV['TM_CURRENT_WORD'].downcase}"
          end
        end
        puts "<script>window.location='#{url}'</script>"
      :input: none
827E8A23-2C7A-4BDD-987F-A3B67B51F239: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.xml.plist, source.plist.binary
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert to Old-Style ASCII
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 827E8A23-2C7A-4BDD-987F-A3B67B51F239
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if [[ -f "$TM_FILEPATH" ]] && [ $(grep -ao "^......" "$TM_FILEPATH"|head -n1) == "bplist" ]
           then plutil -convert xml1 -o >(cat) "$TM_FILEPATH"|pl
           else pl
        fi
      :input: document
412481DC-89B7-11D9-9FE3-000A9584EC8C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 412481DC-89B7-11D9-9FE3-000A9584EC8C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if grep <<<${TM_CURRENT_WORD:-!} -Esq '^[a-zA-Z0-9_]+$'
        	then
        		if URL=`grep -i "^$TM_CURRENT_WORD=" "$TM_BUNDLE_SUPPORT/documentation.txt"`
        			then
        				URL=${URL:${#TM_CURRENT_WORD}+1}
        			else
        				URL="function.${TM_CURRENT_WORD//_/-}"
        		fi
        		if [[ "$PHP_MANUAL_LOCATION" ]]
        			then
        				if [[ ! -d "$PHP_MANUAL_LOCATION" ]]
        					then
        						exit_show_tool_tip "Your PHP_MANUAL_LOCATION directory ($PHP_MANUAL_LOCATION) does not exist. See the bundle Help for setup instructions."
        				fi
        				if [[ ! -f "$PHP_MANUAL_LOCATION/$URL.html" ]]
        					then
        						exit_show_tool_tip "No documentation found for '$TM_CURRENT_WORD'"
        				fi
        				URL="file://$PHP_MANUAL_LOCATION/$URL.html"
        			else URL="http://php.net/manual/en/$URL.php"
        		fi
        		exit_show_html "<meta http-equiv='Refresh' content='0;URL=$URL'>"
        	else echo "Nothing to lookup (hint: place the caret on a function name)"
        fi
      :input: none
122E10C1-DFA2-4A9E-9B17-8EBFA6E10CC7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.function.objc
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Reformat Method Signature
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
      :uuid: 122E10C1-DFA2-4A9E-9B17-8EBFA6E10CC7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        text = STDIN.read
        
        text.gsub!(/(\([^\)]+)\s+(\*\))/, '\1\2')
        
        offset_to_first_colon = text.index(':')
        
        argument_triplets = text.scan /(.+?):\s*\((.+?)\)\s*([^\s]*)\s*/
        
        print(argument_triplets.collect do |triplet|
        	sprintf "%#{offset_to_first_colon}s:(%s)%s", triplet[0], triplet[1], triplet[2]
        end.join("\n"))
        
        print $1 if text.match /(\n+)\z/
      :input: selection
5928BD4D-E6E6-49F3-ADFE-518FC4E663A7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: List
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 5928BD4D-E6E6-49F3-ADFE-518FC4E663A7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: "-"
      :capture_pattern: 
      :command: |-
        if test -z "$TM_SELECTED_TEXT"; then
        	echo	
        	echo "- Item 1"
        	echo "- Item 2"
        	echo "-"
        else
        	echo "$TM_SELECTED_TEXT" | sed 's/^/- /'
        fi
      :input: selection
39A74FF2-46EF-4178-9E3A-7D4DB3968E05: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown markup.list
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Change Style
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "*"
        modifiers: 
        - :control
      :uuid: 39A74FF2-46EF-4178-9E3A-7D4DB3968E05
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        $: << ENV['TM_BUNDLE_SUPPORT']
        $: << ENV['TM_SUPPORT_PATH']
        
        require 'lib/markdown'
        require 'lib/escape'
        
        # get the list itself
        listtxt = $stdin.read()
        list = Markdown::List.parse(listtxt)
        
        # now we need to figure out where we were when we hit enter
        offsetline = ENV['TM_LINE_NUMBER'].to_i() - ENV['TM_INPUT_START_LINE'].to_i()
        index = ENV['TM_LINE_INDEX'].to_i()
        
        list.get_entry(offsetline) do |e, l, n|
        	l.numbered = !l.numbered
        end
        print list.to_s()

      :input: selection
86BCD309-37C2-4978-B332-EC91AEF70340: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show Symbol
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 86BCD309-37C2-4978-B332-EC91AEF70340
      :disable_output_auto_indent: 
      :bundle_uuid: E3BADC20-6B0E-11D9-9DC9-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env python
        import sys
        import re
        import os
        
        re_symbol = re.compile(r"^(\s*)(?:class|def)\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*[\:\(]")
        tm_line_num = int(os.environ['TM_LINE_NUMBER'])
        line_num = 0
        
        symbols = []
        for line in sys.stdin:
            line_num += 1
            m = re_symbol.search(line)
            if m:
                ws, name = m.groups()
                ws_len = len(ws.expandtabs())
                while symbols and symbols[-1][0] >= ws_len:
                    symbols.pop()
                symbols.append((ws_len, name))
            if line_num == tm_line_num:
                break
        
        symbol = '.'.join([t[1] for t in symbols])
        print symbol
      :input: document
59B2BA17-0CA5-47B6-9915-FD962855F639: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Daily Archive
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 59B2BA17-0CA5-47B6-9915-FD962855F639
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\" -a=d"
      :input: document
8085013F-8DEA-11D9-B421-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Add Line Numbers to Document / Selection
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 8085013F-8DEA-11D9-B421-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: cat -n|expand -8
      :input: selection
F9CD7A8F-9EE9-483B-86BE-12D576AFC036: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy Scope
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
        - :super
      :uuid: F9CD7A8F-9EE9-483B-86BE-12D576AFC036
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: tr <<< "$TM_SCOPE" ' ' '\n'|pbcopy
      :input: none
5A9C9F8A-99E8-451D-BC0C-B5C2A8A9A45E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Manage GM_Values
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 5A9C9F8A-99E8-451D-BC0C-B5C2A8A9A45E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.manage_gm_values
      :input: document
381FFB1B-0CAE-40AC-A228-B575C6E1C1C4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Replace Selected HEX Color (Every Occurrence)
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 381FFB1B-0CAE-40AC-A228-B575C6E1C1C4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        "${TM_RUBY:-ruby}" "$TM_BUNDLE_SUPPORT/replace_colors.rb"

      :input: selection
9B13543F-8356-443C-B6E7-D9259B604927: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Encrypt Line / Selection (ROT 13)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "&"
        modifiers: 
        - :super
      :uuid: 9B13543F-8356-443C-B6E7-D9259B604927
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        def e_js(str)
          str.gsub(/(?=[\\"])/, '\\').gsub(/\n/, '\n').gsub(/[@.\/]/) { |ch| sprintf('\\%03o', ch[0]) }
        end
        
        def rot_13(str)
          str.tr('A-Za-z', 'N-ZA-Mn-za-m')
        end
        
        print %{<script type="text/javascript">document.write(
        "#{e_js(rot_13(STDIN.read))}".replace(/[a-zA-Z]/g, function(c){return String.fromCharCode((c<="Z"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);}));
        </script>}

      :input: selection
37113D20-778A-11D9-B053-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Blame
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 37113D20-778A-11D9-B053-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "$TM_SVN" blame -v "$TM_FILEPATH" 2>&1 \
        |"${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/format_blame.rb"
      :input: none
948DDCF2-0EB5-46A3-B970-09597D268BAF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex meta.function.environment
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: New Item
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Aw==

        modifiers: []

      :uuid: 948DDCF2-0EB5-46A3-B970-09597D268BAF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        #
        # Produces the right enumeration command for each environment.
        # For instance in a itemize environment, will produce \item
        # while in a questions environment will produce \question
        #
        linesbefore = ENV['TM_LINE_NUMBER'].to_i-1
        columns = ENV['TM_COLUMN_NUMBER'].to_i-1
        textArray = STDIN.readlines
        myStr = textArray[0..linesbefore-1].join
        myStr << textArray[linesbefore].slice(0..columns-1)
        theArray = Array.new
        theRegexp = Regexp.new('(\\\begin\{|\\\end\{)(\w+[*]?)(\})')
        toInsertNoBeamer = { "itemize" => "\\item $1", "enumerate" => "\\item $1", "description" => "\\item[${1:label}] ${2:description}", "parts" => "\\part $1", "questions" => "\\question $1" }
        toInsertBeamer = { "itemize" => "\\item<${1:+-}> $2", "enumerate" => "\\item<${1:+-}> $2", "description" => "\\item<+->[${1:label}] ${2:description}" }
        toInsert = /beamer/.match(ENV['TM_SCOPE'].to_s) ? toInsertBeamer : toInsertNoBeamer
        results = myStr.scan(theRegexp)
        if (results)
          results.each{|e|
            if (e[0] == "\\begin\{")
              theArray << e[1]
            elsif (e[0] == "\\end\{")
              if (theArray.last == e[1])
                theArray.pop
              else
                puts("Badly nested begin-end blocks")
                exit 1
              end
            else
              puts("Problem:",e[0])
              exit 1
            end
          }
          envName = theArray.pop
          str_to_add = "\n"
          if (/\\begin\{/.match(textArray[linesbefore]))
            str_to_add << "\t"
          end
          if (toInsert.has_key?(envName))
            str_to_add << toInsert[envName]
          elsif ["cases","align","aligned","gather","gathered","split"].include?(envName)
            str_to_add = "\\\\\\\\" + str_to_add
          else
            str_to_add << "\\item "
          end
          print str_to_add
        else
          print("\n")
        end
      :input: document
61F92184-1A50-4310-9F75-C9CD2C8819FA: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Install \xE2\x80\x9CEdit in TextMate\xE2\x80\x9D\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 61F92184-1A50-4310-9F75-C9CD2C8819FA
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Install \xE2\x80\x9CEdit in TextMate\xE2\x80\xA6\xE2\x80\x9D\"\n\n\
        SRC=\"$(ruby -r\"$TM_SUPPORT_PATH/lib/textmate.rb\" -e 'print TextMate.app_path')/Contents/Resources/Edit in TextMate\"\n\n\
        # check if we have the input manager in TextMate.app\n\
        [[ ! -d \"$SRC\" ]] && { echo \"<h2>Error</h2><p>The input manager (<tt>$SRC</tt>) was not found in the TextMate application bundle.<p>You may need a newer version of TextMate.\"; exit; }\n\n\
        # javascript which creates the link (by calling out to the shell)\n\
        cat <<HTML\n\
        <script>\n\
        function installInputManager () {\n  var cmd = TextMate.system(\n    \"{ mkdir -p ~/Library/InputManagers\" +\n    \" && ln -s '$SRC' ~/Library/InputManagers\" +\n    \" && echo '<strong>Success!</strong> Link to <tt>$SRC</tt> created in <tt>~/Library/InputManagers</tt>.'; } 2>&1\", null);\n  var res = document.getElementById(\"result\");\n  res.innerHTML = \"<p>\" + cmd.outputString + \"</p>\";\n\
        }\n\
        </script>\n\
        HTML\n\n\
        # documentation which links to the script above\n\
        \"$TM_SUPPORT_PATH/lib/markdown_to_help.rb\" <<\"MARKDOWN\"\n\
        # Intro\n\n\
        Included with TextMate is an input manager which can add an \xE2\x80\x9CEdit in TextMate\xE2\x80\x9D menu item to the Edit menu of other applications.\n\n\
        This allow you to call upon TextMate to edit the text in the current web form (Safari) or current letter that you are writing (Mail) by pressing &#x2303;&#x2318;E and when done editing the text in TextMate, press &#x2318;S + &#x2318;W to save, close, and have focus (plus edited text) return to the application from which you invoked the Edit in TextMate action.\n\n\n\
        # Installation\n\n\
        The Input Manager is preferably installed by creating a symbolic link in `~/Library/InputManagers` which point to the location of the input manager (inside the TextMate application bundle).\n\n\
        You can create this link by using the button below.\n\n\
        <div id=\"result\"><input type=\"Button\" value=\"Create Symbolic Link\" onClick=\"installInputManager();\"></div>\n\n\
        _After creating the link you need to relaunch the applications in which you want to test the functionality (e.g. Mail, Safari, \xE2\x80\xA6)_\n\n\n\
        # Excluding Applications\n\n\
        If you do not want the menu item to appear in a certain application, you can set the `DisableEditInTextMateMenuItem` defaults key to `1` for that application.\n\n\
        For example to disable the menu item for `Console` we would do:\n\n\
        \tdefaults write -app Console DisableEditInTextMateMenuItem 1  \n\n\
        We can also disable it for all applications using:\n\n\
        \tdefaults write NSGlobalDomain DisableEditInTextMateMenuItem 1   \n\n\n\
        # File Type Mapping\n\n\
        When you initiate editing from an application, the temporary file used will have the application name as extension. For example if you call it from Mail then the extension will be `mail`. Based on this, TextMate will pick the proper language grammar, and if not, you can correct it, which will then stick to that extension.\n\n\
        When you call it from a browser, the URL of the page is often indicative of the type you will be editing, for example if the URL is <http://macromates.com/blog/> then you are most likely editing a comment on the blog, which is in Markdown, thus TextMate should pick that syntax.\n\n\
        For this reason, the service reads a configuration file which maps URL fragments to a file extension that will be used for the temporary file. This only works for WebKit based browsers (e.g. OmniWeb and Safari).\n\n\
        The file is read as:\n\n\
        \t~/Library/Preferences/com.macromates.edit_in_textmate.plist\n\n\
        Here is an example file:\n\n    {  URLAssociations = {\n          'mail.google.com/'                  = mail;\n          'macromates.com/blog/'              = markdown;\n          'macromates.com/wiki/'              = markdown;\n          'blacktree.cocoaforge.com/forums/'  = bbcode;\n       };\n    }\n\n\
        If multiple URL fragments match the current URL, the longest match wins.\n\n\n\
        # Custom Key Bindings\n\n\
        You can use System Preferences &#x2192; Keyboard & Mouse to change the default key equivalent. This however only works as long as the key binding includes the command modifier (&#x2318;). If you want to give it a key that does not include this modifier, you can add an entry to your `~/Library/KeyBindings/DefaultKeyBinding.dict` with the action method set to `editInTextMate:`. With this key binding, you do not need to have the menu item (so you can disable that in the global domain).\n\n\
        For example I have the following line in my `DefaultKeyBinding.dict`:\n\n\
        \t\"^E\" = \"editInTextMate:\";\n\n\
        This puts the action on &#x2303;&#x21E7;E.\n\n\n\
        # Compatibility\n\n\
        The input manager works by adding a category to `NSTextView` and `WebView` (which is used by Mail to edit text). So it will only work for Cocoa applications (and those which use these controls).\n\n\
        Previously the functionality was provided by a Service, but the synchronous nature of services, and the need to select text first, made it less than ideal.\n\n\
        Generally the input manager approach works better, but it is a hack, so e.g. if you call upon the Edit in TextMate action and close the window which held the text, or was calling the service from the field editors text view and advance focus, before the text has been returned, do not be surprised if the text does not show up in the proper text view.\n\n\
        That said, it should be rather robust, and you can even call \xE2\x80\x9CEdit in TextMate\xE2\x80\x9D from within TextMate (in its Cocoa text views used e.g. in the Bundle Editor).\n\n\n\
        # Source Code\n\n\
        The source code for the input manager is available here: <http://macromates.com/svn/Bundles/trunk/Tools/Edit%20in%20TextMate/>\n\n\
        MARKDOWN\n\n\
        html_footer"
      :input: none
07C696F8-79F5-4E0B-9EE9-03B693A54ABB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Migrate to Version ...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 07C696F8-79F5-4E0B-9EE9-03B693A54ABB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        
        # Find the current version number from the schema.rb file
        export CURRENT=`grep 'Schema\.define' "$TM_PROJECT_DIRECTORY/db/schema.rb" | ruby -e 'print $stdin.read.scan(/\d+/).first'`
        
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:migrate -q "Migrate to which version? (Current version: $CURRENT)" -v VERSION

      :input: none
1DB2A2E8-5E25-4442-9DE1-335E09854C9F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c++.qt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Class
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 1DB2A2E8-5E25-4442-9DE1-335E09854C9F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: qclass
      :capture_pattern: 
      :command: ${TM_RUBY:-ruby} "$TM_BUNDLE_SUPPORT/bin/insert_class.rb"
      :input: none
F4884C32-9046-48E8-AB57-1784AF8C264C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.gtdalt
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Current Actions
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "0"
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: F4884C32-9046-48E8-AB57-1784AF8C264C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/GTD.rb'
        include GTD
        objects = GTD.process_directory
        acts = objects.map{|o| o.actions}.flatten
        acts.sort! do |a,b|
          da, db = *[a.due, b.due].map {|i| i || ""}  # convert nils to empty strings
        #  puts a,b, da, db
          if a.context == b.context then
            if da == db then
              a.parent.name <=> b.parent.name
            else
              da <=> db
            end
          else
            a.context <=> b.context
          end
        end
        pr = Printer.new
        b = <<HTML
        <html>
          <head>
            <link rel="stylesheet" href="tm-file://#{ENV['TM_SUPPORT_PATH']}/css/default.css" type="text/css" media="screen" title="no title" charset="utf-8" />
            <link rel="stylesheet" href="tm-file://#{ENV['TM_BUNDLE_SUPPORT']}/css/sidebar.css" type="text/css" media="screen" title="no title" charset="utf-8" />
            <script src="tm-file://#{ENV['TM_BUNDLE_SUPPORT']}/js/sidebar.js" type="text/javascript" charset="utf-8"></script>
            <script src="tm-file://#{ENV['TM_BUNDLE_SUPPORT']}/js/sorttable.js" type="text/javascript" charset="utf-8"></script>
            <style type="text/css">
              .nobr {white-space: nowrap}
            </style>
          </head>
          <body>
            <body class="">
          <ul id="toggles">
            <p>Next Actions Only <input type="checkbox" name="next-show" value="" id="next-show-button"></p>
            <li class="collapse" tablecolumn="0">Contexts</li>
            <li class="collapse" tablecolumn="2">Projects</li>
            <li class="collapse" tablecolumn="3">Files</li>
          </ul>
        HTML
        e = <<HTML
          </body>
        </html>
        HTML
        pr.raw b
        pr.table do
          pr.title "List of all Actions"
          pr.headers([ "Context", "Action", "Project", "File" , "Due by","Completed"])
          acts.each do |a|
            proj = a.parent.link
            due = case a.due
              when "",nil
                ""
              when DateLate
                "<span style=\"color:red\">#{a.due}</span>"
              else
                a.due
            end
            note_part = (a.note != "") ? " title=\"#{a.note}\"" : ""
            text = "<a href=\"#{a.txmt}\"#{note_part}>#{a.name}</a>"
            if a.is_next_action?
              pr.row_next([a.context, text, proj, a.root.link , "<span class=\"nobr\">#{due}</span>", a.mark_completed_link])
            else
              pr.row([a.context, text, proj, a.root.link , "<span class=\"nobr\">#{due}</span>", a.mark_completed_link])
            end
          end
        end
        pr.raw e
        puts pr.to_html
      :input: none
C7B74C19-5DB5-47A1-A148-3A1019EF4D96: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.lua
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Script (Terminal)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: C7B74C19-5DB5-47A1-A148-3A1019EF4D96
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/bin/bash
        [[ -z "$TM_FILEPATH" ]] && TM_TMPFILE=$(mktemp -t pythonInTerm)
        : "${TM_FILEPATH:=$TM_TMPFILE}"; cat >"$TM_FILEPATH"
        
        : ${TM_LUA:=lua}
        require_cmd "$TM_LUA"
        
        esc () {
        STR="$1" ruby <<"RUBY"
           str = ENV['STR']
           str = str.gsub(/'/, "'\\\\''")
           str = str.gsub(/[\\"]/, '\\\\\\0')
           print "'#{str}'"
        RUBY
        }
        
        osascript <<- APPLESCRIPT
        	tell app "Terminal"
        	    launch
        	    activate
        	    do script "clear; cd $(esc "${TM_DIRECTORY}"); $(esc "${TM_LUA}") $(esc "${TM_FILEPATH}"); rm -f $(esc "${TM_TMPFILE}")"
        	    set position of first window to { 100, 100 }
        	end tell
        APPLESCRIPT
        
      :input: document
A72C1A66-38B4-4DB5-8C82-0F4E522E31A7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.remind
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: A72C1A66-38B4-4DB5-8C82-0F4E522E31A7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # show this month's calendar
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Remind bundle Help" "Remind"
        
        Markdown.pl <<'MARKDOWN'
        
        ## Intro
        
        [Remind][] is a calendar/reminder shell command which takes as input your calendar file (which is written in a simple plain text format) and outputs upcoming events.
        
        On Mac OS X Remind is useful with something like [GeekTool][] (get the [unofficial branch][GTBranch]) which allows you to setup a shell command to run periodically and have its output shown nicely on your desktop.
        
        [Remind]: http://www.roaringpenguin.com/penguin/open_source_remind.php
        [GeekTool]: http://projects.tynsoe.org/en/geektool/
        [GTBranch]: http://www.jaw.it/pages/en/x_misc.html
        
        ## Installing `remind`
        
        You can download Remind from [MacPorts](http://macports.org/) by using:
            
            sudo port install remind
        
        ## This Bundle
        
        This bundle offers a language grammar for your `~/.reminders` file, a few useful snippets, and commands to show upcoming events or a calender for this week/month.
        
        MARKDOWN
        
        html_footer

      :input: none
505FE1E0-237F-460F-B9E7-9F05A9B7E85C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: LaTeX
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 505FE1E0-237F-460F-B9E7-9F05A9B7E85C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t tex "$TM_FILEPATH"
      :input: none
8BEF616A-19A7-4AE2-AC59-B812BF701269: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: ctrl-shift-4
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 8BEF616A-19A7-4AE2-AC59-B812BF701269
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd ${TM_PROJECT_DIRECTORY}
        "${TM_RUBY:=ruby}" <<'EOF'
        
        num = 4
        
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" --check`
        if($? == 0)
          print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`
          exit()
        end
        
        output = `CocoaDialog inputbox --title Input --informative-text 'What command should be run?' --button1 Record --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        # update the command
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" -u '#{output[1].strip.gsub(/'/, '\\\\1')}'`
        
        # run the command
        print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`

      :input: none
FC6E6F47-45DC-4255-A6D9-704161A8069C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin markup.heading
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Decrease Heading Level
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "["
        modifiers: 
        - :super
      :uuid: FC6E6F47-45DC-4255-A6D9-704161A8069C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe 's/^(\s*)(={1,4})([^=].*[^=])\2$/$1$2=$3$2=/'
      :input: selection
151706D2-A274-4036-8CC0-837B838BAED5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Open Config for Current User
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 151706D2-A274-4036-8CC0-837B838BAED5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        open -a TextMate "/private/etc/httpd/users/$USER.conf"

      :input: none
6E8B4CDA-07CD-4BFA-ABFE-5ABA14F35B8A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Decimal to Hex
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :control
      :uuid: 6E8B4CDA-07CD-4BFA-ABFE-5ABA14F35B8A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: bc <<<"obase=16;$(cat)"|tr -d \\n
      :input: selection
DA9B35AF-938D-4166-8576-E8E3C73F0739: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.objc meta.scope.implementation, source.objc++ meta.scope.implementation
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Insert Call to Super
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DA9B35AF-938D-4166-8576-E8E3C73F0739
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: super
      :capture_pattern: 
      :command: |
        # Inserts a [super method] call suitable for the current method.
        # Inserted as a snippet with the incoming arguments used as defaults.
        #
        # The default behavior is to add brackets if there is no "[" to the left
        # of the caret (ignoring the tab trigger). This can be changed by changing
        # from "automatic" to one of "always" and "never". The last argument
        # is appended at the end of the result (some prefer the empty string, others
        # a semicolon.
        #
        # The command uses heuristics to find which method implementation is
        # being edited. It should be reasonably tolerant to various coding styles,
        # including different bracket and indentation styles.
        
        python "${TM_BUNDLE_SUPPORT}/insert_super.py" automatic ''
        #python "${TM_BUNDLE_SUPPORT}/insert_super.py" always ';'

      :input: document
2263B3B6-8D09-4B98-B056-3DF129226C78: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: string.quoted.double.application-name.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Application
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 2263B3B6-8D09-4B98-B056-3DF129226C78
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        read appname
        osascript <<-APPLESCRIPT
        	tell app "Script Editor"
        	    launch
        	    activate
        	    open path to application ${appname}
        	end tell
        APPLESCRIPT
      :input: selection
46E15B5C-A621-48E5-AD2B-A893532695A6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Pull from default repo
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 46E15B5C-A621-48E5-AD2B-A893532695A6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_HG:=hg}" "If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)"
        
        if [[ -d "$TM_PROJECT_DIRECTORY" ]]
           then export WorkPath="$TM_PROJECT_DIRECTORY"; cd "$TM_PROJECT_DIRECTORY"
           else export WorkPath="$TM_DIRECTORY"
        fi
        
        export TM_HG
        
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        "${TM_RUBY:-ruby}" -- "${TM_BUNDLE_SUPPORT}/hg_pull.rb"

      :input: none
DF784C33-74D7-11D9-813D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Diff With Newest (HEAD)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: DF784C33-74D7-11D9-813D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" <<'END'
        #!/usr/bin/env ruby -w
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/svn_diff"
        
        Subversion::diff_active_file('HEAD', "Diff With Newest")
        END

      :input: none
9460A02A-EC2A-4A03-9F99-21201D7B7988: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.apache-config
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tail Error Log
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 9460A02A-EC2A-4A03-9F99-21201D7B7988
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #This script will open a terminal window and then attempt to tail the default apache error_log
        
        openTerminalWindow=`exec osascript <<EOF | tr "\r" "\n"
        tell application "Terminal"
        	activate
        	with timeout of 1800 seconds
        		do script with command "tail -f /var/log/httpd/error_log"
        		tell window 1
        			set title displays shell path to false
        			set title displays window size to false
        			set title displays device name to true
        			set title displays file name to true
        			set title displays custom title to true
        			set custom title to "httpd Error Log"
        			set number of columns to 80
        			set number of rows to 20
        		end tell
        	end timeout
        end tell
        EOF`
      :input: none
36925E11-3A1B-4040-9A6E-629ABD7200D9: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Uninstall Script\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 36925E11-3A1B-4040-9A6E-629ABD7200D9
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        require "#{ENV['TM_BUNDLE_SUPPORT']}/greasemonkey.rb"
        Greasemonkey.new.uninstall_script
      :input: document
898151BC-D897-47DC-AF8A-9E2DB6A25AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Bold
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 898151BC-D897-47DC-AF8A-9E2DB6A25AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        $: << ENV['TM_SUPPORT_PATH'] + '/lib'
        require 'escape'
        def esc(str)
          e_sn(str).gsub(/\}/, '\\}') # escaping inside a placeholder
        end
        
        s = STDIN.read
        if s.empty? then
          print "**$1**"
        elsif s =~ /^\*{2}(.*)\*{2}$/ then
          print "${1:#{esc $1}}"
        elsif ENV.has_key? 'TM_SELECTED_TEXT'
          print "${1:**#{esc s}**}"
        else
          print "**#{e_sn s}**"
        end
      :input: selection
880EE1CB-04F8-4944-946B-281BCD0B71B0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Fetch Document [URL From Safari]
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 880EE1CB-04F8-4944-946B-281BCD0B71B0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd moinedit
        require_cmd mate
        mate "$(moinedit -e)"
      :input: none
5CFF88D2-658D-4E81-9FCA-45673D3E74DD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: ctrl-shift-3
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "#"
        modifiers: 
        - :control
      :uuid: 5CFF88D2-658D-4E81-9FCA-45673D3E74DD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd ${TM_PROJECT_DIRECTORY}
        "${TM_RUBY:=ruby}" <<'EOF'
        
        num = 3
        
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" --check`
        if($? == 0)
          print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`
          exit()
        end
        
        output = `CocoaDialog inputbox --title Input --informative-text 'What command should be run?' --button1 Record --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        # update the command
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" -u '#{output[1].strip.gsub(/'/, '\\\\1')}'`
        
        # run the command
        print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`

      :input: none
4A4BCD2A-C90D-4F5B-90A5-3C1B4208FBD6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.context-free
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Render in Context Free
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 4A4BCD2A-C90D-4F5B-90A5-3C1B4208FBD6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        content () {
        	perl -pe 's/["\\]/\\$&/g'
        }
        
        osascript <<-APPLESCRIPT
        	tell application "Context Free" to activate
        	menu_click({"Context Free", "File", "New"})
        	tell app "System Events"
        		set value of ((process "Context Free")'s (window 1)'s (splitter group 1)'s (group 1)'s (scroll area 1)'s (text area 1)) to "$(content)"
        	end tell
        	menu_click({"Context Free", "Render", "Render"})
        
        
        	-- Helper functions
        	on menu_click(mList)
        		local appName, topMenu, r
        		if mList's length < 3 then error "Menu list is not long enough"
        		set {appName, topMenu} to (items 1 through 2 of mList)
        		set r to (items 3 through (mList's length) of mList)
        		tell app "System Events" to my menu_click_recurse(r, ((process appName)'s (menu bar 1)'s (menu bar item topMenu)'s (menu topMenu)))
        	end menu_click
        	on menu_click_recurse(mList, parentObject)
        		local f, r
        		set f to item 1 of mList
        		if mList's length > 1 then set r to (items 2 through (mList's length) of mList)
        		tell app "System Events"
        			if mList's length is 1 then
        				click parentObject's menu item f
        			else
        				my menu_click_recurse(r, (parentObject's (menu item f)'s (menu f)))
        			end if
        		end tell
        	end menu_click_recurse
        
        APPLESCRIPT
      :input: selection
A108E6E4-317A-4883-B152-11A9E115BF1C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Active GTD List View
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
      :uuid: A108E6E4-317A-4883-B152-11A9E115BF1C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby  
        
        #!/usr/bin/ruby -w
        
        # To use this function, type the desired key followed by "Enter"
        #
        # Note - the search for the tab command will stop at the first match,
        # so put longer commands before shorter, e.g., tw before t.
        
        # Seems important
        require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
        
        # This is where the GTD files are kept
        $myPath = ENV['TM_DIRECTORY'] 
        tabCommand = ENV['TM_CURRENT_LINE']
        
        $contexts = [] #user defined contexts
        def readContexts(a)
          # processes contexts.gtd into script  
          context, tabCommand, tabString, regex, color = a.split(/\|/)
          $contexts.push({:context => tabCommand, :tabString => tabString})   
        end
        
        
        def reportContexts
          # a simple test
          $contexts.each do |tag|
            puts("Context: " + tag[:context])
            puts("tabCommand: " + tag[:tabCommand])
            puts("tabString: " + tag[:tabString])
            puts("Search String: " + tag[:regex])
            puts("Color: " + tag[:color])
            i = 0
            while i < tag[:tasks].length
              puts "Task: " + tag[:tasks][i]
              i = i + 1
            end
          end
        end
        
        def myParse tabCommand
          found = 0
          $contexts.each do |tag|
            re = tag[:context]
            if (tabCommand == re) # and (found == 0) 
              print tag[:tabString]
              found = 1
            end
          end
          #if found == 0 
          #  puts "failed"
          #end
        end
        
        
        # the contexts.gtd file is read, and converted into $contexts
        file = File.open($myPath+"/contexts.gtd", "r")
        file.each do |line|
          readContexts(line)
        end    
        
        myParse tabCommand
        require "erb"
        require "pp"
        include ERB::Util
        
        $myPath = ENV['TM_DIRECTORY'] 
        $tags = [] #user defined contexts
        
        def readContexts(a)
          # processes contexts.gtd into script  
          context, tabCommand, tabString, regex, color = a.split(/\|/)
          if (context != "+ DONE") and (context[0..1] != "<-") #and (context[0..1] != "* ")
            $tags.push({:label => context[3..-1], :regexp => regex, :color => color, :matches => []})  
          end 
        end
        
        
        def TextMate.file_link (file, line = 0)
          return "txmt://open/?url=file://" + $myPath + "/" +
            file.gsub(/[^a-zA-Z0-9.-\/]/) { |m| sprintf("%%%02X", m[0]) } +
            ".gtd&amp;line=" + line.to_s
        end
        
        # the contexts.gtd file is read, and converted into $contexts
        file = File.open($myPath+"/contexts.gtd", "r")
        file.each do |line|
          readContexts(line)
        end 
        
        # new feature - exclusion of selected files
        # this allows you to select which lists are included
        # in list views
        class ExList
          def initialize
            @values = []
          end
          def contains(test)
            found = true
            @values.each do |item|
              if test == item.chomp
                found = false
              end
            end
            return found
          end
          def add(item)
            @values.push item
          end
          def print
            puts @values
          end
        end
        
        xFile = File.open($myPath+"/excluded.gtd", "r")
        
        myList = ExList.new
        
        xFile.each do |line|
          myList.add(line)
        end
        
        # sorting happens
        $tags.each do |tag| 
          context = tag[:regexp]
          myFiles = Dir.entries($myPath)
          #puts myFiles.to_s
          myFiles.each do |fileName|
            if ((fileName[-3,3] == "gtd") and myList.contains(fileName))
              lineno = 0
              mFile = File.open(fileName) 
              mFile.each do |line|
                lineno = lineno + 1
                tLine = line[3..-1]
                if tLine != nil
                  re = /\s/
                  if (line[0..1] == "- " or line[0..1] == "! ")
                    ctask = re.match(tLine)
                  else 
                    ctask = re.match(line)
                  end
                  if (ctask.pre_match == context) and (context != "+") #and (context != "*")
                    results = {
                      :file => fileName[0..-5],
                      :line => lineno,
                      :content => ctask.post_match    
                    }
                    #results[:match] = html_escape($1)
                    tag[:matches] << results
                  end
        		    end
                #puts results.to_s       
              end
            end
          end
        end
        
        
        tmpl_file = "#{ENV['TM_BUNDLE_SUPPORT']}/template.rhtml"
        puts ERB.new(File.open(tmpl_file), 0, '<>').result
      :input: none
0979659D-126E-467F-AC07-599979A42D67: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Document With Saved Copy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 0979659D-126E-467F-AC07-599979A42D67
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if [[ -e "$TM_FILEPATH" ]]
           then diff --strip-trailing-cr --label "$TM_FILENAME (saved version)" --label "(current document)" -u <(cat "$TM_FILEPATH" | tr -d '\r') -
           else exit_show_tool_tip "There's no file on disk"
        fi
      :input: document
7AF6ADAA-E6F0-4B9D-B146-A62BDE600D74: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console source.r
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Execute Line / Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 7AF6ADAA-E6F0-4B9D-B146-A62BDE600D74
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        echo
        test=`tail -c+2`
        osascript <<-APPLESCRIPT | tail -n +2 | perl -pe 'BEGIN {$/=undef} s/\n\z//'
        tell application "System Events"
            -- Get a reference to the text field
            set text_area to (process "R")'s (window "R Console")'s (scroll area 1)'s text area 1
            
            -- Get text before and after our command
            set oldtext to text_area's value
            tell application "R" to cmd "${test//\"/\"}" 
            set newtext to text_area's value
        
            -- Find the difference between old and new
            text from (oldtext's length + 1) to -1 of newtext
        end tell
        APPLESCRIPT
      :input: selection
907BF622-2B0E-43C7-85F6-369A67226CA4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create Widget With Contents of Document
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 907BF622-2B0E-43C7-85F6-369A67226CA4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env bash
        SCRIPT_PATH="Library/Application Support/Textmate/Widget Scripts"
        mkdir -p ~/"$SCRIPT_PATH"
        cat > ~/"$SCRIPT_PATH/default.sh"
        "$TM_BUNDLE_SUPPORT/deploy_widget.sh"
        echo "Widget created."

      :input: document
43304E62-66F7-424D-8AF6-33E0237BF349: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, text.html.ruby, comment.line.number-sign.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Intelligent Go to File
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 43304E62-66F7-424D-8AF6-33E0237BF349
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/intelligent_go_to_file.rb"

      :input: none
E45D5856-8305-11D9-8AD4-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to Kwiki
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: E45D5856-8305-11D9-8AD4-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: perl -pe '/^(\t*)/;$a="*" x (length($1)+1);s/^(\t*)/$a /;'
      :input: selection
65C4098C-BB16-4CA1-9297-B312BCD0433F: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preferences
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 65C4098C-BB16-4CA1-9297-B312BCD0433F
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby -wKU
        
        STDOUT.reopen('/dev/console', 'w')
        STDERR.reopen('/dev/console', 'w')
        
        require ENV['TM_BUNDLE_SUPPORT'] + '/lib/settings.rb'
        
        pid = Process.fork { Settings.show_ui }
        Process.detach(pid)

      :input: none
56F8C50E-B263-430C-9301-A34EDF05E9F5: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.tcl
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word / Selection (man) copy
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: 56F8C50E-B263-430C-9301-A34EDF05E9F5
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "word=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}\n\
        RMAN='/Library/Application Support/Apple/Developer Tools/Plug-ins/DocViewerPlugIn.xcplugin/Contents/Resources/rman'\n\n\
        try_man () {\n\
        \tif [[ -x \"$RMAN\" ]] && man -S n -w \"$word\" &>/dev/null; then\n\
        \t\tpage=$(\"$TM_SUPPORT_PATH/bin/html_man.sh\" n \"$word\")\n\
        \t\techo \"<meta http-equiv='Refresh' content='0;URL=tm-file://$page'>\"\n\
        \t\texit_show_html\n\
        \tfi\n\
        }\n\n\
        try_man\n\n\
        echo \"Couldn\xE2\x80\x99t find documentation for \xE2\x80\x9C${word}\xE2\x80\x9D\"\n"
      :input: selection
75C7A294-C2B3-4AF9-86A0-50D4351CF35C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.moinmoin
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help [moinedit]
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 75C7A294-C2B3-4AF9-86A0-50D4351CF35C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        require_cmd moinedit
        
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        html_header "MoinMoin Bundle Help" "MoinMoin"
        moinedit | pre
        html_footer

      :input: document
17A74DB2-7B65-4083-A091-AD51023DA8D7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Typewriter
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: k
        modifiers: 
        - :super
      :uuid: 17A74DB2-7B65-4083-A091-AD51023DA8D7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: toggle_style.rb -style=texttt
      :input: selection
D52CA669-A6DA-4CF1-BDF5-522D591D7E7D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Environment Closer \xE2\x80\x94 \\end{\xE2\x80\xA6}"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: .
        modifiers: 
        - :alt
        - :super
      :uuid: D52CA669-A6DA-4CF1-BDF5-522D591D7E7D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # This command inserts any missing \end{environment} at the caret position
        # It is analogous with Insert Closing Tag for HTML.
        
        ruby -- "$TM_SUPPORT_PATH/bin/checknest.rb" '\\begin(?>\{(.+?)\})' '\\end(?>\{(.+?)\})' '\end{$1}' -n$TM_LINE_NUMBER
      :input: document
EA8D1116-805A-4583-A028-F5328DDE4B75: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $3
      :scope: meta.reference.label.latex
      :fallback_input: word
      :line_capture_register: "2"
      :before_running_command: nop
      :name: Show Label as Tool Tip
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: l
        modifiers: 
        - :control
        - :super
      :uuid: EA8D1116-805A-4583-A028-F5328DDE4B75
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: ^([^:]*):([^:]*):(.*)$
      :command: |
        #!/usr/bin/env ruby
        require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/LaTeXUtils.rb"
        phrase = STDIN.read.chomp
        TextMate.exit_show_tool_tip("No current ref found") if phrase == ""
        include LaTeX
        begin
          items = FileScanner.label_scan(ENV["TM_LATEX_MASTER"] || ENV["TM_FILEPATH"]).find_all{|i| i.label.match(/#{phrase}/)}
          print items[0].context(10, true)
        rescue Exception => e
          TextMate.exit_insert_text(e.message)
        end

      :input: selection
7DC24224-9222-4ACF-9F70-BBF12BF965E4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ocaml
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Wrap Section in try/with
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: W
        modifiers: 
        - :alt
        - :control
      :uuid: 7DC24224-9222-4ACF-9F70-BBF12BF965E4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        $: << ENV['TM_SUPPORT_PATH']
        require 'lib/escape'
        
        def make_tab()
        	size = ENV['TM_TAB_SIZE'].to_i
        	if ENV['TM_SOFT_TABS'] == 'YES'
        		return ' ' * size
        	else
        		return "\t"
        	end
        end
        
        
        text = ENV['TM_SELECTED_TEXT']
        indent = text[/^\s*/]
        tab = make_tab()
        text = text.to_a.map() { |l| tab + l }
        
        puts indent + "try"
        print e_sn(text.join().chomp() + "\n")
        puts indent + "with"
        puts indent + "| ${1:err} -> ${2:raise err}"
        print "$0"
      :input: selection
4473F4D4-A7A1-4EA5-B418-0A194A7A3DE1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Underline
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: u
        modifiers: 
        - :super
      :uuid: 4473F4D4-A7A1-4EA5-B418-0A194A7A3DE1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: toggle_style.rb -style=underline
      :input: selection
CB149C8E-74CD-11D9-813D-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Add to Repository
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: CB149C8E-74CD-11D9-813D-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        require_cmd "${TM_SVN:=svn}" "If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)"
        
        "${TM_RUBY:-ruby}" -r "$TM_SUPPORT_PATH/lib/shelltokenize.rb" <<END
        	svn = ENV['TM_SVN'] || "svn"
        	puts %x{#{svn} add #{TextMate.selected_paths_for_shell}}
        END
      :input: none
2242C46C-153E-4EEB-B80B-A5398559D759: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.haskell
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Load in GHCi
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 2242C46C-153E-4EEB-B80B-A5398559D759
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/bin/bash
        
        THASKELL=${TM_HASKELL:-ghci}
        
        esc () {
        STR="$1" ruby <<"RUBY"
           str = ENV['STR']
           str = str.gsub(/'/, "'\\\\''")
           str = str.gsub(/[\\"]/, '\\\\\\0')
           print "'#{str}'"
        RUBY
        }
        
        osascript <<- APPLESCRIPT
        tell app "Terminal"
        	launch
        	activate
        	do script "clear; cd $(esc "${TM_DIRECTORY}"); ${THASKELL} ${TM_FILEPATH}"
        	set position of first window to {100, 100}
        end tell
        APPLESCRIPT

      :input: none
95FFEECE-73E4-4B33-9CAE-1641C62FFBC0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.python
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Cleanup Whitespace
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 95FFEECE-73E4-4B33-9CAE-1641C62FFBC0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"${TM_PYTHON:-python}\" \"${TM_BUNDLE_SUPPORT}/cleanup_whitespace.py\""
      :input: selection
04B7A867-D52A-4964-AD32-C8E4F67F2F1A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Individual Archive
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 04B7A867-D52A-4964-AD32-C8E4F67F2F1A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\" -a=i"
      :input: document
ED33B096-631A-41B2-AEB0-50E771F41E37: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.txt2tags
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: MagicPoint (mgp)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: ED33B096-631A-41B2-AEB0-50E771F41E37
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: txt2tags -t mgp "$TM_FILEPATH"
      :input: none
775EC3D9-4799-4454-85E5-5112EFCC2A15: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Import Project\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 775EC3D9-4799-4454-85E5-5112EFCC2A15
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # import the frontmost opened project window in Xcode
        
        source_path = %x{osascript -e 'tell application "TextMate"
        	choose file with prompt "Please choose an Xcode project:"
        	get the POSIX path of the result
        end tell'}.chomp
        
        dest_path = source_path.chomp.sub(/\.(xcodeproj|xcode|pbproj)\/?$/, ".tmproj")
        
        # FIXME probably should move the old dest_path somewhere and only nuke it if the conversion is successful
        
        %x{"#{ENV['TM_BUNDLE_SUPPORT']}/bin/xcode_to_tmproj" "#{source_path}/project.pbxproj" "#{dest_path}" && open "#{dest_path}"}
      :input: none
966B0E57-799A-4B91-84B4-75695A78F7B8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Convert Document / Selection to HTML
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 966B0E57-799A-4B91-84B4-75695A78F7B8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # This command works well when you use the TextMate service from a 
        # web-log editor like Ecto or MarsEdit.  You can write in markdown
        # and then convert back to html before save and close.
        
        HTML4=$([ -n "$TM_XHTML" ] || echo '--html4tags')
        Markdown.pl $HTML4|"${TM_SMARTYPANTS:-SmartyPants.pl}"|perl -pe '
        	# make <h1>Header</h1> into <h1 id="header">Header</h1>
        	# so that we can link to page#header
        	if(($tag, $title) = /<(h[1-6])>(.*?)<\/\1>/) {
        		$_ = $title;
        		s/<[^>]+>|&\w+;//g;	# remove tag and entities
        		s/[^-_ \/\w]//g;		# remove all but word and separators
        		s/[-_ \/]+/_/g;		# collapse all separators into _
        		$_ = "<$tag id=\"" . (lc $_) . "\">$title</$tag>\n";
        	}'

      :input: selection
43E6A4DB-1524-4FDD-8BD9-76852A2FA790: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.sweave
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: View (PDF)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: V
        modifiers: 
        - :super
      :uuid: 43E6A4DB-1524-4FDD-8BD9-76852A2FA790
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #echo $TM_DIRECTORY/${{TM_FILENAME%.*}.tex}
        M=${TM_LATEX_MASTER:=$TM_DIRECTORY/${TM_FILENAME%.*}.tex}
        M=${M%.*}.pdf
        #M=$TM_DIRECTORY/$M
        
        echo "<meta http-equiv=\"refresh\" content=\"0; tm-file://${M}\"><title>${M}</title>"
        
        echo "loading <b>$M</b>"
        
        # open $M
      :input: none
A864FF09-7900-44C4-8BEC-AD74A00FD877: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.php
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Documentation for Word
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: A864FF09-7900-44C4-8BEC-AD74A00FD877
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        if grep <<<${TM_CURRENT_WORD:-!} -Esq '[a-zA-Z0-9_]+'
        	then exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://www.google.com/search?domains=www.symfony-project.com%2Fapi&sitesearch=www.symfony-project.com%2Fapi&q=$TM_CURRENT_WORD'>"
        	else echo "Nothing to lookup (hint: place the caret on a function name)"
        fi
      :input: none
F82D2DF8-6914-4EEC-BA46-F1E4B1716108: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Update Tags
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "]"
        modifiers: 
        - :alt
        - :control
      :uuid: F82D2DF8-6914-4EEC-BA46-F1E4B1716108
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        # just to remind you of some useful environment variables
        # see Help / Environment Variables for the full list
        #echo File: "$TM_FILEPATH"
        #echo Word: "$TM_CURRENT_WORD"
        #echo Selection: "$TM_SELECTED_TEXT"
        
        exec "$TM_BUNDLE_SUPPORT/bin/tmctags" update

      :input: none
BE332E85-83B1-11D9-AD5A-000A95C5F126: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.actionscript
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Test Movie
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: BE332E85-83B1-11D9-AD5A-000A95C5F126
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # assumes the .FLA file is already open
        
        echo "flash.getDocumentDOM().testMovie()" > /tmp/test.jsfl;
        open /tmp/test.jsfl;
      :input: none
38D17DB7-C0D3-4C05-BD10-A7F78D67DF03: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.prolog
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 38D17DB7-C0D3-4C05-BD10-A7F78D67DF03
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/bin/bash
        
        TPROLOG=${TM_PROLOG:-gprolog}
        
        esc () {
        STR="$1" ruby <<"RUBY"
           str = ENV['STR']
           str = str.gsub(/'/, "'\\\\''")
           str = str.gsub(/[\\"]/, '\\\\\\0')
           print "'#{str}'"
        RUBY
        }
        
        osascript <<- APPLESCRIPT
        tell application "Term"
        	launch
        	activate
        	do script "clear; cd $(esc "${TM_DIRECTORY}"); ${TPROLOG} --entry-goal \"consult('${TM_FILEPATH}')\""
        	set position of first window to {100, 100}
        end tell
        APPLESCRIPT
        
        
      :input: none
83F27190-D52F-414C-8AC8-7ED3ADAF2FC6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: View Revision...
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: M
        modifiers: 
        - :control
      :uuid: 83F27190-D52F-414C-8AC8-7ED3ADAF2FC6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_HG:=hg}\" \"If you have installed hg, then you need to either update your <tt>PATH</tt> or set the <tt>TM_HG</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        if [[ -d \"$TM_PROJECT_DIRECTORY\" ]]\n   then export WorkPath=\"$TM_PROJECT_DIRECTORY\"; cd \"$TM_PROJECT_DIRECTORY\"\n   else export WorkPath=\"$TM_DIRECTORY\"; cd \"$TM_DIRECTORY\";\n\
        fi\n\n\
        revs=$(\"$TM_HG\" log -q \"$TM_FILEPATH\" \\\n\
        \t2> >(CocoaDialog progressbar --indeterminate \\\n\
        \t\t--title \"View Revision\xE2\x80\xA6\" \\\n\
        \t\t--text \"Retrieving List of Revisions\xE2\x80\xA6\" \\\n\
        \t))\n\n\
        revs=`osascript<<END\n\
        \tset AppleScript's text item delimiters to {\"\\n\",\"\\r\"}\n\
        \ttell app \"SystemUIServer\"\n\
        \t\tactivate\n\
        \t\tset ourList to (every text item of \"$revs\")\n\
        \t\tif the count of items in ourList is 0 then\n\
        \t\t\tdisplay dialog \"No older revisions of file '$(basename \"$TM_FILEPATH\")' found\" buttons (\"OK\")\n\
        \t\t\tset the result to false\n\
        \t\telse\n\
        \t\t\tchoose from list ourList with prompt \"View older revision of '$(basename \"$TM_FILEPATH\")':\"\n\
        \t\tend if\n\
        \tend tell\n\
        END`\n\n\
        # exit if user canceled\n\
        if [[ $revs = \"false\" ]]; then\n\
        \tosascript -e 'tell app \"TextMate\" to activate' &>/dev/null &\texit_discard\n\
        fi\n\n\
        revs=`echo \"$revs\" | tr '\\r' '\\n' | cut -d \":\" -f 1`\n\
        revs=( $revs )\n\n\
        FILENAME=\"/tmp/rev${revs[0]}-$TM_FILENAME\"\n\n\
        \"$TM_HG\" cat -r${revs[0]} --output \"$FILENAME\" \"$TM_FILEPATH\"\n\
        open -a \"TextMate\" \"$FILENAME\"\n"
      :input: none
0CE6FB29-8467-11D9-ABBA-0011242E4184: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: 0CE6FB29-8467-11D9-ABBA-0011242E4184
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: ". \"$TM_SUPPORT_PATH/lib/webpreview.sh\"\n\
        html_header \"Subversion Help\" \"Subversion\"\n\n\
        Markdown.pl <<'EOF'\n\n\
        This document describes the commands of the TextMate Subversion bundle and how you can fine-tune their behavior. For general Subversion help and tutorial, you should read the [Subversion book](http://svnbook.red-bean.com/ \"Version Control with Subversion\").\n\n\
        ## Command Reference\n\n\
        ### Adding, Removing, Updating, Committing\n\n\
        These commmands operate on the selected files/folders in the project, or the active file if it doesn't belong to a project.\n\n\
        *\t__Add to Repository__\n\n\
        \tSchedules the targets for addition to the repository.\n\n\
        *\t__Remove From Repository&hellip;__\n\n\
        \tSchedules the targets for removal from the repository.\n\n\
        *\t__Revert__\n\n\
        \tReverts the file to the base revision. Any modifications to the file will be lost.\n\n\
        *\t__Update to Newest__\n\n\
        \tUpdates the targets with the newest changes from the repository.\n\n\
        *\t__Commit__\n\n\
        \tCommits your changed files to the repository. A dialog asks you for the description of\n\
        \tyour changes; you may also choose to exclude files from the commit by unchecking them.\n\
        \tIf no files are selected or active, this command does nothing. If the target files\n\
        \thave no local changes, nothing happens.\n\n\
        ### Information, Logs, Status\n\n\
        *\t__Blame__\n\n\
        \tDisplays a line-by-line history of the active file, showing you who wrote which line in what revision.\t Click a line to jump to it in an editor window.  Hover over a revision number or author name to see when the corresponding line was last changed. The date format is [adjustable](#tm_svn_date_format). Requires access to the repository.\n\n\
        *\t__Info__\n\n\
        \tDisplays detailed information about the selected files, including the type of file, who last changed the file, the date file was last changed, the repository URL to the file, and other information. Does not require access to the repository.\n\n\
        \tSome parameters are configurable via shell variables; see the [Configuration Options](#tm_svn_info) section below.\n\n\
        *\t__Log__\n\
        \t\n\
        \tDisplays the commit message history for the selected files.\n\
        \tSome parameters are configurable via shell variables; see the [Configuration Options](#tm_svn_log) section below.\n\
        \t\n\
        *\t__View Revision&hellip;__\n\n\
        \tDisplays a different revision of the active file. This command presents you with a list of revisions to choose from.\n\n\
        *\t__Status__\n\n\
        \tDisplays the modification status for each of the selected files/folders, or for the active file's directory if there is no project.\n\
        \tDoes not access the repository.\n\n\
        ### Comparing Revisions\n\n\
        These commands operate on the active file.\n\n\
        *\t__Diff Revisions&hellip;__\n\
        \t\n\
        \tDisplays the differences between two specific revisions of the active file. You will be presented with a list of revisions; please select two.\n\
        \t\n\
        *\t__Diff With Newest (HEAD)__\n\
        \t\n\
        \tDisplays the differences between the active file and the newest available revision of the file on the server.\n\
        \tEquivalent to `svn diff -rHEAD`.\n\
        \t\n\
        *\t__Diff With Working Copy (BASE)__\n\
        \t\n\
        \tDisplays the differences between the active file and an unaltered, pristine copy of the file at the same revision.\n\
        \tEquivalent to `svn diff -rBASE`.\n\
        \t\n\
        *\t__Diff With Previous Revision (PREV)__\n\
        \t\n\
        \tDisplays the differences between the active file and the previous revision of the file.\n\
        \tEquivalent to `svn diff -rPREV`.\n\
        \t\n\
        *\t__Diff With Revision&hellip;__\n\
        \t\n\
        \tDisplays the differences between the active file and a different revision of the same file. This command presents you with a list of revisions to choose from.\n\
        \t\n\
        ### Merging Revisions\n\n\
        *\t__Show Available Revisions for Merging__\n\n\
        \tDisplay revisions that can be merged into a selected folder in a project. This command requires the [`svnmerge.py`](http://www.orcaware.com/svn/wiki/Svnmerge.py \"svnmerge.py is a tool for automatic branch management\") script to be installed and for merge tracking to have been previously initiated.\n\n\
        *\t__Resolve Conflicts With FileMerge&hellip;__\n\n\
        \tOpens the active file in FileMerge. This command sets up FileMerge to facilitate conflict resolution.\n\n\
        *\t__Resolved__\n\n\
        \tRemoves conflict-related artifact files for the selected file, allowing the file to be committed after you have fixed the conflicts. Does not remove conflict markers or resolve conflicts itself.\n\n\
        ### Check Out\n\n\
        *\t__Check Out&hellip;__\n\
        \t\n\
        \tCheck out a local working copy of a repository directory. Asks for a path to the repository directory to check out.\n\n\
        ## Configuration Options\n\n\
        These shell variables allow you to tweak the behavior of the certain commands if need be. The default values should make sense for normal use.\n\n\
        ### Tools\n\n\
        *\t`$TM_SVN` (default: `svn`)\n\
        \t\n\
        \tthe path to your svn executable. Must be reachable either as an absolute path or as a relative path from the shell PATH environment variable.\n\
        \t\n\
        *\t`$TM_SVNMERGE` (default: `svnmerge`)\n\
        \t\n\
        \tthe path to your svnmerge.py script.\n\
        \t\n\
        *\t`$TM_RUBY` (default: `ruby`)\n\
        \t\n\
        \tHere you can tweak with what Ruby the formatting scripts will be executed.\n\
        \t\n\
        *\t`$TM_SVN_DIFF_CMD` (default: not set)\n\
        \t\n\
        \tAllows you to set a command that should be used to present file differences. If you want use Apple\xE2\x80\x99s FileMerge application, use [`fmdiff`](http://ssel.vub.ac.be/ssel/internal:fmdiff).\n\n\
        ### Date Format\n\n\
        *\t<a name=\"tm_svn_date_format\">`$TM_SVN_DATE_FORMAT`</a> (default: not set&mdash;no changes, just show what SVN shows)\n\
        \t\n\
        \tA date format string that allows you to tweak the format in which Blame, Log and Info show you dates.\t \n\
        \tSee [strftime(3)](http://developer.apple.com/documentation/Darwin/Reference/ManPages/man3/strftime.3.html \"man page for strftime(3)\") for what you can enter here.\n\n\
        ### Blame, Info, and Log Options\n\n\
        *\t`$TM_SVN_CLOSE` (default: false)\n\
        \t\n\
        \tAdjust whether the windows of Blame and Info close when you click on a link which opens a file in TM.  Set it to `1` or `true` if windows should close or to something else if they should not.\n\
        \t\n\
        *\t<a name=\"tm_svn_log\">`$TM_SVN_LOG_RANGE`</a> (default: `BASE:1`)\n\
        \t\n\
        \tThe default range to query for log messages.\n\
        \t\n\
        *\t`$TM_SVN_LOG_LIMIT` (default: 15)\n\
        \t\n\
        \tThe number of messages to show.\t 0 means no limit.\n\n\
        *\t<a name=\"tm_svn_info\">`$TM_SVN_INFO_HIDE`</a> (default: nothing)\n\n\
        \tHere you can adjust what keys of the info stream you don't want to see, it is case insensitive and a comma (,) separated list.\n\
        \tIf you enter a `*`, it is assumed that you want to hide all vars, if so, you can make some values visible again with `$TM_SVN_INFO_SHOW`.\n\n\
        *\t`$TM_SVN_INFO_SHOW` (default: everything else)\n\n\
        \tThis is also a comma separated list of keys, it just makes sense if you did hide all with the above var.\n\
        \t`*` has no special meaning here. Everything you enter here will be shown if you want to hide everything else.\n\n\
        *\t`$TM_SVN_IGNORE_BAD_LINES` (default: not set)\n\n\
        \tBy setting this variable, Log will not print unexpected text that may appear at the beginning of Subversion's output. This could be useful if you frequently see this output but you deem it safe to ignore.\n\n\
        EOF\n"
      :input: none
C7802039-B3C4-11D9-8D63-000A95A89C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: "Diff Revisions\xE2\x80\xA6"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: A
        modifiers: 
        - :control
      :uuid: C7802039-B3C4-11D9-8D63-000A95A89C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "require_cmd \"${TM_SVN:=svn}\" \"If you have installed svn, then you need to either update your <tt>PATH</tt> or set the <tt>TM_SVN</tt> shell variable (e.g. in Preferences / Advanced)\"\n\n\
        ruby >& /tmp/tm_svn_debug <<END &\n\
        begin\n\
        \trequire 'tempfile'\n\
        \trequire \"$TM_BUNDLE_SUPPORT/svn_revision_chooser\"\n\
        \trequire \"$TM_BUNDLE_SUPPORT/svn_diff\"\n\n\
        \tfile = ENV['TM_FILEPATH']\n\
        \trevisions = Subversion::choose_revision(file, \"Diff two revs of #{File.basename(file)}\", 2)\n\
        \tunless revisions.nil?\n\
        \t\tdiff_text = Subversion::diff_working_copy_with_revision(:paths => [file],\n\
        \t\t\t\t\t\t\t\t:revision => \"#{revisions[1]}:#{revisions[0]}\",\n\
        \t\t\t\t\t\t\t\t:command_name => \"Diff Revisions\xE2\x80\xA6\")\n\
        \t\tTempfile.open(\"svndiff #{File.basename(file)}\") do |tempfile|\n\
        \t\t\ttempfile.write(diff_text)\n\
        \t\t\ttempfile.flush\n\
        \t\t\t%x{\"#{ENV['TM_SUPPORT_PATH']}/bin/mate\" -w #{e_sh(tempfile.path)}}\n\
        \t\tend\n\
        \tend\n\n\
        rescue Exception => error\n\
        \tTextMate::UI.alert(:warning, \"You\xE2\x80\x99ve discovered a bug\", \"Please report the following text: #{error}\\n\\n#{error.backtrace.join(%Q{\\n})}\")\n\
        end\n\
        END\n"
      :input: none
8A8B6803-AF20-47EC-9382-62E1EBA76B4A: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: R Help
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          hg==

        modifiers: []

      :uuid: 8A8B6803-AF20-47EC-9382-62E1EBA76B4A
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cat <<"HTML"
        <html>
            <head>
                <meta http-equiv="Content-type" content="text/html; charset=utf-8">
                <title>R Help</title>
                <style type="text/css" media="screen">
        dt {
            margin-top: 0.6em;
            font-weight: bold;
        }
        h2 {
            margin-top: 1.4em;
        }
        tt {
            font-size: 0.9em;
        }
                </style>
            </head>
            <body>
                <h1 style="text-shadow: 3px 3px 5px grey">R Help</h1>
                <p>R is a language and environment for statistical computing and graphics. It is a <a href="http://www.gnu.org/">GNU project</a> which is similar to the S language and environment which was developed at Bell Laboratories (formerly AT&amp;T, now Lucent Technologies) by John Chambers and colleagues. R can be considered as a different implementation of S. There are some important differences, but much code written for S runs unaltered under R.</p>
                <p>R provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, ...) and graphical techniques, and is highly extensible. The S language is often the vehicle of choice for research in statistical methodology, and R provides an Open Source route to participation in that activity.</p>
                <p style="font-size: smaller; color: grey;">(Text taken from <a href="http://www.r-project.org/about.html">What is R?</a>)</p>
                <p>More information about R can be found at <a href="http://www.r-project.org/">r-project.org</a>.</p>
                <h2>Commands</h2>
                <dl>
                    <dt>Execute Document In R</dt>
                    <dd>Executes the current document in the command-line version of R and displays the output in an HTML window. By default new plots use the "pdf" device and are placed in a temporary folder and opened upon completion of the script.</dd>
                    <dt>Send Selection / Document to R</dt>
                    <dd>Sends the current selected text or the entire document to R.app using AppleScript. Also changes the current working directory to that of the script if it's been saved. Useful for those times when you want to execute a script in the context of an existing workspace, or when you need an interactive graphics device.</dd>
                    <dt>Show in R Help</dt>
                    <dd>Shows an HTML document with help for the current word.</dd>
                    <dt>Command Usage</dt>
                    <dd>Shows a tooltip with the function signature for the current word.</dd>
                    <dt>Insert Command Template</dt>
                    <dd>Inserts a snippet with the function signature for the current word. Effectively an autocomplete.</dd>
                </dl>
                <h2>R Console</h2>
                <p>The R Console language is used to turn the TextMate window into effectively an R console. It works by sending commands to R.app with AppleScript and retrieving the results.</p>
                <dl>
                    <dt>Execute Line / Selection</dt>
                    <dd>If the line begins with "> ", that line will be sent to R.app when you hit return.</dd>
                    <dt>Show Line Output as Tool Tip</dt>
                    <dd>Same as the previous command but shows the result as a tooltip rather than inserting the results into the document.</dd>
                    <dt>Show History List</dt>
                    <dd>Shows a menu containing all the commands executed in the current document.</dd>
                    <dt>Previous History Item</dt>
                    <dd>Replaces the current line with the previous item from history.</dd>
                    <dt>Next History Item</dt>
                    <dd>Replaces the current line with the next item from history.</dd>
                    <dt>Copy to Clipboard</dt>
                    <dd>Copies all the user commands (lines beginning with "> ") from the current selection or document to the clipboard.</dd>
                </dl>
                <h2>Troubleshooting</h2>
                <p>If you see the message <tt>`re-encoding is not available on this system'</tt> or receive an error about <tt>`object ".PSenv" not found'</tt> then you are most likely using an older version of R. In this case you should upgrade to the latest (currently, version 2.4.0) by downloading the pre-built universal R.app installer from <a href="http://www.r-project.org">r-project.org</a>.</p>
            </body>
        </html>
        HTML
      :input: none
E5142394-B07A-11D9-8EC4-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Relaunch TextMate
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: q
        modifiers: 
        - :control
        - :super
      :uuid: E5142394-B07A-11D9-8EC4-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        { APP_PATH=$(ps -xwwp $PPID -o command|grep -o '.*.app')
          osascript -e 'tell app "TextMate" to quit'
        
          for (( i = 0; i < 50 && $(echo $(ps -xp $PPID|wc -l))-1; i++ )); do
            sleep .2;
          done
        
          if [[ $(ps -xp $PPID|wc -l) -ne 2 ]]; then
            open "$APP_PATH"
          else
            echo >/dev/console "$(date +%Y-%m-%d\ %H:%M:%S): TextMate is still running. Relaunch aborted."
          fi
        
        } &>/dev/null &
      :input: none
0E51AD42-17AD-4507-950B-AB114408B58D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Citation (Ref-TeX Style)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "{"
        modifiers: 
        - :control
      :uuid: 0E51AD42-17AD-4507-950B-AB114408B58D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        #!/usr/bin/env ruby
        
        # A reftex-style citation command
        
        require ENV["TM_SUPPORT_PATH"] + "/lib/exit_codes.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/ui.rb"
        require ENV["TM_SUPPORT_PATH"] + "/lib/LaTeXUtils.rb"
        include LaTeX
        phrase = STDIN.read
        scope = String.new(ENV["TM_SCOPE"])
        
        if !(scope.include? "meta.citation.latex")
        items = ["c:  \\cite",
        		"t:  \\citet",
        		"    \\citet*",
        		"p:  \\citep",
        		"    \\citep*",
        		"e:  \\citep[e.g.]",
        		"s:  \\citep[see]",
        		"a:  \\citeauthor",
        		"    \\citeauthor*",
        		"y:  \\citeyear",
        		"r:  \\citeyearpar",
        		"f:  \\footcite"]
        
        if items.length > 1
        	choice = TextMate::UI.menu(items)
        	TextMate.exit_discard if choice.nil?
        	choice = items[choice]
        end
        cphrase = choice.slice(/^[^%]+/).strip
        #cphrase = cphrase[4..-1]
        cphrase.gsub! %r{.*\\}, ""
        end
        
        begin
          items = LaTeX.get_citations.map{|i| i.citekey + "   % "+i.description}
          items = items.grep(/#{phrase}/i) if phrase != ""
          TextMate.exit_discard if items.empty?
          if items.length > 1
          	choice = TextMate::UI.menu(items)
          	TextMate.exit_discard if choice.nil?
          	choice = items[choice]
          else
            choice = items[0]
          end
          selection = choice.slice(/^[^%]+/).strip
          if ENV['TM_SCOPE'].match(/citation/) then
            TextMate.exit_insert_snippet("#{selection}$0")
          else
            TextMate.exit_insert_snippet("\\#{cphrase}${1:[$2]}\{#{selection}$3\}$0")
          end
        rescue RuntimeError => e
          TextMate.exit_insert_text(e.message)
        end
        
      :input: selection
3B47B103-857B-4A75-938B-4D57D4803BC2: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Paste Selection
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: 3B47B103-857B-4A75-938B-4D57D4803BC2
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        $LOAD_PATH << "#{ENV['TM_BUNDLE_SUPPORT']}/lib"
        require "terminal_mate"
        TerminalMate::Client.new.send("paste", ENV["TM_SCOPE"], STDIN.read)

      :input: selection
AFBD4D3D-926A-44B1-91CD-2BF793BCB8FD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.sql
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Completion
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: AFBD4D3D-926A-44B1-91CD-2BF793BCB8FD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: completion.rb
      :input: none
775D0733-3804-463C-A0EF-65B2998F5CE1: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Extend Current Parens
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: )
        modifiers: 
        - :super
      :uuid: 775D0733-3804-463C-A0EF-65B2998F5CE1
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        # short for escape_snippet - escapes special snippet characters in str
        def es(str)
        	str.to_s.gsub(/([$`\\])/, "\\\\\\1")
        end
        
        
        # given a string, insert an open parenthesis in the first, best
        # spot starting from the end
        def insert_open(str)	
        	# this needs to be done as a state machine so we can properly jump
        	# paren groups
        	prev = nil
        	cur = nil
        	closuredepth = 0
        	(str.length - 1).downto(0) do |i|
        		prev = cur
        		cur = str[i].chr()
        		
        		if prev != nil
        			if prev == '('
        				closuredepth -= 1
        			elsif prev == ')'
        				closuredepth += 1
        			end
        			
        			# look for the start of a token next to a boundary
        			if closuredepth == 0 and "#{cur}#{prev}" =~ /(\b|\s)[a-zA-Z0-9\(]$/
        				return str[0..i] + '(' + str[i+1..-1]
        			end
        		end
        	end
        	
        	# if we bailed, check for start of str positioning
        	if str =~ /^[a-zA-Z0-9\(]/
        		return '(' + str
        	else
        		return str	
        	end
        end
        
        
        line = $stdin.read()
        index = ENV['TM_LINE_INDEX'].to_i()
        currentchar = line[index - 1].chr()
        
        if currentchar == ')'
        	# backtrack to find the open of this paren
        	depth = 1
        	searchline = line[0..(index - 2)].reverse
        	searchline.split(//).each_index() do |i|
        		ch = searchline[i].chr()
        		if ch == ')'
        			depth += 1
        		elsif ch == '('
        			depth -= 1
        		end
        
        		# at a depth of zero we should be sitting on the opening paren
        		if depth == 0
        			parenindex = [(index - 3 - i), 0].max()
        			firstpart = line[0].chr()
        			if parenindex > 0
        				firstpart = insert_open(line[0..parenindex])
        			end
        			if firstpart == line[0..parenindex]
        				line = es(line[0..(index)]) + '$0' + es(line[(index + 1)..-1])
        				break
        			end
        			
        			secondpart = es(line[(parenindex + 2)..(index - 2)]) + ')$0' + es(line[index..-1])
        			line = es(firstpart) + secondpart
        			break
        		end
        	end
        else
        	line = es(insert_open(line[0..(index - 1)])) + ')$0' + es(line[index..-1])
        end
        
        print "#{line}"

      :input: selection
D8B2D295-AD3C-11D9-BD97-000D93B6E43C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show in PDF Viewer (pdfsync)
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: D8B2D295-AD3C-11D9-BD97-000D93B6E43C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |+
        # If TM_LATEX_MASTER is not set use TM_FILEPATH
        : ${TM_LATEX_MASTER:=$TM_FILEPATH}
        
        # Switch to the right directory
        cd "${TM_PROJECT_DIRECTORY:-$TM_DIRECTORY}"
        cd "$(dirname "$TM_LATEX_MASTER")"
        PDF="${TM_LATEX_MASTER%.tex}.pdf"
        V=${TM_LATEX_VIEWER%.app} # strip potential .app extension
        if find_app >/dev/null "$V.app"; then
          open -a "$V" "$PDF"
        fi
        if [[ "$V" == TeXniscope ]]; then
          SCRIPT="$(find_app TeXniscope.app)/Contents/Resources/forward-search.sh"
          if [[ -x "$SCRIPT" ]]; then
          	"$SCRIPT" &>/dev/console "$TM_LINE_NUMBER" "$TM_FILEPATH" "$PDF"
          else
          	echo "Unable to locate $V."
          fi
        else
          if [[ "$V" == PDFView ]]; then
          SCRIPT="$(find_app PDFView.app)/Contents/Resources/forward-search.sh"
            if [[ -x "$SCRIPT" ]]; then
              "$SCRIPT" &>/dev/console "$TM_LINE_NUMBER" "$TM_FILEPATH" "$PDF"
            else
              echo "Unable to locate $V."
            fi
          fi
          if [[ "$V" == Skim ]]; then
          SCRIPT="$(find_app Skim.app)/Contents/Resources/displayline"
            if [[ -x "$SCRIPT" ]]; then
              "$SCRIPT" &>/dev/console "$TM_LINE_NUMBER" "$PDF" "$TM_FILEPATH"
            else
              echo "Unable to locate $V."
            fi
          fi
        fi
        
        
      :input: none
7CCF064C-BC8F-437B-A339-0E2156D8B2C3: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.multimarkdown
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 7CCF064C-BC8F-437B-A339-0E2156D8B2C3
      :disable_output_auto_indent: 
      :bundle_uuid: D99E8C0C-792F-11D9-A212-000D93B3A10E
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        
        if [[ -z $TM_FILENAME ]]
          then title="Markdown as HTML"
          else title="${TM_FILENAME%.*}"
        fi
        
        html_header "$title" "MultiMarkdown"
        MultiMarkdown.pl|SmartyPants.pl
        html_footer
      :input: selection
CA1849DD-D6EC-415D-8788-DD93BE027F6D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: and Insert Terminator
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: 
        - :alt
        - :super
      :uuid: CA1849DD-D6EC-415D-8788-DD93BE027F6D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        termchar = ENV['TM_LINE_TERMINATOR'] || ";"
        
        # short for escape_snippet - escapes special snippet characters in str
        def es(str)
        	str.to_s.gsub(/([$`\\])/, "\\\\\\1")
        end
        
        print es($stdin.read()[/^(.*?);*\s*$/, 1]) + "#{es(termchar)}$0"
      :input: selection
1861B166-5B47-4E0D-847C-A466F5C11AEF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.mt
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview Index
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
      :uuid: 1861B166-5B47-4E0D-847C-A466F5C11AEF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "\"$TM_BUNDLE_SUPPORT/mt-tmpl-preview.pl\""
      :input: document
CFAAD3D2-CD4F-4F16-AB41-770AF6E460EF: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Revert
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: CFAAD3D2-CD4F-4F16-AB41-770AF6E460EF
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "$TM_DIRECTORY"
        darcs revert -a "$TM_FILENAME"
        rescan_project
      :input: none
2CDB078C-78E9-4DDA-9DF9-6F18D1E92BAE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.c, source.objc, source.c++, source.objc++, source.python, source.d
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: saveModifiedFiles
      :name: Rebuild
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: b
        modifiers: 
        - :super
      :uuid: 2CDB078C-78E9-4DDA-9DF9-6F18D1E92BAE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        # TM_IGNORE_WARNINGS is a sequence of glob patterns of files in which to ignore
        # warnings.  Right now it doesn't support escaped ':" -- the separator character.
        # export TM_IGNORE_WARNINGS="mitchcode_*.h:*/MitchCode/*"
        
        # Look at other bundles to see if there are conventions for using 'defaults'.
        PREF_DOMAIN=com.macromates.textmate.scons_prefs
        lastTarget=`defaults read ${PREF_DOMAIN} last_target 2>/dev/null`
        lastBuildDir=`defaults read ${PREF_DOMAIN} last_build_dir 2>/dev/null`
        
        if [ "x$lastBuildDir" != "x" ]; then
            cd ${lastBuildDir}
        fi
        
        # Allow spaces to delimit arguments in ${target} -- bad idea?
        python -u "${TM_BUNDLE_SUPPORT}/bin/scons_html_wrapper.py" ${lastTarget}
      :input: none
5CEA8FE0-E28A-11D9-9477-000A95A51A76: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Changes
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: Z
        modifiers: 
        - :control
      :uuid: 5CEA8FE0-E28A-11D9-9477-000A95A51A76
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd "${TM_PROJECT_DIRECTORY:=$TM_DIRECTORY}";
        
        "${TM_RUBY:=ruby}" <<'EOF'
        require 'rexml/document'
        require 'time'
        
        puts("<html>")
        puts("<head>")
        puts("  <style type=\"text/css\">")
        puts("    html {")
        puts("      font-size: small;")
        puts("    }")
        puts("    body {")
        puts("      border: 0px;")
        puts("      margin: 0px;")
        puts("    }")
        puts("    .chunk {")
        puts("      padding: 7px;")
        puts("    }")
        puts("  </style>")
        puts("</head>")
        puts("<body>")
        output = `darcs changes --xml`
        xmldoc = REXML::Document.new(output)
        count = 0
        xmldoc.root.each_element('patch') { |patch|
           print("<div class=\"chunk\" ")
           if(count % 2 == 0)
             print("style=\"background-color: white\"")
           else
             print("style=\"background-color: lightblue\"")
           end
           print("><tt style=\"color: gray\">#{Time.parse(patch.attributes['local_date']).strftime("%m/%d/%y %I:%M %p").downcase()}, #{patch.attributes['author']}</tt><br/> #{patch.elements['name'].text()}<br/>")
           print("</div>")
           count = count + 1
        }
        puts("</body>")
        puts("</html>")
      :input: none
35222962-C50D-4D58-A6AE-71E7AD980BE4: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby - text.html.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run
      :auto_scroll_output: false
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: 35222962-C50D-4D58-A6AE-71E7AD980BE4
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export RUBYLIB="$TM_BUNDLE_SUPPORT/RubyMate${RUBYLIB:+:$RUBYLIB}"
        export TM_RUBY=$(which "${TM_RUBY:-ruby}")
        
        "${TM_RUBY}" -- "$TM_BUNDLE_SUPPORT/RubyMate/run_script.rb"

      :input: document
887AF89E-004D-42AC-B29E-D90B0147F6DC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.scheme
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Start Interpreter
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: I
        modifiers: 
        - :control
      :uuid: 887AF89E-004D-42AC-B29E-D90B0147F6DC
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        osascript -e "tell application \"Terminal\"
           do script \"clear; ${TM_SCHEME_INTERPRETER:=csi}\"
           activate
        end tell"

      :input: none
B207BBD4-D6AA-41E9-9530-27210F2D7B66: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.ruby, source.ruby.rails.embedded.html, meta.rails.controller, meta.rails.helper
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Go to Stylesheet
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          gQ==

        modifiers: 
        - :alt
        - :super
      :uuid: B207BBD4-D6AA-41E9-9530-27210F2D7B66
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/go_to_alternate_file.rb" stylesheet
      :input: none
40315F35-E51D-4C22-94E2-52FB206066BB: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.greasemonkey
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: XPath
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: H
        modifiers: 
        - :control
      :uuid: 40315F35-E51D-4C22-94E2-52FB206066BB
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: exit_show_html "<meta http-equiv='Refresh' content='0;URL=http://www.w3schools.com/xpath/'>"
      :input: none
48E1CB3A-8349-46E4-86B0-671663712005: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.r-console
      :fallback_input: document
      :line_capture_register: 
      :before_running_command: nop
      :name: Copy to Clipboard
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: C
        modifiers: 
        - :super
      :uuid: 48E1CB3A-8349-46E4-86B0-671663712005
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        ruby -e 'require ENV["TM_BUNDLE_SUPPORT""] + "/lib/historyList.rb";print HistoryList.new(STDIN.read + "\n> ").list.join("\n")'|pbcopy
        echo "Commands from selection/document placed into pasteboard"
      :input: selection
46842464-574C-477F-9DFB-BB38EA3C85BE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: none
      :line_capture_register: 
      :before_running_command: nop
      :name: Apply Patch From Clipboard to Current Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: D
        modifiers: 
        - :control
        - :super
      :uuid: 46842464-574C-477F-9DFB-BB38EA3C85BE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export PATCH_GET=0
        export __CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100
        
        if [[ -z $TM_FILEPATH ]]
          then exit_discard
          else pbpaste | patch "$TM_FILEPATH" -p0
        fi
        
        # Reload patched file
        rescan_project

      :input: selection
74ED8466-F6E5-48F8-8063-E252C2A36353: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.shell
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: New Function
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: |
          

        modifiers: []

      :uuid: 74ED8466-F6E5-48F8-8063-E252C2A36353
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: fun
      :capture_pattern: 
      :command: |-
        NAME=${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}
        if [[ -z "$NAME" ]]; then
        	NAME='${1:function_name}'
        fi
        
        cat <<SNIPPET
        function $NAME {
        	\${0:#statements}
        }
        SNIPPET
      :input: selection
569C9822-8C41-4907-94C7-1A8A0031B66D: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Run Rake Task
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :control
      :uuid: 569C9822-8C41-4907-94C7-1A8A0031B66D
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        export RUBYLIB="$TM_BUNDLE_SUPPORT/RakeMate${RUBYLIB:+:$RUBYLIB}"
        export TM_RUBY=$(which "${TM_RUBY:-ruby}")
        export TM_RAKE=$(which "${TM_RAKE:-rake}")
        
        "${TM_RUBY}" -- "$TM_BUNDLE_SUPPORT/RakeMate/rake_mate.rb"

      :input: none
3E208CDF-268C-4A23-902B-5628596E4BC8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Edit Lurkers
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: $
        modifiers: 
        - :control
      :uuid: 3E208CDF-268C-4A23-902B-5628596E4BC8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        cd $TM_PROJECT_DIRECTORY
        "${TM_P4:=p4}" diff -se ./... | "${TM_P4:=p4}" -x - edit
      :input: none
F9F5D55E-6D17-46C8-8F3E-3A6E610F04FE: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.js.prototype support.class.prototype
      :fallback_input: word
      :line_capture_register: 
      :before_running_command: nop
      :name: Prototype Documentation for Class
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: F9F5D55E-6D17-46C8-8F3E-3A6E610F04FE
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        echo "<meta http-equiv='Refresh'
                content='0;URL=http://prototypejs.org/api/`echo ${TM_SELECTED_TEXT:-$TM_CURRENT_WORD}|sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`'>"

      :input: none
AF355E00-4F11-11DB-B7AC-00112474B8F0: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.nemerle
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Compile & Run
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: AF355E00-4F11-11DB-B7AC-00112474B8F0
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        . "$TM_SUPPORT_PATH/lib/webpreview.sh"
        html_header "Compile &amp; Run" "Nemerle"
        require_cmd ncc
        
        ncc "$TM_FILEPATH" -o "$TM_FILEPATH".exe && mono "$TM_FILEPATH".exe
        
        html_footer
      :input: document
E26E1CA5-D173-48A3-853C-D9E962550F8E: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.applescript
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: AppleScript Release Notes
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: h
        modifiers: 
        - :control
      :uuid: E26E1CA5-D173-48A3-853C-D9E962550F8E
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/bin/bash
        
        # A list of useful applescript resources at apple.com
        
        open "http://developer.apple.com/releasenotes/AppleScript/index-date.html"
      :input: none
7190DABA-FE8B-4DC7-9D31-3A727A8647CD: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create Table
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: T
        modifiers: 
        - :control
        - :super
      :uuid: 7190DABA-FE8B-4DC7-9D31-3A727A8647CD
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        
        if ENV.has_key?('TM_SELECTED_TEXT') then
          result=ENV['TM_SELECTED_TEXT']
        else
          result=`"$TM_SUPPORT_PATH/bin"/CocoaDialog.app/Contents/MacOS/CocoaDialog standard-inputbox \
          --title 'LaTeX Array Creation' \
          --informative-text 'Number of rows and columns:' \
          --text '6 4'`
          exit if result[0..0] == '2'
          result=result.split(/$/)[1]
        end
        # print "Result: #{result}"
        m = /(\d+)\D+(\d+)/.match(result.to_s)
        exit if m.nil?
        rows, columns = m[1].to_i, m[2].to_i
        # print "Rows: #{rows}"
        # print "Columns: #{columns}"
        print "\\begin{tabular}{"
        columns.times {print("c")}
        puts "}"
        puts "\\hline\n"
        n=0
        rows.times do |r|
          (columns-1).times do |c|
            n+=1
            print "${#{n}:r#{r+1}c#{c+1}} & "
          end
          n+=1
          print "${#{n}:r#{r+1}c#{columns}}\\\\\\\\\n"
          puts "\\hline\n"
        end
        puts "\\end{tabular}"
      :input: none
4BAA7812-3BED-4A7B-8292-08C17C935BD7: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: saveActiveFile
      :name: Export to GeekTool
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: G
        modifiers: 
        - :control
      :uuid: 4BAA7812-3BED-4A7B-8292-08C17C935BD7
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby  
        
        require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
        require "erb"
        require "pp"
        include ERB::Util
        
        $myPath = ENV['TM_DIRECTORY'] 
        $tags = [] #user defined contexts
        
        def readContexts(a)
          # processes contexts.gtd into script  
          context, tabCommand, tabString, regex, color = a.split(/\|/)
          if context != "+ DONE"
            $tags.push({:label => context[3..-1], :regexp => regex, :color => color, :matches => []})  
          end 
        end 
        
        # the contexts.gtd file is read, and converted into $contexts
        file = File.open($myPath+"/contexts.gtd", "r")
        file.each do |line|
          readContexts(line)
        end 
        
        # new feature - exclusion of selected files
        # this allows you to select which lists are included
        # in list views
        class ExList
          def initialize
            @values = []
          end
          def contains(test)
            found = true
            @values.each do |item|
              if test == item.chomp
                found = false
              end
            end
            return found
          end
          def add(item)
            @values.push item
          end
          def print
            puts @values
          end
        end
        
        xFile = File.open($myPath+"/excluded.gtd", "r")
        
        myList = ExList.new
        
        xFile.each do |line|
          myList.add(line)
        end
        
        # sorting happens
        todoList = ""
        $tags.each do |tag| 
          context = tag[:regexp]
          todoList += tag[:label] + "\n"  
          matches = 0 
          myFiles = Dir.entries($myPath)
          myFiles.each do |fileName|
            if ((fileName[-3,3] == "gtd") and myList.contains(fileName))
              lineno = 0
              mFile = File.open(fileName) 
              mFile.each do |line|
                lineno = lineno + 1
                tLine = line[3..-1]
                if tLine != nil
                  re = /\s/
                  if line[0..1] == "- "
                    ctask = re.match(tLine)
                  else 
                    ctask = re.match(line)
                  end
                  if (ctask.pre_match == context) and (context != "+")
                    results = (fileName[0..-5] + ":" + lineno.to_s + ": " + ctask.post_match)
                    todoList += results
                    matches += 1
                  end        
                end
              end
            end
          end
          if matches == 0
            todoList += "none\n"
          end
          todoList += "\n"
        end
           
        File.open($myPath + "/todoList.txt", "w") {|f|
          f << todoList}
        puts "GeekTool Updated."

      :input: none
486047C3-9313-4276-97A7-EEDCF2E2ABB8: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.tex.latex.sweave meta.block
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: Change Block Parameters
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: <
        modifiers: 
        - :control
      :uuid: 486047C3-9313-4276-97A7-EEDCF2E2ABB8
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        ar = ["<<>>=",
          "<<echo=true>>=","<<echo=false,results=hide>>=",
          "<<echo=false,results=tex>>=",
          "<<echo=false,results=verbatim>>="]
        text = STDIN.readlines
        if (i = ar.index(text[0].strip))
          text[0] = ar[(i+1)% 4] + "\n"
        end
        print text.join

      :input: selection
9A1AE6BA-8350-4AB7-B5BD-969A7E64CF29: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: source.ruby.rails, source.yaml
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Migrate to Previous Version
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "|"
        modifiers: 
        - :control
      :uuid: 9A1AE6BA-8350-4AB7-B5BD-969A7E64CF29
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        RUBYLIB="$TM_BUNDLE_SUPPORT/lib:$RUBYLIB"
        
        # Find the previous version number from the schema.rb file
        export PREVIOUS=`grep 'Schema\.define' "$TM_PROJECT_DIRECTORY/db/schema.rb" | ruby -e 'print $stdin.read.scan(/\d+/).first.to_i - 1'`
        
        # Migrate database to the previous version
        "${TM_RUBY:=ruby}" -- "${TM_BUNDLE_SUPPORT}/bin/rake_helper.rb" db:migrate -v VERSION -a $PREVIOUS

      :input: none
4BBD1C32-8316-11D9-968E-000D9332809C: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Tabs to HTML OL
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: o
        modifiers: 
        - :control
        - :super
      :uuid: 4BBD1C32-8316-11D9-968E-000D9332809C
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: "perl \"$TM_BUNDLE_SUPPORT/t2ol.pl\"\n\n\
        # Yes, this actually validates as HTML 4.01 Transitional. It is surprisingly annoying to get a nested list to validate. "
      :input: selection
DA0A4E77-5F16-11D9-B9C3-000D93589AF6: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: (1?$2:<nop>)
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Show TM_* Variables
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: DA0A4E77-5F16-11D9-B9C3-000D93589AF6
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: (^TM_(.*)$)?
      :command: env|grep ^TM_|sort
      :input: none
32232356-5D3E-42FC-B7F5-35C45F42F010: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.bbcode
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Preview
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: p
        modifiers: 
        - :alt
        - :control
        - :super
      :uuid: 32232356-5D3E-42FC-B7F5-35C45F42F010
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: php "$TM_BUNDLE_SUPPORT/bbparser.php"
      :input: document
478FBA1D-C11C-4D53-BE95-8B8ABB5F15DC: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: meta.bracketed.objc
      :fallback_input: scope
      :line_capture_register: 
      :before_running_command: nop
      :name: "Completion: Inside Brackets"
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: !binary |
          Gw==

        modifiers: 
        - :alt
      :uuid: 478FBA1D-C11C-4D53-BE95-8B8ABB5F15DC
      :disable_output_auto_indent: false
      :bundle_uuid: 4679484F-6227-11D9-BFB1-000D93589AF6
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        #!/usr/bin/env ruby
        
        require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
        require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"
        
        class String
          def index_of_nth_occurrence_of(n, ch)
            self.unpack("U*").each_with_index do |e, i|
              return i if e == ch && (n -= 1) == 0
            end
            return -1
          end
        end
        
        def caret_position(line)
          tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
          if tmp > 0
            caret_placement = line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
          else
            caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
          end
        end
        
        class ObjCMethodCompletion
          def initialize(line, caret_placement)
            @line = line
            @car = caret_placement
          end
        
          def construct_arg_name(arg)
            a = arg.match(/(NS|AB|CI|CD)?(Mutable)?(([AEIOQUYi])?[A-Za-z_0-9]+)/)
            unless a.nil?
              (a[4].nil? ? "a": "an") + a[3].sub!(/\b\w/) { $&.upcase }
            else
              ""
            end
          end
        
          def prettify(cand, call)
            stuff = cand.split("\t")
            if stuff[0].count(":") > 0
              name_array = stuff[0].split(":")
              out = ""
              begin
                stuff[-(name_array.size)..-1].each_with_index do |arg,i|
                  out << name_array[i] +  ":("+ arg.gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)+") "
                end
              rescue NoMethodError
                out << stuff[0]
              end
            else
              out = stuff[0]
            end
            out = "(#{stuff[5].gsub(/ \*/,(ENV['TM_C_POINTER'] || " *").rstrip)})#{out}" unless call || (stuff.size < 4)
        
            return [out.chomp.strip, stuff[0], cand]
          end
        
          def snippet_generator(cand, start, call)
            start = 0 unless call
            stuff = cand[start..-1].split("\t")
            if stuff[0].count(":") > 0
        
              name_array = stuff[0].split(":")
              name_array = [""] if name_array.empty? 
              out = ""
              begin
                stuff[-(name_array.size)..-1].each_with_index do |arg,i|
                  if (name_array.size == (i+1))
                    if arg == "SEL"
                      out << name_array[i] + ":${0:SEL} "
                    else
                      out << name_array[i] + ":${"+(i+1).to_s + ":"+ arg+"}$0"
                    end
                  else
                    out << name_array[i] +  ":${"+(i+1).to_s + ":"+ arg+"} "
                  end
                end
              rescue NoMethodError
                out << stuff[0]
              end
            else
              out = stuff[0] + "$0"
            end
            out = "(#{stuff[5]})#{out}" unless call || (stuff.size < 4)
            return out.chomp.strip
          end
        
          def pop_up(candidates, searchTerm, call = true)
            start = searchTerm.size
            prettyCandidates = candidates.map { |candidate| prettify(candidate,call) }.sort
            if prettyCandidates.size > 1
              require "enumerator"
              pruneList = []  
        
              prettyCandidates.each_cons(2) do |a| 
                pruneList << (a[0][0] != a[1][0]) # check if prettified versions are the same
              end
              pruneList << true
              ind = -1
              prettyCandidates = prettyCandidates.select do |a| #remove duplicates
                pruneList[ind+=1]  
              end
            end
        
            if prettyCandidates.size > 1
              #index = start
              #test = false
              #while !test
              #  candidates.each_cons(2) do |a,b|
              #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
              #  end
              #  break if test
              #  searchTerm << candidates[0][index].chr
              #  index +=1
              #end
              prettyCandidates = prettyCandidates.sort {|x,y| x[1].downcase <=> y[1].downcase }
              show_dialog(prettyCandidates,start) do |c,s|
                snippet_generator(c,s, call)
              end
            else
              snippet_generator( candidates[0], start, call )
            end
          end
        
          def cfunc_snippet_generator(c,s)
            c = c.split"\t"
            i = 0
            ((c.size < 2 || c.size > 4 || c[1]=="") ? c[0][s..-1]+"$0" : c[0][s..-1]+"("+c[1][1..-2].split(",").collect do |arg| 
              "${"+(i+=1).to_s+":"+ arg.strip + "}" 
            end.join(", ")+")$0")
          end
        
          def c_snip_gen(c,si,arg_type=nil)
            s = si.size
            prettyCandidates = c.map do |candidate|
              ca = candidate.split("\t")
              [((ca[1].nil? || !ca[4].nil? || c[1]=="") ? ca[0] : ca[0]+ca[1]),ca[0], candidate] 
            end
            unless arg_type.nil?
              tmp = prettyCandidates.reject do |junk1,junk2,b|
                v = b.split("\t")[2]
                v !=nil && v != arg_type
              end
              prettyCandidates = tmp unless tmp.empty?
            end
            if prettyCandidates.size > 1
              show_dialog(prettyCandidates,s) do |cand,size|
                cfunc_snippet_generator(cand,size)
              end
            else
              cfunc_snippet_generator(c[0],s)
            end
          end
        
        
        
          def show_dialog(prettyCandidates,start,&snip_gen)
            require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
            pl = {'menuItems' => prettyCandidates.map { |pretty, junk, full | { 'title' => pretty, 'cand' => full} }}
            io = open('|"$DIALOG" -u', "r+")
            io <<  pl.to_plist
            io.close_write
            res = OSX::PropertyList::load(io.read)
            if res.has_key? 'selectedMenuItem'
              snip_gen.call( res['selectedMenuItem']['cand'], start )
            else
              "$0"
            end
          end
        
          def candidates_or_exit(methodSearch, list, fileNames)
            x = candidate_list(methodSearch, list, fileNames)
            TextMate.exit_show_tool_tip "No completion available" if x.empty?
            return x
          end
        
          def candidate_list(methodSearch, list, types)
            unless list.nil?
              obType = list[1]
              list = list[0]
            end
            
            notif = false
            if types == :classes
              userClasses = "#{ENV['TM_PROJECT_DIRECTORY']}/.classes.TM_Completions.txt.gz"
              fileNames = ["#{ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz"]
              fileNames += [userClasses] if File.exists? userClasses
            elsif types == :functions
              fileNames = "#{ENV['TM_BUNDLE_SUPPORT']}/CocoaFunctions.txt.gz"
            elsif types == :methods
              fileNames = ["#{ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz"]
              userMethods = "#{ENV['TM_PROJECT_DIRECTORY']}/.methods.TM_Completions.txt.gz"
        
              fileNames += [userMethods] if File.exists? userMethods
            elsif types == :constants
              fileNames = "#{ENV['TM_BUNDLE_SUPPORT']}/CocoaConstants.txt.gz"
            elsif :notifications
              fileNames = "#{ENV['TM_BUNDLE_SUPPORT']}/CocoaNotifications.txt.gz"
            end
        
            candidates = []
            if obType && obType == :initObject
              if methodSearch.match /^(i(n(i(t([A-Z]\w*)?)?)?)?)?(\[\[:alpha:\]:\])?$/
                methodSearch = "init[[:space:][:upper:]]" unless methodSearch.match(/^init(\b|[A-Z])/)
              end
            end
            fileNames.each do |fileName|
              zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh fileName }}
              candidates += zGrepped.split("\n")
            end
            
            
            return [] if candidates.empty?
            if list.nil?
              return candidates
            else
              n = []
              candidates.each do |cand|
                n << cand if list.include?(cand.split("\t")[0])
              end
              n = (n.empty? ? candidates : n)
        
              return n
            end
          end
        
        
        
          def match_iter(rgxp,str)
            offset = 0
            while m = str.match(rgxp)
              yield [m[0], m.begin(0) + offset, m[0].length]
              str = m.post_match
              offset += m.end(0)
            end
          end
        
          def methodNames(line )
            up =-1
            list = ""
            pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
            match_iter(pat , line) do |tok, beg, len|
              t = tok[0].chr
              if t == "["
                up +=1
              elsif t == "]"
                up -=1
              elsif t !='"' and t !='@' and up == 0
                list << tok
              end
            end
            return list
          end
        
          def return_type_based_c_constructs_suggestions(mn, search, show_arg)
            if ["addObserver:selector:name:",	"notificationWithName:", "postNotificationName:", "removeObserver:name:"].include? mn
              if show_arg
                candidates = ["NSString *"]
              else
                candidates = []
              end
        
              candidates += candidates_or_exit(search, nil, :notifications)
              res = c_snip_gen(candidates, search, nil)
            else
              candidates = candidate_list(mn, nil, :methods)
              arg_type = candidates[0].split("\t")[5+mn.count(":")] unless candidates.empty?
        
              if show_arg && !arg_type.nil?
                candidates = [arg_type]
              else
                candidates = []
              end
              candidates +=  candidate_list(search, nil, :functions)
              candidates += candidate_list(search, nil, :constants)
              TextMate.exit_show_tool_tip "No completion available" if candidates.empty?
              res = c_snip_gen(candidates, search, arg_type)
            end
          end
        
        
          def try_find_class(line)
            if  m = line.match(/^\[\s*(\[|([A-Z][a-zA-Z][a-zA-Z0-9]*)\s)/)
              if m[1] == "["
                pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
                up = -2
                last = -1
                match_iter(pat , line) do |tok, beg, len|
                  t = tok[0].chr
                  if t == "["
                    up +=1
                  elsif t == "]"
                    if up == 0
                      last = beg
                      break
                    end
                    up -=1
                  end
                end
                mn = methodNames(line[m.begin(1)..last])
                if mn.empty?
                  m = line[m.begin(1)..last].match(/([a-zA-Z][a-zA-Z0-9]*)\s*\]$/)
                  mn = m[1] unless m.nil?
                end
                if mn && (mn == "alloc" || mn == "allocWithZone:")
                  obType = :initObject
                  if  m = line.match(/^\[\s*\[\s*([A-Z][a-zA-Z][a-zA-Z0-9]*)\s/)
                    framework = %x{ zgrep ^#{e_sh m[1] + "[[:space:]]" } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz }.split("\n")
                    unless framework.empty?
                      list = %x{#{e_sh ENV['TM_BUNDLE_SUPPORT']}/bin/inspectclass -i -n #{e_sh m[1]} -f #{e_sh framework[0].split("\t")[1]}}.split("\n")
                      list = list.select do |e|
                        e.match(/^(init(\b|[A-Z]))/)
                      end
                    end
                  end
                else
                  candidates = %x{ zgrep ^#{e_sh mn + "[[:space:]]" } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/cocoa.txt.gz }.split("\n")
              
        
                  unless candidates.empty?
                    if (type = candidates[0].split("\t")[5].match(/[A-Za-z]+/))
                      framework = %x{ zgrep ^#{e_sh type[0] + "[[:space:]]" } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz }.split("\n")
                      unless framework.empty?
                        list = %x{#{e_sh ENV['TM_BUNDLE_SUPPORT']}/bin/inspectclass -i -n #{e_sh type[0]} -f #{e_sh framework[0].split("\t")[1]}}.split("\n")
                      end
                    end      
                  end
                end
              else
                obType = :classMethod
                framework = %x{ zgrep ^#{e_sh m[2] + "[[:space:]]" } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/CocoaClassesWithFramework.txt.gz }.split("\n")
                unless framework.empty?
                  list = %x{ #{e_sh ENV['TM_BUNDLE_SUPPORT']}/bin/inspectclass -c -n #{e_sh m[2]} -f #{e_sh framework[0].split("\t")[1]}}.split("\n")
                end
              end
            end
            return list, obType
          end
        
        
          def print
        
            caret_placement = @car
            line = @line
            bc = line[1+caret_placement..-1].match /^[a-zA-Z0-9_]+(:)?/
            if bc
              backContext = "[[:alpha:]]*" + bc[0]
              bcL = bc[0].length
            end
        
            pat = /("(\\.|[^"\\])*"|\[|\]|@selector\([^\)]*\)|[a-zA-Z][a-zA-Z0-9]*:)/
        
            if caret_placement == -1
              TextMate.exit_discard
            end
        
            up = 0
            start = [0]
            #Count [
            match_iter(pat , line[0..caret_placement]) do |tok, beg, len|
              t = tok[0].chr
              if t == "["
                start << beg
              elsif t == "]"
                start.pop
              end
            end
        
            colon_and_space = /([a-zA-Z][a-zA-Z0-9]*:)\s*$/
            alpha_and_space = /[a-zA-Z0-9"\)\]]\s+$/
            alpha_and_caret = /[a-zA-Z][a-zA-Z0-9]*$/
        
            mline = line.gsub(/\n/, " ")
            # find Nested method
            list = try_find_class(mline[start[-1]..caret_placement])
            mn = methodNames(line[start[-1]..caret_placement])
        
            if mline[start[-1]..caret_placement].match colon_and_space
              # [obj mess:^]
              [res = return_type_based_c_constructs_suggestions(mn, "", true) , 0]
        
            elsif temp =mline[start[-1]..caret_placement].match( alpha_and_space)
              # [obj mess ^]
              candidates = candidates_or_exit( mn + (backContext || "[[:alpha:]:]"), list, :methods ) # the alpha is to prevent satisfaction with just one part
              res = pop_up(candidates, mn)
              [res , (backContext && (res != "$0") ? bcL : 0)]
            elsif k = mline[start[-1]..caret_placement].match( alpha_and_caret)
              # [obj mess^]
              if mline[start[-1]..k.begin(0)-1+start[-1]].match alpha_and_space
                mn += k[0]
                candidates = candidates_or_exit( mn + (backContext || "[[:alpha:]:]"), list, :methods)
                res =pop_up(candidates, mn)
                [res , (backContext && (res != "$0") ? bcL : 0)]
                # [NSOb^]
              elsif mline[start[-1]..k.begin(0)-1+start[-1]].match(/\[\s*$/)
                candidates = candidates_or_exit( k[0] + (backContext || "[[:alpha:]]"), nil, :classes)
                res =pop_up(candidates, k[0])
                [res , (backContext && (res != "$0") ? bcL : 0)]
              elsif mline[start[-1]..k.begin(0)-1+start[-1]].match(colon_and_space)
                #  [obj mess: arg^]
                res = return_type_based_c_constructs_suggestions(mn, k[0], false)
                [res , (backContext && (res != "$0") ? bcL : 0)]
        
             # else
              #  TextMate.exit_discard
              end
            #else
             # 
            end
        
          end
        end
        
        if ENV['TERMINAL_MATE_NEW']
          class ObjCMethodCompletion
            def show_dialog(prettyCandidates,start,&snip_gen)
              require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
              pl = {'menuItems' => prettyCandidates.map { |pretty, junk, full | { 'title' => pretty, 'cand' => full} }}
              pl.to_plist
              res = pl['menuItems'][0]
              snip_gen.call( res['cand'], start )
            end
          end
          
          class TextMateEarlyExitException < RuntimeError
          end
          
          module TextMate
            module_function
            def exit_show_tool_tip(out = nil)
              print out if out
              raise TextMateEarlyExitException, "show tool kit"
            end
            
            def exit_discard(out = nil)
              print out if out
              raise TextMateEarlyExitException, "exit discard"
            end
          end
          
          
          
          tc = [
          {:tmVars => {'TM_LINE_NUMBER' => '19', 'TM_INPUT_START_LINE' => '19', 'TM_LINE_INDEX' => '8', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[self ad]'},
          {:tmVars => {'TM_LINE_NUMBER' => '20', 'TM_INPUT_START_LINE' => '20', 'TM_LINE_INDEX' => '20', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[[NSStrig alloc] ini]'},
          {:tmVars => {'TM_LINE_NUMBER' => '19', 'TM_INPUT_START_LINE' => '19', 'TM_LINE_INDEX' => '8', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[self adbl]'},
          {:tmVars => {'TM_LINE_NUMBER' => '21', 'TM_INPUT_START_LINE' => '21', 'TM_LINE_INDEX' => '26', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[NSObject isKindOfClass:NS]'},
          {:tmVars => {'TM_LINE_NUMBER' => '22', 'TM_INPUT_START_LINE' => '22', 'TM_LINE_INDEX' => '18', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for]'},
          {:tmVars => {'TM_LINE_NUMBER' => '23', 'TM_INPUT_START_LINE' => '23', 'TM_LINE_INDEX' => '22', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for for]'},
          {:tmVars => {'TM_LINE_NUMBER' => '24', 'TM_INPUT_START_LINE' => '24', 'TM_LINE_INDEX' => '21', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[sto setObject:for + ]'},
          {:tmVars => {'TM_LINE_NUMBER' => '25', 'TM_INPUT_START_LINE' => '25', 'TM_LINE_INDEX' => '5', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj ]'},
          {:tmVars => {'TM_LINE_NUMBER' => '26', 'TM_INPUT_START_LINE' => '26', 'TM_LINE_INDEX' => '7', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[NSObje]'},
          {:tmVars => {'TM_LINE_NUMBER' => '27', 'TM_INPUT_START_LINE' => '27', 'TM_LINE_INDEX' => '5', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj ]'},
          {:tmVars => {'TM_LINE_NUMBER' => '28', 'TM_INPUT_START_LINE' => '28', 'TM_LINE_INDEX' => '6', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj t]'},
          {:tmVars => {'TM_LINE_NUMBER' => '11','TM_INPUT_START_LINE' => '11','TM_LINE_INDEX' => '11','TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj t:b:av]'},
          {:tmVars => {'TM_LINE_NUMBER' => '30', 'TM_INPUT_START_LINE' => '30', 'TM_LINE_INDEX' => '19', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString ]]'},
          {:tmVars => {'TM_LINE_NUMBER' => '31', 'TM_INPUT_START_LINE' => '31', 'TM_LINE_INDEX' => '30', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@"eu" ]]'},
          {:tmVars => {'TM_LINE_NUMBER' => '32', 'TM_INPUT_START_LINE' => '32', 'TM_LINE_INDEX' => '35', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@"eu" forYo]]'},
          {:tmVars => {'TM_LINE_NUMBER' => '33', 'TM_INPUT_START_LINE' => '33', 'TM_LINE_INDEX' => '40', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj set:[NSString role:@"eu" forYou:sel]]'},
          {:tmVars => {'TM_LINE_NUMBER' => '34', 'TM_INPUT_START_LINE' => '34', 'TM_LINE_INDEX' => '26', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => '[obj postNotificationName: object:NSString *]'},
          {:tmVars => {'TM_LINE_NUMBER'=> '7','TM_INPUT_START_LINE'=> '6','TM_LINE_INDEX'=> '55', 'TM_INPUT_START_LINE_INDEX' => '0'}, :line => "[[NSNotificationCenter defaultCenter] addObserver:self\n                        selector:@selector(colorPicker:) ]"}]
        
          
          ENV['TM_BUNDLE_SUPPORT'] = "/Library/Application Support/TextMate/Bundles/Objective-C.tmbundle/Support"
          tc.each do |element|
            element[:tmVars].each do |key,value|
              ENV[key] = value
            end
            caret_placement = caret_position(element[:line])
        begin
            res = ObjCMethodCompletion.new(element[:line] , caret_placement).print
        rescue NoMethodError => boom
        
          puts "error in:" + element.inspect
        
          puts boom
          
        rescue TextMateEarlyExitException => boom
          puts "Early Exit"
        end
          
          end
          
        else
        line = STDIN.read
        caret_placement = caret_position(line)
        res, os = ObjCMethodCompletion.new(line , caret_placement).print
        if res
          print e_sn(line[0..caret_placement]) + res + e_sn(line[caret_placement + 1 + os..-1]) 
        else
          TextMate.exit_discard
        end
        end

      :input: selection
E54E0D99-5558-4168-9DDA-963F066FBA58: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.restructuredtext
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: Create S5 Document
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: r
        modifiers: 
        - :super
      :uuid: E54E0D99-5558-4168-9DDA-963F066FBA58
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |-
        TRST=${TM_RST2S5:=rst2s5.py}
        
        require_cmd "$TRST" "You can either set the <tt>TM_RST2S5</tt> variable to the full path of your docutils (docutils.sourceforge.net) installation (e.g. <tt>/Library/Frameworks/Python.framework/Versions/2.4/bin/rst2html.py</tt> or set the <tt>PATH</tt> variable to include the path of the docutils converters."
        
        $TRST "$TM_FILEPATH"
      :input: selection
5289EE40-86B8-11D9-A8D4-000A95E13C98: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: $0
      :scope: source.ruby
      :fallback_input: 
      :line_capture_register: "2"
      :before_running_command: saveActiveFile
      :name: Run Focused Unit Test
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: R
        modifiers: 
        - :super
      :uuid: 5289EE40-86B8-11D9-A8D4-000A95E13C98
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: "1"
      :tab_trigger: 
      :capture_pattern: (/[^:]+):(\d+)
      :command: |-
        # Assumes the current file is a unittest file
        # Runs with the currently-focused method as the test name
        
        args=$(${TM_RUBY:=ruby} <<"EOF"
        
        def convert_bdd_name(name)
        name.to_s.gsub(/^(?:.*"(.*)"|'(.*)').*$/) { $1 || $2 }.gsub(/[^\w ]+/, '').gsub(/ +/, '_')
        end
        
        def camelize(lower_case_and_underscored_word)
        lower_case_and_underscored_word.to_s.gsub(/\/(.?)/) { "::" + $1.upcase }.gsub(/(^|_)(.)/) { $2.upcase }
        end
        
        n = ENV['TM_LINE_NUMBER'].to_i
        
        specify, context, name = nil, nil, nil
        
        File.open(ENV['TM_FILEPATH']) do |f|
        # test/unit
        lines     = f.read.split("\n")[0...n].reverse
        name      = lines.find { |line| line =~ /^\s*def test[_a-z0-9]*[\?!]?/i }.to_s.sub(/^\s*def (.*?)\s*$/) { $1 }
        # simply_bdd
        specify   = convert_bdd_name(lines.find { |line| line =~ /^\s*specify\b/ })
        context   = camelize(convert_bdd_name(lines.find { |line| line =~ /^\s*context\b/ }))
        end
        
        puts [name, specify, context].inspect
        
        if !name.empty?
        print "--name=#{name}"
        elsif !specify.empty? && !context.empty?
        print "--name=test_#{specify} --testcase=Class::#{context}Test"
        end
        
        EOF)
        
        if [[ -z "$args" ]]; then
        echo -e "This doesn't appear to be a TestCase class."
        exit_show_tool_tip
        fi
        
        # I don't know why, but this doesn't run just the one 'specify'
        # when running simply_bdd tests. It runs the whole context.
        
        export RUBYLIB="$TM_BUNDLE_SUPPORT/RubyMate${RUBYLIB:+:$RUBYLIB}"
        "${TM_RUBY:-ruby}" -- "$TM_BUNDLE_SUPPORT/RubyMate/run_script.rb" $args
      :input: document
2AD289D4-FBE2-40D2-B12D-3D498486B881: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: 
      :fallback_input: 
      :line_capture_register: 
      :before_running_command: nop
      :name: ctrl-shift-5
      :auto_scroll_output: 
      :activated_by_value: !ruby/object:Redcar::KeyStroke 
        keyname: "%"
        modifiers: 
        - :control
      :uuid: 2AD289D4-FBE2-40D2-B12D-3D498486B881
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: 
      :capture_pattern: 
      :command: |
        cd ${TM_PROJECT_DIRECTORY}
        "${TM_RUBY:=ruby}" <<'EOF'
        
        num = 5
        
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" --check`
        if($? == 0)
          print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`
          exit()
        end
        
        output = `CocoaDialog inputbox --title Input --informative-text 'What command should be run?' --button1 Record --button2 'Cancel'`
        output = output.split("\n")
        
        # check the button pressed, exit if it wasn't Record
        if(output[0] !~ /^1$/)
        	exit
        end
        
        # update the command
        `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys" -u '#{output[1].strip.gsub(/'/, '\\\\1')}'`
        
        # run the command
        print `"#{ENV['TM_BUNDLE_SUPPORT']}/hotkey.rb" -n #{num} -c "#{ENV['TM_PROJECT_DIRECTORY']}/.tmhotkeys"`

      :input: none
7FC498D7-1477-445B-A39B-FA63FDF10742: 
  :tags: 
  - :textmate
  - :command
  :definitions: 
  - :type: :master
    :version: 1
    :data: 
      :capture_format_string: 
      :scope: text.html.markdown.wiki.gtd
      :fallback_input: line
      :line_capture_register: 
      :before_running_command: nop
      :name: Archive Task
      :auto_scroll_output: 
      :activated_by_value: 
      :uuid: 7FC498D7-1477-445B-A39B-FA63FDF10742
      :disable_output_auto_indent: 
      :bundle_uuid: 
      :output: 
      :file_capture_register: 
      :tab_trigger: a
      :capture_pattern: 
      :command: |-
        #!/usr/bin/env ruby
        # just to remind you of some useful environment variables
        # see Help / Environment Variables for the full list
        # echo File: "$TM_FILEPATH"
        
        archiveDate = `date +%Y-%m-%d`
        myArchive = ENV['TM_PROJECT_DIRECTORY'].to_s + '/ArchivedTasks.gtd'
        myTasks = ''
        myTask = (`date +%Y-%m-%d`).chomp + " " + ENV['TM_FILENAME'][0..-5] + ": " + ENV['TM_CURRENT_LINE'][3..-1] 
        #puts myArchive
        
        unless (File.exists?(myArchive))
        	exec "touch #{myArchive}"
        end 
        
        File.open(myArchive, "r").each do |line|
          myTasks = myTasks + line
        end
        
        myTasks = myTasks + myTask + "\n"
        
        File.open(myArchive, "w") do |f|
          f << myTasks
        end
      :input: selection
